// Decompiled with JetBrains decompiler
// Type: ProxyBase.Client
// Assembly: ProxyBase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 077B98B9-686A-434C-992F-701D553EA96A
// Assembly location: C:\Users\snowi\Documents\projects\ProxyBase3-30-17\ProxyBase.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Media;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Timers;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;

namespace ProxyBase
{
    public class Client
    {
        public long spint = 8805784;
        public long dall = 6106580;
        public long walls = 6178256;
        public long nameadd = 7592208;
        public bool getEntityAC = false;
        public int getEntityACsHP = 0;
        public uint getEntityACsID = 0;
        public bool testdmg = false;
        public uint lowestdmg = 0;
        public uint highestdmg = 0;
        public bool eventScriptOffset = false;
        public Dictionary<ushort, DateTime> SpellBarTimers = new Dictionary<ushort, DateTime>();
        public int lastmapnum = int.MinValue;
        public Dictionary<int, Location> LastMapLocation = new Dictionary<int, Location>();
        public DateTime portalani = DateTime.MinValue;
        public DateTime expgemtimer = DateTime.MinValue;
        public uint beforeascend = 0;
        public bool ascendexp = false;
        public bool outofwine = false;
        public bool ihaveamentor = false;
        public DateTime castonghosttimer = DateTime.MinValue;
        public DateTime sensedelay = DateTime.MinValue;
        public bool bladesmithnoswords = false;
        public Dictionary<string, string> LegendMarks = new Dictionary<string, string>();
        public DateTime losterbiedelay = DateTime.MinValue;
        public int ballemoboy = 0;
        public bool buyballpots = false;
        public int followmode = 0;
        public bool towerfinish = false;
        public DateTime briesdelay = DateTime.MinValue;
        public uint LasthitbyanimationID = 0;
        public bool meditatedone = false;
        public bool meditate = false;
        public bool mblue = false;
        public bool mgreen = false;
        public bool mwhite = false;
        public bool myellow = false;
        public bool mbrown = false;
        public bool mpurple = false;
        public bool mred = false;
        public bool mblack = false;
        public Location lastdroploc = (Location)null;
        public DateTime lastdroptime = DateTime.MinValue;
        public bool tagorcitpopup = false;
        public bool warrior = false;
        public bool monk = false;
        public bool priest = false;
        public bool wizard = false;
        public bool rogue = false;
        public bool tocpopup = false;
        public bool tailornoarmors = false;
        public bool tailorool = false;
        public bool gotmanorkey = false;
        public DateTime itemdroppeddelay = DateTime.MinValue;
        public bool disstopwalk = false;
        public Npc Disenchanter = (Npc)null;
        public bool needsrepaired = false;
        public bool learnswim = false;
        public string chestfee = string.Empty;
        public uint goldbeforechest = 0;
        public bool claimsunprotection = false;
        public bool claimbeachattire = false;
        public bool disenchanterappears = false;
        public DateTime discasttime = DateTime.MinValue;
        public bool repairmode = false;
        public bool walktut = false;
        public DateTime haxtimer = DateTime.MinValue;
        public DateTime Alertdelay = DateTime.MinValue;
        public DateTime altartimer = DateTime.MinValue;
        public int laborcount = 0;
        public bool makeawish = false;
        public bool muisirenter = false;
        public bool needsmats = false;
        public string MySpeakMessage = string.Empty;
        public bool leavementor = false;
        public bool serverreset = false;
        public DateTime skullalertdelay = DateTime.MinValue;
        public DateTime removedarmordelay = DateTime.MinValue;
        public bool manualremovedarmor = false;
        public string removedarmor = string.Empty;
        public string armornow = string.Empty;
        public string Overhat = string.Empty;
        public string Necklace = string.Empty;
        public DateTime dojodelay = DateTime.MinValue;
        public DateTime carpetdelay = DateTime.MinValue;
        public DateTime ambushdelay = DateTime.MinValue;
        public DateTime GlobalSpellCD = DateTime.MinValue;
        public uint CurrentTarget = 0;
        public DateTime targetanimationdelay = DateTime.MinValue;
        public bool stopwalk = false;
        public uint LastVanishedGold = 0;
        public bool lootinggold = false;
        public uint LastDeadNpc = 0;
        public uint LastDeadMonster = 0;
        public bool _debug = false;
        public bool frostygift = false;
        public bool yulequest = false;
        public string yulelogcount = "{=bC 0, F 0";
        public uint cedarlogs = 0;
        public uint firlogs = 0;
        public bool buyfiorsrads = false;
        public bool yulemileth = false;
        public bool yuleruc = false;
        public bool yulepiet = false;
        public bool yulesuomi = false;
        public bool yuletagor = false;
        public bool yuleabel = false;
        public DateTime mancastdelay = DateTime.MinValue;
        public bool remail = false;
        public bool reddingsomeone = false;
        public DateTime dcarrowtimer = DateTime.MinValue;
        public DateTime dcarrow1timer = DateTime.MinValue;
        public DateTime carrowtimer = DateTime.MinValue;
        public DateTime carrow1timer = DateTime.MinValue;
        public DateTime arrowswitchdelay = DateTime.MinValue;
        public DateTime healdelayedreaction = DateTime.MinValue;
        public DateTime lastheal = DateTime.MinValue;
        public DateTime aosuaindelayedreaction = DateTime.MinValue;
        public DateTime lastaosuain = DateTime.MinValue;
        public DateTime aodalldelayedreaction = DateTime.MinValue;
        public DateTime lastaodall = DateTime.MinValue;
        public DateTime aopoisondelayedreaction = DateTime.MinValue;
        public DateTime lastaopoison = DateTime.MinValue;
        public List<Item> ForceIdentify = new List<Item>();
        public List<Mail> MailList = new List<Mail>();
        public DateTime Hasmentortimer = DateTime.MinValue;
        public bool hasamentor = false;
        public bool mentoraccept = false;
        public bool rementor = false;
        public string checkingformentormarkname = string.Empty;
        public uint checkingformentormarkid = 0;
        public bool throwss = false;
        public string throwername = string.Empty;
        public bool mailwait = false;
        public bool mailwaitb = false;
        public bool logmail = false;
        public bool buy2ndtalisman = false;
        public bool lawquest = false;
        public bool slabquest = false;
        public int ajquest = 0;
        public int ytquest = 0;
        public bool darkmaze = false;
        public int darkmazequest = 0;
        public DateTime KhevenTimer = DateTime.MinValue;
        public uint bardsnotesID = 0;
        public uint wizresearchID = 0;
        public uint ClickedEntityID = 0;
        public bool EntityClicked = false;
        public DateTime EntityClickTimer = DateTime.MinValue;
        public bool countarena = false;
        public DateTime labortime = DateTime.MinValue;
        public int letterquest = 0;
        public bool lettercourtney = false;
        public bool theletter = false;
        public bool molo = false;
        public bool blocklores = false;
        public bool has25hydele = false;
        public bool has25betony = false;
        public bool has25personaca = false;
        public bool tooheavy = false;
        public bool distracted = false;
        public bool megprize = false;
        public bool banklist = false;
        public byte Medenian = 0;
        public bool appendand = false;
        public bool askaite = true;
        public bool askfas = true;
        public bool askflower = true;
        public bool askred = true;
        public bool atemeg = false;
        public bool ateabbox = false;
        public bool ateabgift = false;
        public bool queenchest = false;
        public bool andorchest = false;
        public bool wdchest = false;
        public bool agchestopen = false;
        public bool agchest = false;
        public bool wdchestopen = false;
        public bool andorchestopen = false;
        public bool queenchestopen = false;
        public bool heavybag = false;
        public bool heavybagopen = false;
        public bool bigbag = false;
        public bool bigbagopen = false;
        public bool smallbag = false;
        public bool smallbagopen = false;
        public bool veltainchest = false;
        public bool veltainchestopen = false;
        public bool heavychest = false;
        public bool heavychestopen = false;
        public DateTime herbnodewaittime = DateTime.MinValue;
        public DateTime lastsuccessfulcast = DateTime.MinValue;
        public DateTime openveltchestdelay = DateTime.MinValue;
        public bool walkaround = false;
        public List<string> checkedtiles = new List<string>();
        public string currentdugon = string.Empty;
        public string attemptingdugon = string.Empty;
        public bool dojowalk = false;
        public List<string> altsneedflowered = new List<string>();
        public List<string> macrospelllist = new List<string>();
        public bool giantpearl = false;
        public bool giantpearl2 = false;
        public string firstitemslot = "";
        public bool swappingitem = false;
        public bool waitingonlore = false;
        public DateTime ascendtime = DateTime.MinValue;
        public DateTime rescuedtime = DateTime.MinValue;
        public uint pathmaxhp = 0;
        public uint pathstr = 0;
        public uint pathint = 0;
        public uint pathwis = 0;
        public uint pathcon = 0;
        public uint pathdex = 0;
        public uint priestmax = 3500;
        public uint prieststr = 100;
        public uint priestint = 180;
        public uint priestwis = 215;
        public uint priestcon = 150;
        public uint priestdex = 100;
        public uint wizmax = 3750;
        public uint wizstr = 100;
        public uint wizint = 215;
        public uint wizwis = 180;
        public uint wizcon = 150;
        public uint wizdex = 100;
        public uint roguemax = 4250;
        public uint roguestr = 180;
        public uint rogueint = 100;
        public uint roguewis = 100;
        public uint roguecon = 150;
        public uint roguedex = 215;
        public uint monkmax = 6850;
        public uint monkstr = 180;
        public uint monkint = 150;
        public uint monkwis = 100;
        public uint monkcon = 215;
        public uint monkdex = 100;
        public uint warmax = 4000;
        public uint warstr = 215;
        public uint warint = 100;
        public uint warwis = 100;
        public uint warcon = 180;
        public uint wardex = 150;
        public bool HasAWPath = false;
        public Location CurAWDest = (Location)null;
        public string Currentnpcname = string.Empty;
        public int medusasummon = 0;
        public int digbonesnorth = 0;
        public int digbonesmiddle = 0;
        public int digboneseast = 0;
        public int taurenhorn = 0;
        public int nosering = 0;
        public int previousfakepopup = 0;
        public int queststep = 0;
        public ushort imagetest = 0;
        public DateTime buyclick = DateTime.MinValue;
        public bool buying = false;
        public bool outofcowls = false;
        public bool logoff = false;
        public string PrayerSpell = string.Empty;
        public string PrayerNeck = string.Empty;
        public bool outoflabor = false;
        public bool assisted = false;
        public int dropitemslot = 0;
        public bool impingskill = false;
        public int polishsuccess = 0;
        public bool waitingforlabor = false;
        public DateTime whisperagain = DateTime.MinValue;
        public bool ImBlind = false;
        public DateTime repeatspeech = DateTime.MinValue;
        public DateTime newtargetdelay = DateTime.MinValue;
        public bool disablelegend = false;
        public bool Redirected = false;
        public int follow_walk = 0;
        public Npc mainMonster = (Npc)null;
        public DateTime switchneckdelay = DateTime.MinValue;
        public DateTime EquipWeaponDelay = DateTime.MinValue;
        public bool ShieldOn = false;
        public DateTime mediumskilldelay = DateTime.MinValue;
        public DateTime strongskilldelay = DateTime.MinValue;
        public Npc MainTarget = (Npc)null;
        public bool luring = false;
        public string SpeakMessage = string.Empty;
        public bool hidelegend = false;
        public uint ClickEntityID = 0;
        public DateTime usetunneldelay = DateTime.MinValue;
        public DateTime anttunnel = DateTime.MinValue;
        public DateTime guardiananttunnel = DateTime.MinValue;
        public int anttunnels = 0;
        public int guardiananttunnels = 0;
        public Location nearest = (Location)null;
        public List<string> missing = new List<string>();
        public Location LastLastSpot = new Location(0, 0);
        public bool walk = true;
        public bool lure = false;
        public bool oktofollow = true;
        public DateTime refreshdelay = DateTime.MinValue;
        public DateTime redwaittime = DateTime.MinValue;
        public DateTime lastaction = DateTime.MinValue;
        public DateTime mantidtimer = DateTime.MinValue;
        public bool walktoloot = false;
        public bool Mobbed = false;
        public int MobCount = 0;
        public bool autodeposit = false;
        public bool loot = false;
        public bool aopuinseinbefore = true;
        public bool aocradhsbefore = true;
        public bool beagcradhbefore = true;
        public bool wakescrollbefore = true;
        public bool disbefore = true;
        public bool lootbefore = true;
        public bool dropbefore = true;
        public DateTime clickentitytime = DateTime.MinValue;
        public DateTime reddelay = DateTime.MinValue;
        public DateTime pftime = DateTime.MinValue;
        public DateTime hidetime = DateTime.MinValue;
        public DateTime grimescenttime = DateTime.MinValue;
        public bool useaegis = true;
        public bool restartloop = false;
        public bool monsterloop = false;
        public ArrayList monsters = new ArrayList();
        public ArrayList alts = new ArrayList();
        public bool manuallog = false;
        public bool blockchat = false;
        public bool skullalert = true;
        public bool ateclover = false;
        public bool ategsf = false;
        public bool pausecast = false;
        public bool LoggedOn = false;
        public bool Loaded = false;
        public Location poiloc = new Location(39, 40);
        public Location muettaloc = new Location(35, 44);
        public SpellData druidform = (SpellData)null;
        public uint goldbefore = 0;
        public bool pausewalk = false;
        public bool IsWalking = false;
        public bool keepcasting = false;
        private Random random = new Random();
        public DateTime StaffSwitchDelay = DateTime.MinValue;
        public DateTime assaildelay = DateTime.MinValue;
        public ushort prayscript = 0;
        public ushort herbscript = 0;
        public bool autowalkon = false;
        public int withdrawmode = 0;
        public int depositmode = 0;
        public int sendmode = 0;
        public bool comboscrollused = false;
        public int comboscrolluse = 0;
        public bool castingoneline = false;
        public bool deoch = false;
        public bool pionome = false;
        public bool niomope = false;
        public bool gramail = false;
        public bool habab = false;
        public bool nairn = false;
        public bool brody = false;
        public bool banker = false;
        public bool templeassistant = false;
        public string Currentnpctext = string.Empty;
        public int lawwall = 0;
        public bool popup = false;
        public bool mapresponse = false;
        public bool cancast = true;
        public bool canskill = true;
        public bool donotwalk = false;
        public bool IsCasting = true;
        public bool ImCasting = false;
        public byte Nation = 8;
        public string staffnow = string.Empty;
        public bool manualopencountrylist = false;
        public Location randomdest = (Location)null;
        public List<Location> Previous = new List<Location>();
        public bool ignorewaitatdoors = false;
        public string previousmapname = string.Empty;
        public int previousmap = 0;
        public string LastPermMessage = string.Empty;
        public bool imonster = false;
        public bool skillmap = true;
        public bool spellmap = true;
        public DateTime asgalltime = DateTime.MinValue;
        public DateTime mictime = DateTime.MinValue;
        public DateTime cttime = DateTime.MinValue;
        public DateTime distime = DateTime.MinValue;
        public string LastSpell = string.Empty;
        public uint LastTarget = 0;
        public uint LastMonsterId = 0;
        public bool clickedamonster = false;
        public bool IsSkulled = false;
        public bool IsSuained = false;
        public bool IsStunned = false;
        public bool disIsSummoned = false;
        public DateTime dismsg = DateTime.MinValue;
        public DateTime shakeyhandsdelay = DateTime.MinValue;
        public bool shakeyhands = false;
        public bool hasparcels = false;
        public List<string> CountryList = new List<string>();
        public List<string> GroupMembers = new List<string>();
        public bool safemode = false;
        public bool pause = true;
        public DateTime laststep = DateTime.MinValue;
        public DateTime newmapdelay = DateTime.MinValue;
        public string bugcount = "0 - 0 - 0 - 0 - 0";
        public uint bug25 = 0;
        public uint bug26 = 0;
        public uint bug27 = 0;
        public uint bug28 = 0;
        public uint bug29 = 0;
        public uint bug30 = 0;
        public uint bug31 = 0;
        public uint bug32 = 0;
        public uint bug33 = 0;
        public uint bug34 = 0;
        public uint bug35 = 0;
        public uint bug36 = 0;
        public uint bug37 = 0;
        public uint bug38 = 0;
        public uint bug39 = 0;
        public uint bug40 = 0;
        public uint bug41 = 0;
        public uint bug42 = 0;
        public uint bug43 = 0;
        public uint bug44 = 0;
        public DateTime bugtimer = DateTime.MinValue;
        private bool clientReceiving = false;
        private bool serverReceiving = false;
        private byte[] clientBuffer = new byte[(int)ushort.MaxValue];
        private byte[] serverBuffer = new byte[(int)ushort.MaxValue];
        private List<byte> fullClientBuffer = new List<byte>();
        private List<byte> fullServerBuffer = new List<byte>();
        private byte clientOrdinal = 0;
        private byte serverOrdinal = 0;
        private System.Collections.Generic.Queue<ServerPacket> clientSendQueue = new System.Collections.Generic.Queue<ServerPacket>();
        private System.Collections.Generic.Queue<ClientPacket> serverSendQueue = new System.Collections.Generic.Queue<ClientPacket>();
        private System.Collections.Generic.Queue<ClientPacket> clientProcessQueue = new System.Collections.Generic.Queue<ClientPacket>();
        private System.Collections.Generic.Queue<ServerPacket> serverProcessQueue = new System.Collections.Generic.Queue<ServerPacket>();
        public System.Timers.Timer SpeakAiteTimer;
        public System.Timers.Timer SpeakFasTimer;
        public System.Timers.Timer SpeakFlowerTimer;
        public System.Timers.Timer SpeakRedTimer;
        public int dioncount;
        public int ctcount;
        public int cradhcount;
        public int fascount;
        public uint playeridformonster;
        public uint trackedmonsterID;
        private bool c;
        public string thename;
        public System.Timers.Timer AegisTimer;
        public List<TargetMonster> targetmonster;
        public List<targetPlayer> targetplayer;
        public List<string> YourAites;
        public List<string> YourFases;
        public List<string> YourIocs;
        public List<string> YourGIocs;
        public List<string> YourCradhs;
        public List<string> YourPramhs;
        public List<string> YourAttacks1;
        public List<string> YourAttacks2;
        public System.Timers.Timer ComboScrollTimer;
        public List<int> CantSpellMaps;
        public List<int> CantSkillMaps;
        public uint lastclickentityID;

        public Dictionary<string, DateTime> PreventSpam { get; set; }

        public Thread GetMailThread { get; set; }

        public Thread EntityNameThread { get; set; }

        public Dictionary<string, Arena> ArenaCounter { get; set; }

        public Dictionary<string, string> Combos { get; set; }

        public Dictionary<string, Skill> FakeSkills { get; set; }

        public Dictionary<string, Spell> FakeSpells { get; set; }

        public Dictionary<int, MappedMaps> AutoWalkMaps { get; set; }

        public Dictionary<uint, Character> FakeNpcs { get; set; }

        public Dictionary<string, DateTime> GemPolish { get; set; }

        public bool rsready
        {
            get
            {
                return this.HasSkill("Rear Strike", true) && this.CanSkill("Rear Strike", true) && (!this.IgnoreHP(this.MainTarget.Image) ? (this.MainTarget.HpAmount > 20.0 ? 1 : 0) : 1) != 0;
            }
        }

        public bool asready
        {
            get
            {
                return this.HasSkill("Assassin Strike", false) && this.CanSkill("Assassin Strike", false) && this.MainTarget.IsInFront(this.ServerLocation) && (!this.IgnoreHP(this.MainTarget.Image) ? (this.MainTarget.HpAmount > 20.0 ? 1 : 0) : 1) != 0;
            }
        }

        public Thread RelogThread { get; set; }

        public Thread SpeakCommandThread { get; set; }

        public uint LastClickID { get; set; }

        public uint LastnpcpopupID { get; set; }

        public bool hasdf
        {
            get
            {
                return this.Characters.ContainsKey(this.PlayerID) && this.Characters[this.PlayerID] != null && (Server.StaticCharacters.ContainsKey(this.PlayerID) && Server.StaticCharacters[this.PlayerID] != null) && Server.StaticCharacters[this.PlayerID].SpellAnimationHistory.ContainsKey(271) && DateTime.UtcNow.Subtract(Server.StaticCharacters[this.PlayerID].SpellAnimationHistory[271]).TotalSeconds < 19.0;
            }
        }

        public bool hasasgall
        {
            get
            {
                return this.Characters.ContainsKey(this.PlayerID) && this.Characters[this.PlayerID] != null && (Server.StaticCharacters.ContainsKey(this.PlayerID) && Server.StaticCharacters[this.PlayerID] != null) && Server.StaticCharacters[this.PlayerID].SpellAnimationHistory.ContainsKey(66) && DateTime.UtcNow.Subtract(Server.StaticCharacters[this.PlayerID].SpellAnimationHistory[66]).TotalSeconds < 12.0;
            }
        }

        public bool hashide
        {
            get
            {
                return !(this.hidetime == DateTime.MinValue) && DateTime.UtcNow.Subtract(this.hidetime).TotalSeconds < 45.0;
            }
        }

        public bool canpf
        {
            get
            {
                if (this.HasSkill("Animal Roar", false) && !this.CanSkill("Animal Roar", false) || this.HasSkill("Ground Stomp", false) && !this.CanSkill("Ground Stomp", false) || this.HasSkill("Paralyze Force", false) && !this.CanSkill("Paralyze Force", false))
                    return false;
                return this.pftime == DateTime.MinValue || DateTime.UtcNow.Subtract(this.pftime).TotalSeconds > 26.0;
            }
        }

        public bool amIActive()
        {
            return this.mainProc != null && User32.GetForegroundWindow() == this.mainProc.MainWindowHandle;
        }

        public int DistanceFrom(Location loc)
        {
            return Math.Abs(this.ServerLocation.X - loc.X) + Math.Abs(this.ServerLocation.Y - loc.Y);
        }

        private int RandomNumber(int min, int max)
        {
            return this.random.Next(min, max);
        }

        public Thread WalkThread { get; set; }

        public Thread QuestsThread { get; set; }

        public Thread GetF1IDThread { get; set; }

        public int Currentpopuptype { get; set; }

        public uint CurrentnpcpopupID { get; set; }

        public ushort Currentnpcscript { get; set; }

        public string Overcoat { get; set; }

        public Dictionary<Location, string> WayRegions { get; set; }

        public Dictionary<int, MapNum> TempRegions { get; set; }

        public byte WalkCounter { get; set; }

        public Dictionary<int, int> CountedMonsters { get; set; }

        public Dictionary<string, GroupCounts> GroupCounter { get; set; }

        public bool DARegged { get; set; }

        public string Name { get; set; }

        public string Password { get; set; }

        public uint PlayerID { get; set; }

        public byte Path { get; set; }

        public byte Gender { get; set; }

        public Process mainProc { get; set; }

        public byte windowSize { get; set; }

        public Map MapInfo { get; set; }

        public Item[] Inventory { get; set; }

        public Skill[] SkillBook { get; set; }

        public Spell[] SpellBook { get; set; }

        public List<ushort> SpellBar { get; set; }

        public Statistics Statistics { get; set; }

        public ProcessMemoryStream stream { get; set; }

        public Dictionary<string, Town> Towns { get; set; }

        public Dictionary<uint, Character> Characters { get; set; }

        public Location ServerLocation { get; set; }

        public Location ClientLocation { get; set; }

        public string ClientName { get; set; }

        public string ClientGroup { get; set; }

        public ushort ClientHead { get; set; }

        public ushort ClientForm { get; set; }

        public byte ClientBody { get; set; }

        public ushort ClientArms { get; set; }

        public byte ClientBoots { get; set; }

        public ushort ClientArmor { get; set; }

        public byte ClientShield { get; set; }

        public ushort ClientWeapon { get; set; }

        public byte ClientHeadColor { get; set; }

        public byte ClientBootColor { get; set; }

        public byte ClientAcc1Color { get; set; }

        public ushort ClientAcc1 { get; set; }

        public byte ClientAcc2Color { get; set; }

        public ushort ClientAcc2 { get; set; }

        public byte ClientUnknown { get; set; }

        public ushort ClientAcc3 { get; set; }

        public byte ClientUnknown2 { get; set; }

        public byte ClientRestCloak { get; set; }

        public ushort ClientOvercoat { get; set; }

        public byte ClientOvercoatColor { get; set; }

        public byte ClientSkinColor { get; set; }

        public byte ClientHideBool { get; set; }

        public byte ClientFaceShape { get; set; }

        public byte ClientNameTagStyle { get; set; }

        public bool Connected { get; private set; }

        public Server Server { get; private set; }

        public ClientTab Tab { get; private set; }

        public Thread BotThread { get; private set; }

        public Thread ClientLoopThread { get; private set; }

        public byte Seed { get; set; }

        public byte[] Key { get; set; }

        public byte[] KeyTable { get; set; }

        public Socket ClientSocket { get; private set; }

        public Socket ServerSocket { get; private set; }

        public Client(Server server, Socket socket, EndPoint endPoint)
        {
            this.PreventSpam = new Dictionary<string, DateTime>();
            this.ArenaCounter = new Dictionary<string, Arena>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.Combos = new Dictionary<string, string>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.FakeSkills = new Dictionary<string, Skill>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.FakeSpells = new Dictionary<string, Spell>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.FakeNpcs = new Dictionary<uint, Character>();
            this.LoadFakeNpcs();
            this.GemPolish = new Dictionary<string, DateTime>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.SpeakAiteTimer = new System.Timers.Timer((double)(10000 + this.RandomNumber(0, 10000)));
            this.SpeakAiteTimer.Elapsed += new ElapsedEventHandler(this.SpeakAiteBoolean);
            this.SpeakAiteTimer.Enabled = true;
            this.SpeakAiteTimer.Stop();
            this.SpeakFasTimer = new System.Timers.Timer((double)(10000 + this.RandomNumber(0, 10000)));
            this.SpeakFasTimer.Elapsed += new ElapsedEventHandler(this.SpeakFasBoolean);
            this.SpeakFasTimer.Enabled = true;
            this.SpeakFasTimer.Stop();
            this.SpeakFlowerTimer = new System.Timers.Timer((double)(10000 + this.RandomNumber(0, 10000)));
            this.SpeakFlowerTimer.Elapsed += new ElapsedEventHandler(this.SpeakFlowerBoolean);
            this.SpeakFlowerTimer.Enabled = true;
            this.SpeakFlowerTimer.Stop();
            this.SpeakRedTimer = new System.Timers.Timer((double)(3000 + this.RandomNumber(0, 2000)));
            this.SpeakRedTimer.Elapsed += new ElapsedEventHandler(this.SpeakRedBoolean);
            this.SpeakRedTimer.Enabled = true;
            this.SpeakRedTimer.Stop();
            this.ComboScrollTimer = new System.Timers.Timer(120000.0);
            this.ComboScrollTimer.Elapsed += new ElapsedEventHandler(this.ComboScrollMessage);
            this.ComboScrollTimer.Enabled = true;
            this.ComboScrollTimer.Stop();
            this.AegisTimer = new System.Timers.Timer(10000.0);
            this.AegisTimer.Elapsed += new ElapsedEventHandler(this.UseAegisOkay);
            this.AegisTimer.Enabled = true;
            this.AegisTimer.Stop();
            this.CantSpellMaps = new List<int>();
            this.CantSpellMaps.Add(167);
            this.CantSpellMaps.Add(422);
            this.CantSpellMaps.Add(498);
            this.CantSpellMaps.Add(136);
            this.CantSpellMaps.Add(135);
            this.CantSpellMaps.Add(130);
            this.CantSpellMaps.Add(500);
            this.CantSpellMaps.Add(3006);
            this.CantSpellMaps.Add(3008);
            this.CantSpellMaps.Add(3012);
            this.CantSpellMaps.Add(3272);
            this.CantSpellMaps.Add(3271);
            this.CantSpellMaps.Add(3926);
            this.CantSpellMaps.Add(3938);
            this.CantSpellMaps.Add(3935);
            this.CantSpellMaps.Add(3940);
            this.CantSpellMaps.Add(8300);
            this.CantSpellMaps.Add(10265);
            this.CantSpellMaps.Add(7300);
            this.CantSpellMaps.Add(8995);
            this.CantSpellMaps.Add(3950);
            this.CantSpellMaps.Add(3052);
            this.CantSpellMaps.Add(3952);
            this.CantSpellMaps.Add(3079);
            this.CantSpellMaps.Add(5231);
            this.CantSpellMaps.Add(5232);
            this.CantSpellMaps.Add(8999);
            this.CantSpellMaps.Add(8998);
            this.CantSpellMaps.Add(8997);
            this.CantSpellMaps.Add(8996);
            this.CantSpellMaps.Add(7900);
            this.CantSkillMaps = new List<int>();
            this.CantSkillMaps.Add(10265);
            this.CantSkillMaps.Add(7900);
            this.CountedMonsters = new Dictionary<int, int>();
            this.CountedMonsters.Add(529, 0);
            this.CountedMonsters.Add(892, 0);
            this.CountedMonsters.Add(856, 0);
            this.CountedMonsters.Add(661, 0);
            this.CountedMonsters.Add(703, 0);
            this.CountedMonsters.Add(704, 0);
            this.CountedMonsters.Add(705, 0);
            this.CountedMonsters.Add(706, 0);
            this.CountedMonsters.Add(715, 0);
            this.CountedMonsters.Add(716, 0);
            this.CountedMonsters.Add(8, 0);
            this.CountedMonsters.Add(9, 0);
            this.CountedMonsters.Add(10, 0);
            this.CountedMonsters.Add(680, 0);
            this.CountedMonsters.Add(681, 0);
            this.CountedMonsters.Add(682, 0);
            this.CountedMonsters.Add(683, 0);
            this.CountedMonsters.Add(684, 0);
            this.CountedMonsters.Add(685, 0);
            this.CountedMonsters.Add(334, 0);
            this.CountedMonsters.Add(335, 0);
            this.CountedMonsters.Add(490, 0);
            this.CountedMonsters.Add(86, 0);
            this.CountedMonsters.Add(410, 0);
            this.CountedMonsters.Add(625, 0);
            this.CountedMonsters.Add(512, 0);
            this.CountedMonsters.Add(395, 0);
            this.CountedMonsters.Add(396, 0);
            this.CountedMonsters.Add(549, 0);
            this.CountedMonsters.Add(160, 0);
            this.GroupCounter = new Dictionary<string, GroupCounts>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.WayRegions = new Dictionary<Location, string>();
            this.TempRegions = new Dictionary<int, MapNum>();
            this.AutoWalkMaps = new Dictionary<int, MappedMaps>();
            this.LoadMaps();
            this.MapInfo = new Map();
            this.Inventory = new Item[59];
            this.SkillBook = new Skill[90];
            this.SpellBook = new Spell[90];
            this.SpellBar = new List<ushort>();
            this.Statistics = new Statistics();
            this.ClientLocation = new Location(0, 0);
            this.ServerLocation = new Location(0, 0);
            this.Towns = new Dictionary<string, Town>((IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase);
            this.Characters = new Dictionary<uint, Character>();
            this.targetmonster = new List<TargetMonster>();
            this.targetplayer = new List<targetPlayer>();
            this.YourAites = new List<string>();
            this.YourFases = new List<string>();
            this.YourIocs = new List<string>();
            this.YourGIocs = new List<string>();
            this.YourCradhs = new List<string>();
            this.YourPramhs = new List<string>();
            this.YourAttacks1 = new List<string>();
            this.YourAttacks2 = new List<string>();
            this.Server = server;
            this.ClientSocket = socket;
            this.ServerSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            this.ServerSocket.Connect(endPoint);
            this.Tab = new ClientTab(this);
            this.Key = Encoding.ASCII.GetBytes("UrkcnItnI");
            this.KeyTable = new byte[1024];
            this.RelogThread = new Thread(new ThreadStart(this.LogAfterDC));
            this.RelogThread.Abort();
            this.EntityNameThread = new Thread(new ThreadStart(this.EntityNameLoop));
            this.BotThread = new Thread(new ThreadStart(this.BotLoop));
            this.BotThread.Name = nameof(BotThread);
            this.WalkThread = new Thread(new ThreadStart(this.Walking));
            this.QuestsThread = new Thread(new ThreadStart(this.Quests));
            this.SpeakCommandThread = new Thread(new ThreadStart(this.SpeakThread));
            this.ClientLoopThread = new Thread(new ThreadStart(this.ClientLoop));
            this.ClientLoopThread.Start();
        }

        public void walkcommand(string locala, string localb = "", bool allclients = true)
        {
            if (allclients)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                {
                    if (client != null && !client.Tab.ignorewalkall.Checked)
                    {
                        if ((!this.SpeakMessage.StartsWith("andor ", StringComparison.CurrentCultureIgnoreCase) && !this.SpeakMessage.StartsWith("queen", StringComparison.CurrentCultureIgnoreCase) || client.MapInfo.Name.StartsWith("Andor")) && (!this.SpeakMessage.StartsWith("chaos ", StringComparison.CurrentCultureIgnoreCase) || client.MapInfo.Name.Contains("Chaos")) && (this.SpeakMessage.StartsWith("chaos", StringComparison.CurrentCultureIgnoreCase) || !client.MapInfo.Name.Contains("Chaos")))
                        {
                            bool flag = true;
                            client.Tab.autowalker_locales.SelectedItem = (object)locala;
                            if (localb != "")
                                client.Tab.walklocaleslist.SelectedItem = (object)localb;
                            if (flag)
                            {
                                client.Tab.autowalker_button.Text = "Stop";
                                client.autowalkon = true;
                                if (!client.BotThread.IsAlive)
                                    client.BotThread.Start();
                                client.pause = false;
                                client.Tab.btnPlay.Enabled = false;
                                client.Tab.btnStop.Enabled = true;
                            }
                        }
                    }
                }
            }
            else
            {
                this.Tab.autowalker_locales.SelectedItem = (object)locala;
                if (localb != "")
                    this.Tab.walklocaleslist.SelectedItem = (object)localb;
            }
        }

        public void SpeakThread()
        {
            while (true)
            {
                if (this.SpeakMessage != string.Empty)
                {
                    if (this.SpeakMessage.Equals("/debug"))
                        this._debug = !this._debug;
                    if (this.SpeakMessage.Equals("/start test", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.testdmg = true;
                        this.SendMessage("Dmg counter started.", (byte)0, false);
                    }
                    if (this.SpeakMessage.Equals("/reset test", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.lowestdmg = 0U;
                        this.highestdmg = 0U;
                        this.SendMessage("Dmg counter reset.", (byte)0, false);
                    }
                    if (this.SpeakMessage.Equals("/stop test", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.testdmg = false;
                        this.SendMessage("Low: " + (object)this.lowestdmg + ", High: " + (object)this.highestdmg, (byte)0, false);
                        this.lowestdmg = 0U;
                        this.highestdmg = 0U;
                    }
                    if (this.SpeakMessage.Equals("/getac", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.CanSkill("Martial Awareness", false) && this.CanSkill("Combat Senses", false) && !this.getEntityAC)
                        {
                            Npc npc = this.MonsterInFront();
                            if (npc != null)
                            {
                                this.getEntityACsID = npc.ID;
                                this.getEntityAC = true;
                                this.UseSkill("Martial Awareness", 0U);
                            }
                        }
                        else
                            this.SendMessage("Not ready yet.", (byte)0, false);
                    }
                    if (this.SpeakMessage.Equals("/ascendhp", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("/ascend hp", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.Tab.AscendOptions.instantascend.Checked = true;
                        this.Tab.AscendOptions.ascendhp.Checked = true;
                        this.Tab.AscendOptions.ascendbutton.Text = "Stop";
                    }
                    if (this.SpeakMessage.Equals("/ascendmp", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("/ascend mp", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.Tab.AscendOptions.instantascend.Checked = true;
                        this.Tab.AscendOptions.ascendmp.Checked = true;
                        this.Tab.AscendOptions.ascendbutton.Text = "Stop";
                    }
                    if (this.SpeakMessage.Equals("/warrior", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.warrior = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"ToC Warrior";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/monk", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.monk = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"ToC Monk";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/rogue", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.rogue = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"ToC Rogue";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/priest", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.priest = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"ToC Priest";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/wizard", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.wizard = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"ToC Wizard";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/hat", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.claimsunprotection = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Francis (summer)";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/attire", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.claimbeachattire = true;
                        if (this.HasSkill("swimming", false))
                        {
                            this.Tab.autowalker_locales.SelectedItem = (object)"Lynith";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Paradise";
                        }
                        else
                        {
                            this.learnswim = true;
                            this.SendMessage("Learning to swim at mileth inn first", (byte)0, false);
                            this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                        }
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/wish", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.makeawish = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Church";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/frosty", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.frostygift = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Frosty (x-mas)";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.mediumwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/yule", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.yulequest = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Suomi";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Weapon Shop";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.mediumwalk.Checked = true;
                        this.LastnpcpopupID = 0U;
                    }
                    else if (this.SpeakMessage.StartsWith("/slab", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.slabquest = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Hwarone";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.Tab.fastwalk.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/darkmaze", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (!this.HasItem("beothaich deum") && !this.HasItem("Red Potion"))
                        {
                            this.SendMessage("Get some beothaich", (byte)0, false);
                        }
                        else
                        {
                            this.darkmaze = true;
                            this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon (aite)";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                            if (!this.BotThread.IsAlive)
                                this.BotThread.Start();
                            this.pause = false;
                            this.Tab.btnPlay.Enabled = false;
                            this.Tab.btnStop.Enabled = true;
                        }
                    }
                    else if (this.SpeakMessage.Equals("/dojo", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.Tab.dojo.Checked)
                            this.Tab.dojo.Checked = false;
                        this.Tab.dojo.Checked = true;
                    }
                    else if (this.SpeakMessage.Equals("/thel", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.GroupMembers.Count<string>() == 1)
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client.Name.ToLower() == this.GroupMembers[0].ToLower())
                                {
                                    client.letterquest = 1;
                                    client.theletter = true;
                                    if (this.MapInfo.Number != 168 && this.MapInfo.Number != 393 && (this.MapInfo.Number != 134 && this.MapInfo.Number != 136) && (this.MapInfo.Number != 115 && this.MapInfo.Number != 118 && (this.MapInfo.Number != 122 && this.MapInfo.Number != 303)) && this.MapInfo.Number != 3041)
                                    {
                                        client.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                        client.Tab.walklocaleslist.SelectedItem = (object)"Restaurant";
                                        client.Tab.autowalker_button.Text = "Stop";
                                        client.autowalkon = true;
                                    }
                                    if (!client.BotThread.IsAlive)
                                        client.BotThread.Start();
                                    client.pause = false;
                                    client.Tab.btnPlay.Enabled = false;
                                    client.Tab.btnStop.Enabled = true;
                                }
                            }
                        }
                        this.letterquest = 1;
                        this.theletter = true;
                        if (this.MapInfo.Number != 168 && this.MapInfo.Number != 393 && (this.MapInfo.Number != 134 && this.MapInfo.Number != 136) && (this.MapInfo.Number != 115 && this.MapInfo.Number != 118 && (this.MapInfo.Number != 122 && this.MapInfo.Number != 303)) && this.MapInfo.Number != 3041)
                        {
                            this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Restaurant";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                        }
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                    }
                    else if (this.SpeakMessage.Equals("/molo", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.Tab.fastwalk.Checked = true;
                        this.molo = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Nearest Restaurant";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/meg", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.megprize = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mt Merry";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Mother Erbie";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/tali", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.buy2ndtalisman = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/pearl", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.giantpearl = true;
                        this.Tab.looton.Checked = true;
                        this.Tab.autowalker_locales.SelectedItem = (object)"Lynith";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Giant Pearl";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/tent", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Tavern";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                    }
                    else if (this.SpeakMessage.StartsWith("/law", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.Tab.LoadTemplate("default", false);
                        this.lawquest = true;
                        this.Tab.fastwalk.Checked = true;
                        this.Tab.autowalker_locales.Text = "Lost Ruins";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Nairn";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.LastnpcpopupID = 0U;
                    }
                    else if (this.SpeakMessage.StartsWith("/teach", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.RequestGroupList();
                        this.SendMessage("wait a sec...", (byte)0, false);
                        Thread.Sleep(1000);
                        this.Speak("sabonim, please teach me the " + this.currentdugon + " dugon", 0);
                    }
                    else if (this.SpeakMessage.StartsWith("/done", StringComparison.CurrentCultureIgnoreCase))
                        this.Speak("sabonim, i understand the " + this.currentdugon + " dugon", 0);
                    else if (this.SpeakMessage.StartsWith("/walk "))
                    {
                        if (this.SpeakMessage.StartsWith("/walk all "))
                        {
                            this.SpeakMessage = this.SpeakMessage.Substring(10);
                            bool flag = false;
                            if (this.SpeakMessage.Equals("toc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Temple of Choosing", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mileth bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mileth inn", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Inn", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("altar", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Altar", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Crypt", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt4", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crypt 4", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("bat", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Crypt 4", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt27", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crypt 27", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("suc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Crypt 27", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tailor", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Tailor", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("waste", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "Wasteland", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ew 15", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ew15", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "EW 15 Glade", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ew 20", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ew20", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mileth", "EW 20 Glade", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Abel", "Entrance", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("abel tav", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Abel", "Tavern", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Abel", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel crypt", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("abel dun", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Abel", "Dungeon", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel 5", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("abel5", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Abel", "Dungeon 5 Cave", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel 10", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("abel10", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Abel", "Dungeon 10 Cave", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("piet bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Piet", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("piet crypt", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crab", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("piet dun", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Piet", "Dungeon", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("undine bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Undine", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ruc bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Rucesion", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("bm", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Rucesion", "Black Market", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tagor bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Tagor", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("ein", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("manor", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Eingren Manor", "", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("pravat", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("pc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Pravat", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("cross", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Pravat", "Cross", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("oct", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Astrid", "Octagram", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("suomi inn", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("suomi bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Suomi", "Inn", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("aite", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Loures", "Dungeon (aite)", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("darkmaze", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("dark maze", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Loures", "Dark Maze", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("maze", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Loures", "Maze", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("throne", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Loures", "Throne Room", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("blob", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Loures", "Canal Key 2 (blob)", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("skrull", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Loures", "Canal Key 1 (skrull)", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("karl", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Karlopos", "", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("para", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Lynith", "Paradise", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("hg", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "HG ent", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("vort", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "Vortigern", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("ori", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "Oriana", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("jov", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "Jovino", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("glen", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("hg bank", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("hgbank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "Bank", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("hg end", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "HG end", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("aj6", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj 6", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "AJ 6", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("den", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj7", StringComparison.CurrentCultureIgnoreCase) || (this.SpeakMessage.Equals("aj8", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj 7", StringComparison.CurrentCultureIgnoreCase)) || this.SpeakMessage.Equals("aj 8", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "AJ 7 End (dendrons)", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("cc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "CC ent", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("cc7", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cc 7", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "CC 7", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("ccend", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cc end", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "CC end", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT ent", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt3", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 3", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT 3", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt5", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 5", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT 5", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt6", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 6", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT 6", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt11", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 11", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT 11", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt12", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 12", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT 12", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt15", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 15", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT 15", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("vines", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "Yellow Vines", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt boss", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ytboss", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "YT Boss", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("aj ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj0", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj 0", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Aman Jungle", "AJ 0 End", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("andor", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor ent", StringComparison.CurrentCultureIgnoreCase) || (this.SpeakMessage.Equals("andor lobby", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor1", StringComparison.CurrentCultureIgnoreCase)) || this.SpeakMessage.Equals("andor 1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Andor", "Andor Lobby", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("andor80", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor 80", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Andor", "Andor 80", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("andor140", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor 140", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("queen", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Andor", "Andor 140", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 1", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Chaos", "Chaos ent", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos3", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 3", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Chaos", "Chaos 3 exit", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos12", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 12", StringComparison.CurrentCultureIgnoreCase) || (this.SpeakMessage.Equals("chaos 13", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos13", StringComparison.CurrentCultureIgnoreCase)) || this.SpeakMessage.Equals("chaos 12 exit", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Chaos", "Chaos 12 exit", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos25", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 25", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos27", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 27", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Chaos", "Chaos 25 side", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos34", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 34", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Chaos", "Chaos 34", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos34end", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 34 end", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Chaos", "Chaos 34 End", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("meh", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mehadi", "Entrance", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("flower", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mehadi", "Flower", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("count", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Count", "", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("cr", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cr 1", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cr1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Cthonic Remains", "CR 1", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("cr31", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cr 31", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Cthonic Remains", "CR 31", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mtg", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mount Giragan", "Mtg 1", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tauren", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mount Giragan", "Tauren", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mtg 10", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mtg10", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mount Giragan", "Mtg 10", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mtg 13", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mtg13", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mount Giragan", "Mtg 13", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("horn", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mount Giragan", "tauren horn", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("nose", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mount Giragan", "tauren nose ring", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("sw17", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 17", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Shinewood", "SW 17 (hut)", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("sw", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw22", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 22", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw ent", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Shinewood", "SW 22", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("sw30", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 30", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Shinewood", "SW 30 (hut)", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("phoe", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw35", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 35", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Shinewood", "Phoenix Altar", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("fount", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("oren fount", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nobis", "Oren Fountain", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("jung", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("oren jun", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("orenjun", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nobis", "Jungle ent", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("tower", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nobis", "Tower Maze", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("sham", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nobis", "Shamensyth ent", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("nob", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nobis", "Nobis ent", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("medu", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nobis", "Medusa", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("asilon bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Asilon", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("noam17", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("noam 17", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Noam", "Noam 17", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("noam bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Noam", "Bank", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ch", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ch ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cursed home", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ch1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Hwarone", "Cursed Home", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("lr", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("lr ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("lost ruins", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Lost Ruins", "", true);
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("slab", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Lost Ruins", "Marble Vault", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("veltain", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mines", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("vm", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("veltain mines", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Veltain Mines", "", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("wd", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("water dungeon", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Water Dungeon", "", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("erbie", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mtmerry", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mt merry", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Mt Merry", "Entrance", true);
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.walkcommand("Nearest Bank", "", true);
                                flag = true;
                            }
                            if (!flag)
                                this.SendMessage("That location does not exist.", "pink", false);
                        }
                        else
                        {
                            this.SpeakMessage = this.SpeakMessage.Substring(6);
                            bool flag = false;
                            if (this.SpeakMessage.Equals("mileth bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mileth inn", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("mileth rest", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Restaurant";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("mileth tav", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Tavern";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("toc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Temple of Choosing";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("warrior", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"ToC Warrior";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("rogue", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"ToC Rogue";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("monk", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"ToC Monk";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("priest", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"ToC Priest";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("wizard", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"ToC Wizard";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("altar", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Altar";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Crypt";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt4", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crypt 4", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("bat", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Crypt 4";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt11", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crypt 11", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Crypt 11";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("crypt27", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crypt 27", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("suc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Crypt 27";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tailor", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Tailor";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("waste", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Wasteland";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ew 15", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ew15", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"EW 15 Glade";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ew 20", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ew20", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                this.Tab.walklocaleslist.SelectedItem = (object)"EW 20 Glade";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Entrance";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("abel tav", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Tavern";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel crypt", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("abel dun", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel 5", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("abel5", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon 5 Cave";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("abel 10", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("abel10", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon 10 Cave";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("piet bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Piet";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("piet crypt", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("crab", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("piet dun", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Piet";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("undine bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Undine";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ruc bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Rucesion";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("bm", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Rucesion";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tagor bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Tagor";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tagor inn", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Tagor";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("lost path", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Tagor";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Lost Path";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("ein", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("manor", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Eingren Manor";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("arena", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Arena";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("pravat", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("pc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Pravat";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("cross", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Pravat";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Cross";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("oct", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if (!this.MapInfo.Name.Contains("Suomi") && !this.MapInfo.Name.Contains("Astrid") && !this.MapInfo.Name.Contains("Undine") && this.HasItem("Suomi Song"))
                                    this.UseItem("Suomi Song");
                                this.Tab.autowalker_locales.SelectedItem = (object)"Astrid";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Octagram";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("suomi inn", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("suomi bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Suomi";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("aite", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon (aite)";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("darkmaze", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("dark maze", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dark Maze";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("maze", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Maze";
                                flag = true;
                                this.Tab.pigwalk.Checked = true;
                                this.Tab.mediumwalk.Checked = true;
                            }
                            if (this.SpeakMessage.Equals("throne", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("blob", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Canal Key 2 (blob)";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("skrull", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Canal Key 1 (skrull)";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("karl", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Karlopos";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("para", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Lynith";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Paradise";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("torb", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Suomi";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Weapon Shop";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("bm", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Rucesion";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Black Market";
                                flag = true;
                                this.Tab.mediumwalk.Checked = true;
                            }
                            if (this.SpeakMessage.Equals("hg", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"HG ent";
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("vort", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Vortigern";
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("ori", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Oriana";
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("jov", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Jovino";
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("glen", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("hg bank", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("hgbank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("aj6", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj 6", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 6";
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("den", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj7", StringComparison.CurrentCultureIgnoreCase) || (this.SpeakMessage.Equals("aj8", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj 7", StringComparison.CurrentCultureIgnoreCase)) || this.SpeakMessage.Equals("aj 8", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 7 End (dendrons)";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("hg end", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"HG end";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("cc", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"CC ent";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("cc7", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cc 7", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"CC 7";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("ccend", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cc end", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"CC end";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt3", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 3", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 3";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt5", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 5", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 5";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt6", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 6", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 6";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt11", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 11", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 11";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt12", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 12", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 12";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("yt15", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt 15", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 15";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("vines", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Yellow Vines";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("ytboss", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("yt boss", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT Boss";
                                flag = true;
                            }
                            else if (this.SpeakMessage.Equals("aj ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj0", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("aj 0", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 0 End";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("andor", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor ent", StringComparison.CurrentCultureIgnoreCase) || (this.SpeakMessage.Equals("andor lobby", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor1", StringComparison.CurrentCultureIgnoreCase)) || this.SpeakMessage.Equals("andor 1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Andor";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Andor Lobby";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("andor80", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor 80", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Andor";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Andor 80";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("andor140", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("andor 140", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("queen", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Andor";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Andor 140";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 1", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Chaos";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Chaos ent";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos3", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 3", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Chaos";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Chaos 3 exit";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos12", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 12", StringComparison.CurrentCultureIgnoreCase) || (this.SpeakMessage.Equals("chaos 13", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos13", StringComparison.CurrentCultureIgnoreCase)) || this.SpeakMessage.Equals("chaos 12 exit", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Chaos";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Chaos 12 exit";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos25", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 25", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos27", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 27", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Chaos";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Chaos 25 side";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos34", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 34", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Chaos";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Chaos 34";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("chaos34end", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("chaos 34 end", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Chaos";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Chaos 34 End";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("meh", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mehadi";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Entrance";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("flower", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mehadi";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Flower";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("count", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Count";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("cr", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cr 1", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cr1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Cthonic Remains";
                                this.Tab.walklocaleslist.SelectedItem = (object)"CR 1";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("cr31", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cr 31", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Cthonic Remains";
                                this.Tab.walklocaleslist.SelectedItem = (object)"CR 31";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mtg", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mount Giragan";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Mtg 1";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mtg 10", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mtg10", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mount Giragan";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Mtg 10";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("tauren", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mount Giragan";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Tauren";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("mtg 13", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mtg13", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mount Giragan";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Mtg 13";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("horn", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mount Giragan";
                                this.Tab.walklocaleslist.SelectedItem = (object)"tauren horn";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("nose", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mount Giragan";
                                this.Tab.walklocaleslist.SelectedItem = (object)"tauren nose ring";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("sw17", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 17", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Shinewood";
                                this.Tab.walklocaleslist.SelectedItem = (object)"SW 17 (hut)";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("sw", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw22", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 22", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw ent", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Shinewood";
                                this.Tab.walklocaleslist.SelectedItem = (object)"SW 22";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("sw30", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 30", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Shinewood";
                                this.Tab.walklocaleslist.SelectedItem = (object)"SW 30 (hut)";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("phoe", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw35", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("sw 35", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Shinewood";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Phoenix Altar";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("fount", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("oren fount", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Oren Fountain";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("jung", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("oren jun", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("orenjun", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Jungle ent";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("tower", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Tower Maze";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("sham", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Shamensyth ent";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("nob", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Nobis ent";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("t", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Mob 2-11";
                                flag = true;
                            }
                            if (this.SpeakMessage.StartsWith("medu", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nobis";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Medusa";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("asilon bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Asilon";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("noam bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Noam";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("noam17", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("noam 17", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Noam";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Noam 17";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("ch", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ch ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("cursed home", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("ch1", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Hwarone";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Cursed Home";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("lr", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("lr ent", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("lost ruins", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Lost Ruins";
                                flag = true;
                            }
                            else if (this.SpeakMessage.StartsWith("slab", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Lost Ruins";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Marble Vault";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("veltain", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mines", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("vm", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("veltain mines", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Veltain Mines";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("wd", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("water dungeon", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Water Dungeon";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("erbie", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mtmerry", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.Equals("mt merry", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Mt Merry";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Entrance";
                                flag = true;
                            }
                            if (this.SpeakMessage.Equals("bank", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.autowalker_locales.SelectedItem = (object)"Nearest Bank";
                                flag = true;
                            }
                            if (flag)
                            {
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.Tab.castwhilefollow.Checked = true;
                                if (this.Tab.iocself.Visible)
                                    this.Tab.iocself.Checked = true;
                                if (this.Tab.iocself.Visible && this.Tab.ioctype.Text == "nuadhaich")
                                    this.Tab.ioctype.Text = "ard ioc";
                                if (this.Tab.aocurse.Visible)
                                    this.Tab.aocurse.Checked = true;
                                if (this.Tab.dion_enemiesnext.Visible)
                                    this.Tab.dion_enemiesnext.Checked = true;
                                if (this.Tab.dion_enemiesnext.Visible)
                                    this.Tab.dion_enemiesnextcount.Value = new Decimal(1);
                                if (this.Tab.selfaopuinsein.Visible)
                                    this.Tab.selfaopuinsein.Checked = true;
                                if (this.Tab.selfaosuain.Visible)
                                    this.Tab.selfaosuain.Checked = true;
                                if (!this.BotThread.IsAlive)
                                    this.BotThread.Start();
                                this.pause = false;
                                this.Tab.btnPlay.Enabled = false;
                                this.Tab.btnStop.Enabled = true;
                            }
                            else
                                this.SendMessage("That location does not exist.", "pink", false);
                        }
                    }
                    else if (this.SpeakMessage.Equals("/attack count", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (Program.MainForm.attackcount)
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client.Tab.Monsters != null)
                                {
                                    foreach (TargetMonster targetMonster in client.targetmonster)
                                    {
                                        if (targetMonster != null && targetMonster.Text.Equals("814"))
                                        {
                                            if (targetMonster.attack1type.Text == "mor pian na dion")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack1type.Text == "Shock Arrow")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack1type.Text == "Frost Arrow")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack1type.Text == "Frost + 3 Shocks")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack2type.Text == "Cursed Tune")
                                                targetMonster.attack2.Checked = false;
                                        }
                                    }
                                }
                            }
                            Program.MainForm.attackcount = false;
                            this.SendMessage("No longer attacking Count.", "pink", false);
                        }
                        else
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client.Tab.Monsters != null)
                                {
                                    foreach (TargetMonster targetMonster in client.targetmonster)
                                    {
                                        if (targetMonster != null && targetMonster.Text.Equals("814"))
                                        {
                                            if (targetMonster.attack1type.Text == "mor pian na dion")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack1type.Text == "Frost Arrow")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack1type.Text == "Shock Arrow")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack1type.Text == "Frost + 3 Shocks")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack2type.Text == "Cursed Tune")
                                                targetMonster.attack2.Checked = true;
                                        }
                                    }
                                }
                            }
                            Program.MainForm.attackcount = true;
                            this.SendMessage("Now set to attack Count.", "pink", false);
                        }
                    }
                    else if (this.SpeakMessage.Equals("/attack countess", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (Program.MainForm.attackcountess)
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client.Tab.Monsters != null)
                                {
                                    foreach (TargetMonster targetMonster in client.targetmonster)
                                    {
                                        if (targetMonster != null && targetMonster.Text.Equals("815"))
                                        {
                                            if (targetMonster.attack1type.Text == "mor pian na dion")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack1type.Text == "Frost Arrow")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack1type.Text == "Shock Arrow")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack1type.Text == "Frost + 3 Shocks")
                                                targetMonster.attack1.Checked = false;
                                            if (targetMonster.attack2type.Text == "Cursed Tune")
                                                targetMonster.attack2.Checked = false;
                                        }
                                    }
                                }
                            }
                            Program.MainForm.attackcountess = false;
                            this.SendMessage("No longer attacking Countess.", "pink", false);
                        }
                        else
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client.Tab.Monsters != null)
                                {
                                    foreach (TargetMonster targetMonster in client.targetmonster)
                                    {
                                        if (targetMonster != null && targetMonster.Text.Equals("815"))
                                        {
                                            if (targetMonster.attack1type.Text == "mor pian na dion")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack1type.Text == "Shock Arrow")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack1type.Text == "Frost Arrow")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack1type.Text == "Frost + 3 Shocks")
                                                targetMonster.attack1.Checked = true;
                                            if (targetMonster.attack2type.Text == "Cursed Tune")
                                                targetMonster.attack2.Checked = true;
                                        }
                                    }
                                }
                            }
                            Program.MainForm.attackcountess = true;
                            this.SendMessage("Now set to attack Countess.", "pink", false);
                        }
                    }
                    else if (this.SpeakMessage.Equals("/ram", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (client.Tab.allMonsters != null)
                            {
                                --client.Tab.spellMonsters.SelectedIndex;
                                client.Tab.spellMonsters.TabPages.Remove((TabPage)client.Tab.allMonsters);
                                client.Tab.allMonsters = (TargetAllMonster)null;
                                client.Tab.newmonster.Enabled = true;
                                client.Tab.newallmonsters.Enabled = true;
                                client.Tab.newmonsterbyplayer.Enabled = true;
                                client.Tab.createnewmonster.Enabled = true;
                            }
                        }
                        this.SendMessage("Removed All Monsters Tabs from all clients", "grey", false);
                    }
                    else if (this.SpeakMessage.Equals("/s", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.pause = true;
                        this.Tab.btnPlay.Enabled = true;
                        this.Tab.btnStop.Enabled = false;
                        this.SendMessage(this.Name + " is Stopped.", "grey", false);
                    }
                    else if (this.SpeakMessage.Equals("/p", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (!this.BotThread.IsAlive)
                            this.BotThread.Start();
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.lastaction = DateTime.UtcNow;
                        this.laststep = DateTime.UtcNow;
                        this.SendMessage(this.Name + " is Playing.", "grey", false);
                    }
                    else if (this.SpeakMessage.Equals("/p all", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (!client.BotThread.IsAlive)
                                client.BotThread.Start();
                            client.pause = false;
                            client.Tab.btnPlay.Enabled = false;
                            client.Tab.btnStop.Enabled = true;
                            client.lastaction = DateTime.UtcNow;
                            client.laststep = DateTime.UtcNow;
                        }
                        this.SendMessage("All clients are Playing.", "grey", false);
                    }
                    else if (this.SpeakMessage.Equals("/s all", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            client.pause = true;
                            client.Tab.btnPlay.Enabled = true;
                            client.Tab.btnStop.Enabled = false;
                        }
                        this.SendMessage("All clients are Stopped.", "grey", false);
                    }
                    int result;
                    if (this.SpeakMessage.StartsWith("/save "))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(6);
                        this.Tab.SaveTemplate(this.SpeakMessage, false);
                    }
                    else if (this.SpeakMessage.StartsWith("/load ") && !this.SpeakMessage.StartsWith("/load all"))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(6);
                        this.Tab.LoadTemplate(this.SpeakMessage, false);
                    }
                    else if (this.SpeakMessage.StartsWith("/load all "))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(10);
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            client.Tab.LoadTemplate(this.SpeakMessage, false);
                    }
                    else if (this.SpeakMessage.StartsWith("/stop all"))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            client.Tab.followplayer.Checked = false;
                            client.Tab.autowalker_button.Text = "Start";
                            client.autowalkon = false;
                        }
                        this.SendMessage("All clients have stopped walking.", "grey", true);
                    }
                    else if (this.SpeakMessage.StartsWith("/stop"))
                    {
                        this.Tab.followplayer.Checked = false;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                        this.SendMessage("You have stopped walking.", "grey", false);
                    }
                    else if (this.SpeakMessage.Equals("/fast all"))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            client.Tab.fastwalk.Checked = true;
                        this.SendMessage("All clients are set to fast walk.", "grey", true);
                    }
                    else if (this.SpeakMessage.StartsWith("/fast"))
                        this.Tab.fastwalk.Checked = true;
                    else if (this.SpeakMessage.Equals("/med all"))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            client.Tab.mediumwalk.Checked = true;
                        this.SendMessage("All clients are set to medium walk speed.", "grey", true);
                    }
                    else if (this.SpeakMessage.StartsWith("/med"))
                        this.Tab.mediumwalk.Checked = true;
                    else if (this.SpeakMessage.Equals("/slow all"))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            client.Tab.mediumwalk.Checked = false;
                            client.Tab.fastwalk.Checked = false;
                        }
                        this.SendMessage("All clients are set to normal speed.", "grey", true);
                    }
                    else if (this.SpeakMessage.Equals("/slow"))
                    {
                        this.Tab.mediumwalk.Checked = false;
                        this.Tab.fastwalk.Checked = false;
                    }
                    else if (this.SpeakMessage.StartsWith("/follow all "))
                    {
                        string[] strArray = this.SpeakMessage.Split(' ');
                        if (strArray.Length != 4 || int.TryParse(strArray[3], out result))
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if ((!client.Name.Equals("sazae", StringComparison.CurrentCultureIgnoreCase) || !strArray[2].Equals("fechine", StringComparison.CurrentCultureIgnoreCase) || client.MapInfo.Number != 8995) && !client.Name.Equals(strArray[2], StringComparison.CurrentCultureIgnoreCase))
                                {
                                    client.Tab.followtarget.Text = strArray[2];
                                    client.Tab.followplayer.Checked = true;
                                    if (strArray.Length == 4)
                                        client.Tab.followdist.Value = Convert.ToDecimal(strArray[3]);
                                }
                            }
                            this.SendMessage("All clients were set to follow " + strArray[2], "grey", false);
                        }
                        else
                            break;
                    }
                    else if (this.SpeakMessage.StartsWith("/follow "))
                    {
                        string[] strArray = this.SpeakMessage.Split(' ');
                        if (strArray.Length != 3 || int.TryParse(strArray[2], out result))
                        {
                            if (!this.Name.Equals(strArray[1], StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.Tab.followtarget.Text = strArray[1];
                                this.Tab.followplayer.Checked = true;
                                if (strArray.Length == 3)
                                    this.Tab.followdist.Value = Convert.ToDecimal(strArray[2]);
                                this.SendMessage("You are set to follow " + strArray[1], "grey", false);
                            }
                            else
                                this.SendMessage("You can't follow yourself.", "pink", false);
                        }
                        else
                            goto label_724;
                    }
                    else if (this.SpeakMessage.StartsWith("/m", StringComparison.CurrentCultureIgnoreCase) && !this.SpeakMessage.Equals("/map") && !this.SpeakMessage.Equals("/molo"))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(2);
                        if (this.SpeakMessage != "" && int.TryParse(this.SpeakMessage, out result))
                        {
                            this.Tab.usemonsterid.Value = (Decimal)Convert.ToUInt32(result);
                            this.Tab.usemonster.Checked = true;
                        }
                        else if (this.SpeakMessage == "" || this.SpeakMessage == " ")
                            this.Tab.usemonster.Checked = !this.Tab.usemonster.Checked;
                        else if (!int.TryParse(this.SpeakMessage, out result))
                            this.SendMessage("Invalid monster form format.", "pink", false);
                    }
                    else if (this.SpeakMessage.StartsWith("/calc on", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.Tab.calc_toggle.Text == "Start")
                        {
                            this.Tab.StartCalc();
                            this.Tab.calc_toggle.Text = "Pause";
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/calc off", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.Tab.calc_toggle.Text == "Pause")
                            this.Tab.StopCalc();
                    }
                    else if (this.SpeakMessage.StartsWith("/calc reset", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.Tab.calc_toggle.Text == "Start")
                            this.Tab.StopCalc();
                    }
                    else if (this.SpeakMessage.StartsWith("/calc", StringComparison.CurrentCultureIgnoreCase))
                        this.Tab.Calculator_Message();
                    if (this.SpeakMessage.StartsWith("/drop ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.SpeakMessage.StartsWith("/drop all ", StringComparison.CurrentCultureIgnoreCase))
                        {
                            this.SpeakMessage = this.SpeakMessage.Substring(10);
                            if (this.SpeakMessage != string.Empty)
                            {
                                if (this.SpeakMessage.ToLower().Equals("chaos"))
                                {
                                    this.DropItems("White Jade Ring");
                                    this.DropItems("Drake Tongue");
                                    this.DropItems("Fire Beetlalic Head");
                                    this.DropItems("Warrior Beetlalic Head");
                                    this.DropItems("Cracked Aosdic Helm");
                                    this.DropItems("Losgann Tail");
                                    this.DropItems("Ruidhtear Toe");
                                    this.DropItems("Draco's Jaw");
                                    this.DropItems("Kabungkl Tail");
                                    this.DropItems("Chaos Orb");
                                    this.DropItems("Scale Bracer");
                                    this.DropItems("Black Stone Ring");
                                    this.DropItems("Hydraco Horn");
                                    this.DropItems("Golem Stones");
                                    this.DropItems("Porboss Claw");
                                }
                                else
                                    this.DropItems(this.SpeakMessage);
                            }
                        }
                        else
                        {
                            this.SpeakMessage = this.SpeakMessage.Substring(6);
                            if (!(this.SpeakMessage != string.Empty))
                                ;
                        }
                    }
                    int num1;
                    if (this.SpeakMessage.StartsWith("/withdraw", StringComparison.CurrentCultureIgnoreCase))
                    {
                        uint num2 = 0;
                        Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                        if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                        {
                            foreach (Npc npc in npcArray)
                            {
                                if (npc != null && npc.IsOnScreen)
                                {
                                    num2 = npc.ID;
                                    break;
                                }
                            }
                        }
                        if (num2 != 0U && this.SafeToWalkFast)
                        {
                            if (this.SpeakMessage.StartsWith("/withdraw spore", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.DialogueRespond(new uint?(num2), "Withdraw Red Spore [10]");
                                this.PopupClose(new uint?(num2), (byte)1);
                                Thread.Sleep(1100);
                                if (this.SafeToWalkFast)
                                {
                                    this.DialogueRespond(new uint?(num2), "Withdraw Grey Spore [10]");
                                    this.PopupClose(new uint?(num2), (byte)1);
                                }
                            }
                            else if (this.SpeakMessage.StartsWith("/withdraw frog", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.DialogueRespond(new uint?(num2), "Withdraw Red Frog Meat [5]");
                                this.PopupClose(new uint?(num2), (byte)1);
                                Thread.Sleep(1100);
                                if (this.SafeToWalkFast)
                                {
                                    this.DialogueRespond(new uint?(num2), "Withdraw Grey Frog Meat [5]");
                                    this.PopupClose(new uint?(num2), (byte)1);
                                }
                                Thread.Sleep(1100);
                                if (this.SafeToWalkFast)
                                {
                                    this.DialogueRespond(new uint?(num2), "Withdraw Blue Frog Meat [5]");
                                    this.PopupClose(new uint?(num2), (byte)1);
                                }
                            }
                            else if (this.SpeakMessage.StartsWith("/withdraw all", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.SpeakMessage = this.SpeakMessage.Substring(14);
                                if (this.SpeakMessage != string.Empty)
                                {
                                    if (Server.ItemList.ContainsKey(this.SpeakMessage))
                                    {
                                        uint? npccode = new uint?(num2);
                                        string[] strArray1 = new string[5]
                                        {
                      "Withdraw ",
                      this.SpeakMessage,
                      " [",
                      null,
                      null
                                        };
                                        string[] strArray2 = strArray1;
                                        num1 = Server.ItemList[this.SpeakMessage].MaxStack;
                                        string str = num1.ToString();
                                        strArray2[3] = str;
                                        strArray1[4] = "]";
                                        string type = string.Concat(strArray1);
                                        this.DialogueRespond(npccode, type);
                                        this.PopupClose(new uint?(num2), (byte)1);
                                    }
                                    else
                                    {
                                        int num3 = this.OpenSlotsCount();
                                        for (int index = 0; index < num3 && this.SafeToWalkFast; ++index)
                                        {
                                            this.DialogueRespond(new uint?(num2), "Withdraw " + this.SpeakMessage);
                                            this.PopupClose(new uint?(num2), (byte)1);
                                            Thread.Sleep(1100);
                                        }
                                        this.SendMessage("done withdrawing " + this.SpeakMessage, (byte)0, false);
                                    }
                                }
                            }
                            else if (this.SpeakMessage.Length >= 10)
                            {
                                this.SpeakMessage = this.SpeakMessage.Substring(10);
                                if (this.SpeakMessage != string.Empty)
                                {
                                    if (this.SpeakMessage.ToLower().StartsWith("suc"))
                                        this.SpeakMessage = "succubus's hair";
                                    else if (this.SpeakMessage.ToLower().StartsWith("war"))
                                        this.SpeakMessage = "warranty bag";
                                    else if (this.SpeakMessage.ToLower().StartsWith("rec"))
                                        this.SpeakMessage = "recall scroll";
                                    else if (this.SpeakMessage.ToLower().StartsWith("xmas d"))
                                        this.SpeakMessage = "xmas double exp-ap(x5)";
                                    else if (this.SpeakMessage.ToLower().StartsWith("double"))
                                        this.SpeakMessage = "double bonus exp-ap(x5)";
                                    else if (this.SpeakMessage.ToLower().StartsWith("gsf"))
                                        this.SpeakMessage = "golden starfish";
                                    this.DialogueRespond(new uint?(num2), "Withdraw " + this.SpeakMessage);
                                    this.PopupClose(new uint?(num2), (byte)1);
                                }
                            }
                            else
                            {
                                this.withdrawmode = 1;
                                this.DialogueRespond(new uint?(num2), "Withdraw");
                            }
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/deposit", StringComparison.CurrentCultureIgnoreCase))
                    {
                        uint num2 = 0;
                        Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                        if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                        {
                            foreach (Npc npc in npcArray)
                            {
                                if (npc != null && npc.IsOnScreen)
                                {
                                    num2 = npc.ID;
                                    break;
                                }
                            }
                        }
                        if (num2 != 0U && this.SafeToWalkFast)
                        {
                            if (this.SpeakMessage.StartsWith("/deposit all", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.SpeakMessage = this.SpeakMessage.Substring(13);
                                if (this.SpeakMessage != string.Empty)
                                {
                                    if (this.SpeakMessage.ToLower().StartsWith("suc"))
                                        this.SpeakMessage = "succubus's hair";
                                    else if (this.SpeakMessage.ToLower().StartsWith("war"))
                                        this.SpeakMessage = "warranty bag";
                                    else if (this.SpeakMessage.ToLower().StartsWith("xmas d"))
                                        this.SpeakMessage = "xmas double exp-ap(x5)";
                                    else if (this.SpeakMessage.ToLower().StartsWith("double"))
                                        this.SpeakMessage = "double bonus exp-ap(x5)";
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (this.SafeToWalkFast)
                                        {
                                            if (obj != null && obj.Name.Equals(this.SpeakMessage, StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                if (obj.Amount > 1U)
                                                {
                                                    uint? npccode = new uint?(num2);
                                                    object[] objArray1 = new object[5]
                                                    {
                            (object) "Deposit ",
                            null,
                            null,
                            null,
                            null
                                                    };
                                                    object[] objArray2 = objArray1;
                                                    num1 = obj.InventorySlot;
                                                    string str = num1.ToString();
                                                    objArray2[1] = (object)str;
                                                    objArray1[2] = (object)" [";
                                                    objArray1[3] = (object)obj.Amount;
                                                    objArray1[4] = (object)"]";
                                                    string type = string.Concat(objArray1);
                                                    this.DialogueRespond(npccode, type);
                                                    this.PopupClose(new uint?(num2), (byte)1);
                                                    Thread.Sleep(1100);
                                                }
                                                else
                                                {
                                                    uint? npccode = new uint?(num2);
                                                    num1 = obj.InventorySlot;
                                                    string type = "Deposit " + num1.ToString();
                                                    this.DialogueRespond(npccode, type);
                                                    this.PopupClose(new uint?(num2), (byte)1);
                                                    Thread.Sleep(1100);
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                }
                            }
                            else if (this.SpeakMessage.Length >= 9)
                            {
                                this.SpeakMessage = this.SpeakMessage.Substring(9);
                                if (this.SpeakMessage != string.Empty)
                                {
                                    if (this.SpeakMessage.ToLower().StartsWith("suc"))
                                        this.SpeakMessage = "succubus's hair";
                                    else if (this.SpeakMessage.ToLower().StartsWith("war"))
                                        this.SpeakMessage = "warranty bag";
                                    else if (this.SpeakMessage.ToLower().StartsWith("xmas d"))
                                        this.SpeakMessage = "xmas double exp-ap(x5)";
                                    else if (this.SpeakMessage.ToLower().StartsWith("double"))
                                        this.SpeakMessage = "double bonus exp-ap(x5)";
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (obj != null && obj.Name.Equals(this.SpeakMessage, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            uint? npccode = new uint?(num2);
                                            num1 = obj.InventorySlot;
                                            string type = "Deposit " + num1.ToString();
                                            this.DialogueRespond(npccode, type);
                                            this.PopupClose(new uint?(num2), (byte)1);
                                            break;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                uint? npccode = new uint?(num2);
                                foreach (Character character in this.Characters.Values.ToArray<Character>())
                                {
                                    if (character != null && character is Npc && (character as Npc).Type == Npc.NpcType.Mundane)
                                    {
                                        npccode = new uint?(character.ID);
                                        break;
                                    }
                                }
                                this.depositmode = 1;
                                this.DialogueRespond(npccode, "Deposit");
                            }
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/send", StringComparison.CurrentCultureIgnoreCase))
                    {
                        uint num2 = 0;
                        Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                        if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                        {
                            foreach (Npc npc in npcArray)
                            {
                                if (npc != null && npc.IsOnScreen)
                                {
                                    num2 = npc.ID;
                                    break;
                                }
                            }
                        }
                        if (num2 != 0U)
                        {
                            if (this.SpeakMessage.StartsWith("/send ", StringComparison.CurrentCultureIgnoreCase))
                            {
                                string[] strArray = this.SpeakMessage.Split(' ');
                                if (((IEnumerable<string>)strArray).Count<string>() >= 2)
                                {
                                    this.SpeakMessage = this.SpeakMessage.Substring(this.SpeakMessage.IndexOf(strArray[2]));
                                    if (this.SpeakMessage.ToLower().StartsWith("suc"))
                                        this.SpeakMessage = "succubus's hair";
                                    else if (this.SpeakMessage.ToLower().StartsWith("war"))
                                        this.SpeakMessage = "warranty bag";
                                    else if (this.SpeakMessage.ToLower().StartsWith("rec"))
                                        this.SpeakMessage = "recall scroll";
                                    else if (this.SpeakMessage.ToLower().StartsWith("xmas d"))
                                        this.SpeakMessage = "xmas double exp-ap(x5)";
                                    else if (this.SpeakMessage.ToLower().StartsWith("double"))
                                        this.SpeakMessage = "double bonus exp-ap(x5)";
                                    this.DialogueRespond(new uint?(num2), "Send Parcel " + strArray[1] + " " + this.SpeakMessage);
                                    this.PopupClose(new uint?(num2), (byte)1);
                                }
                            }
                            else if (this.SpeakMessage.Equals("/send", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.DialogueRespond(new uint?(num2), "Send Parcel");
                                this.sendmode = 1;
                            }
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/rec", StringComparison.CurrentCultureIgnoreCase))
                    {
                        uint num2 = 0;
                        Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                        if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                        {
                            foreach (Npc npc in npcArray)
                            {
                                if (npc != null && npc.IsOnScreen)
                                {
                                    num2 = npc.ID;
                                    break;
                                }
                            }
                        }
                        if (num2 != 0U)
                        {
                            if (this.SpeakMessage.StartsWith("/rec all", StringComparison.CurrentCultureIgnoreCase))
                            {
                                this.hasparcels = true;
                                this.DialogueRespond(new uint?(num2), "Receive Parcel");
                                this.PopupClose(new uint?(num2), (byte)1);
                                Thread.Sleep(1100);
                                if (this.hasparcels)
                                {
                                    do
                                    {
                                        this.DialogueRespond(new uint?(num2), "Receive Parcel");
                                        this.PopupClose(new uint?(num2), (byte)1);
                                        Thread.Sleep(1100);
                                    }
                                    while (this.hasparcels);
                                }
                            }
                            else
                            {
                                this.DialogueRespond(new uint?(num2), "Receive Parcel");
                                this.PopupClose(new uint?(num2), (byte)1);
                            }
                        }
                    }
                    else if (this.SpeakMessage.Equals("/repair"))
                    {
                        uint num2 = 0;
                        Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                        if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                        {
                            foreach (Npc npc in npcArray)
                            {
                                if (npc != null && npc.IsOnScreen)
                                {
                                    num2 = npc.ID;
                                    break;
                                }
                            }
                        }
                        if (num2 != 0U)
                        {
                            this.repairmode = true;
                            this.goldbefore = this.Statistics.Gold;
                            this.DialogueRespond(new uint?(num2), "Fix All");
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/r", StringComparison.CurrentCultureIgnoreCase))
                        this.SkillSpellCaption("repair all");
                    else if (this.SpeakMessage.StartsWith("/buy ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(3);
                        if (this.SpeakMessage.ToLower().StartsWith("hem"))
                            this.BuyItem("hemloch", 30U - this.ItemCount("hemloch"));
                        else if (this.SpeakMessage.ToLower().StartsWith("kom"))
                            this.BuyItem("komadium", 52U - this.ItemCount("komadium"));
                        else
                            this.BuyItem(this.SpeakMessage, 1U);
                    }
                    else if (this.SpeakMessage.StartsWith("/d ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(3);
                        if (this.SpeakMessage.ToLower().StartsWith("hem"))
                            this.Deposit("hemloch", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("kom"))
                            this.Deposit("komadium", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("suc"))
                            this.Deposit("succubus's hair", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("gsf"))
                            this.Deposit("golden starfish", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("war"))
                            this.Deposit("warranty bag", 1);
                        else
                            this.Deposit(this.SpeakMessage, 1);
                    }
                    else if (this.SpeakMessage.StartsWith("/da ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(4);
                        if (this.SpeakMessage.ToLower().StartsWith("hem"))
                            this.SpeakMessage = "hemloch";
                        else if (this.SpeakMessage.ToLower().StartsWith("kom"))
                            this.SpeakMessage = "komadium";
                        else if (this.SpeakMessage.ToLower().StartsWith("suc"))
                            this.SpeakMessage = "succubus's hair";
                        else if (this.SpeakMessage.ToLower().StartsWith("gsf"))
                            this.SpeakMessage = "golden starfish";
                        else if (this.SpeakMessage.ToLower().StartsWith("war"))
                            this.SpeakMessage = "warranty bag";
                        if (this.SpeakMessage.ToLower().StartsWith("armor"))
                        {
                            foreach (Item obj in this.Inventory)
                            {
                                if (obj != null && (obj.Name.Contains("Quilas") || obj.Name.Contains("Kano") || (obj.Name.Contains("Aiquil") || obj.Name.Contains("Arglon")) || (obj.Name.Contains("Sinash") || obj.Name.Contains("Soron") || (obj.Name.Contains("Talma") || obj.Name.Contains("Tarsil"))) || (obj.Name.Contains("Yaina") || obj.Name.Contains("Lyrical") || (obj.Name.Contains("Bell Skirt") || obj.Name.Contains("Fichu")) || (obj.Name.Contains("Jekin") || obj.Name.Contains("Casin") || (obj.Name.Contains("Frayloc") || obj.Name.Contains("Hwarone")))) || obj.Name.Contains("Yumi Bow") || obj.Name.Contains("Serpant Sphere")))
                                    this.Deposit(obj.Name, 1);
                            }
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("cea"))
                        {
                            foreach (Item obj in this.Inventory)
                            {
                                if (obj != null && !obj.Name.Contains(" Prayer Necklace") && (obj.Name.StartsWith("Ceannlaidir") || obj.Name.Equals("Cursed Belt") || obj.Name.Equals("Grim Boots") || obj.Name.Equals("Orc Helmet")))
                                    this.Deposit(obj.Name, 1);
                            }
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("lua"))
                        {
                            foreach (Item obj in this.Inventory)
                            {
                                if (obj != null && !obj.Name.Contains(" Prayer Necklace") && (obj.Name.StartsWith("Luathas") || obj.Name.Equals("Great Emerald Sword") || obj.Name.Equals("Peace Boots")))
                                    this.Deposit(obj.Name, 1);
                            }
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("gli"))
                        {
                            foreach (Item obj in this.Inventory)
                            {
                                if (obj != null && !obj.Name.Contains(" Prayer Necklace") && (obj.Name.StartsWith("Glioca") || obj.Name.Equals("Hy-brasyl Belt") || obj.Name.Equals("Great Emerald Sword")))
                                    this.Deposit(obj.Name, 1);
                            }
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("cai"))
                        {
                            foreach (Item obj in this.Inventory)
                            {
                                if (obj != null && !obj.Name.Contains(" Prayer Necklace") && (obj.Name.StartsWith("Cail") || obj.Name.Equals("Hy-brasyl Belt") || obj.Name.Equals("Dwarvish Helmet")))
                                    this.Deposit(obj.Name, 1);
                            }
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("fio") && !this.SpeakMessage.ToLower().StartsWith("fior"))
                        {
                            foreach (Item obj in this.Inventory)
                            {
                                if (obj != null && !obj.Name.Contains(" Prayer Necklace") && (obj.Name.StartsWith("Fiosachd") || obj.Name.Equals("Cursed Belt") || obj.Name.Equals("Silk Boots")))
                                    this.Deposit(obj.Name, 1);
                            }
                        }
                        else
                            this.Deposit(this.SpeakMessage, (int)this.ItemCount(this.SpeakMessage));
                    }
                    else if (this.SpeakMessage.StartsWith("/w ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(3);
                        if (this.SpeakMessage.ToLower().StartsWith("hem"))
                            this.Withdraw("hemloch", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("kom"))
                            this.Withdraw("komadium", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("suc"))
                            this.Withdraw("succubus's hair", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("gsf"))
                            this.Withdraw("golden starfish", 1);
                        else if (this.SpeakMessage.ToLower().StartsWith("war"))
                            this.Withdraw("warranty bag", 1);
                        else
                            this.Withdraw(this.SpeakMessage, 1);
                    }
                    else if (this.SpeakMessage.StartsWith("/wa ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(4);
                        if (this.SpeakMessage.ToLower().StartsWith("hem"))
                            this.Withdraw("hemloch", 30 - (int)this.ItemCount("hemloch"));
                        else if (this.SpeakMessage.ToLower().StartsWith("kom"))
                            this.Withdraw("komadium", 52 - (int)this.ItemCount("komadium"));
                        else if (this.SpeakMessage.ToLower().StartsWith("suc"))
                            this.Withdraw("succubus's hair", 30);
                        else if (this.SpeakMessage.ToLower().StartsWith("gsf"))
                            this.Withdraw("golden starfish", 30);
                        else if (this.SpeakMessage.ToLower().StartsWith("war"))
                            this.Withdraw("warranty bag", 30);
                        else if (this.SpeakMessage.ToLower().StartsWith("cea"))
                        {
                            this.Withdraw("ceannlaidir leather gauntlet", 1);
                            this.Withdraw("grim boots", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("ceannlaidir leather gauntlet", 1);
                            this.Withdraw("orc helmet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("ceannlaidir leather greaves", 1);
                            this.Withdraw("cursed belt", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("ceannlaidir wooden shield", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("ceannlaidir gold earrings", 1);
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("lua"))
                        {
                            this.Withdraw("luathas leather gauntlet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("luathas leather gauntlet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("luathas leather greaves", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("luathas wooden shield", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("luathas coral earrings", 1);
                            this.Withdraw("peace boots", 1);
                            this.Withdraw("great emerald sword", 1);
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("gli"))
                        {
                            this.Withdraw("glioca leather gauntlet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("glioca leather gauntlet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("glioca leather greaves", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("glioca wooden shield", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("glioca coral earrings", 1);
                            this.Withdraw("glioca boots", 1);
                            this.Withdraw("hy-brasyl belt", 1);
                            this.Withdraw("great emerald sword", 1);
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("cai"))
                        {
                            this.Withdraw("cail leather gauntlet", 1);
                            this.Withdraw("cail leather gauntlet", 1);
                            this.Withdraw("cail leather greaves", 1);
                            this.Withdraw("cail wooden shield", 1);
                            this.Withdraw("cail gold earrings", 1);
                            this.Withdraw("cail boots", 1);
                            this.Withdraw("dwarvish helmet", 1);
                            this.Withdraw("hy-brasyl belt", 1);
                        }
                        else if (this.SpeakMessage.ToLower().StartsWith("fio") && !this.SpeakMessage.ToLower().StartsWith("fior"))
                        {
                            this.Withdraw("fiosachd leather gauntlet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("fiosachd leather gauntlet", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("fiosachd leather greaves", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("fiosachd wooden shield", 1);
                            Thread.Sleep(1100);
                            this.Withdraw("fiosachd gold earrings", 1);
                            this.Withdraw("silk boots", 1);
                            this.Withdraw("cursed belt", 1);
                        }
                        else
                            this.Withdraw(this.SpeakMessage, 30);
                    }
                    else if (this.SpeakMessage.StartsWith("/c?", StringComparison.CurrentCultureIgnoreCase))
                        this.SkillSpellCaption("How many Coinss have I?");
                    if (this.SpeakMessage.StartsWith("/hide"))
                    {
                        if (this.SpeakMessage.Equals("/hide all"))
                        {
                            foreach (Client client in Server.Clients)
                            {
                                if (client != null && this.LoggedOn && (client.HasSpell("Hide", false) || client.HasSpell("White Bat Stance", false)))
                                    client.Tab.selfhide.Checked = !client.Tab.selfhide.Checked;
                            }
                        }
                        else if (this.HasSpell("Hide", false) || this.HasSpell("White Bat Stance", false))
                            this.Tab.selfhide.Checked = !this.Tab.selfhide.Checked;
                    }
                    if (this.SpeakMessage.StartsWith("/g ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Remove(0, this.SpeakMessage.IndexOf("/g ") + 3);
                        if (this.SpeakMessage.Equals("alts", StringComparison.CurrentCultureIgnoreCase))
                        {
                            foreach (string key in Server.Alts.Keys)
                            {
                                if (key != null && !key.Equals(this.Name, StringComparison.OrdinalIgnoreCase) && !this.GroupMembers.Contains<string>(key, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase))
                                    this.ForceGroup(key, (byte)2);
                            }
                        }
                        else if (this.SpeakMessage.Equals("friends", StringComparison.CurrentCultureIgnoreCase))
                        {
                            foreach (Player player in this.AnyPlayer())
                            {
                                if (player != null && (int)player.ID != (int)this.PlayerID && player.IsOnScreen && !this.GroupMembers.Contains<string>(player.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) && (Server.friendlist != null && Server.friendlist.Contains(player.Name.ToLower())))
                                    this.ForceGroup(player.Name, (byte)2);
                            }
                        }
                        else if (!this.GroupMembers.Contains<string>(this.SpeakMessage, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase))
                            this.ForceGroup(this.SpeakMessage, (byte)2);
                    }
                    if (this.SpeakMessage.StartsWith("/fg ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Remove(0, this.SpeakMessage.IndexOf("/fg ") + 4);
                        if (this.SpeakMessage.Equals("alts", StringComparison.CurrentCultureIgnoreCase))
                        {
                            foreach (string key in Server.Alts.Keys)
                            {
                                if (key != null && !key.Equals(this.Name, StringComparison.OrdinalIgnoreCase) && !this.GroupMembers.Contains<string>(key, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase))
                                    this.ForceGroup(key, (byte)3);
                            }
                        }
                        else if (this.SpeakMessage.Equals("friends", StringComparison.CurrentCultureIgnoreCase))
                        {
                            foreach (Player player in this.AnyPlayer())
                            {
                                if (player != null && (int)player.ID != (int)this.PlayerID && player.IsOnScreen && !this.GroupMembers.Contains<string>(player.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) && (Server.friendlist != null && Server.friendlist.Contains(player.Name.ToLower())))
                                    this.ForceGroup(player.Name, (byte)3);
                            }
                        }
                        else if (!this.GroupMembers.Contains<string>(this.SpeakMessage, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase))
                            this.ForceGroup(this.SpeakMessage, (byte)3);
                    }
                    else if (this.SpeakMessage.Equals("/wd all", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (client != null && client.Name != string.Empty && client.MapInfo.Name.StartsWith("Water Dungeon "))
                                client.Speak("Water Spirit, I have done what you have asked of me.", 1);
                        }
                    }
                    else if (this.SpeakMessage.Equals("/wd", StringComparison.CurrentCultureIgnoreCase))
                        this.Speak("Water Spirit, I have done what you have asked of me.", 1);
                    if (this.SpeakMessage.StartsWith("/safe", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.safemode)
                        {
                            foreach (Client client in Server.Clients)
                            {
                                if (client != null)
                                {
                                    client.safemode = false;
                                    client.Tab.safemode.Checked = false;
                                    client.EnableSeeInvis();
                                    if (client.Tab.nowalls.Checked)
                                        client.DisableWalls();
                                    client.Refresh();
                                }
                            }
                            User32.Show();
                        }
                        else
                        {
                            foreach (Client client in Server.Clients)
                            {
                                if (client != null)
                                {
                                    client.SendMessage("", (byte)18, false);
                                    client.safemode = true;
                                    client.DisableSeeInvis();
                                    client.EnableWalls();
                                    client.Refresh();
                                }
                            }
                            User32.Hide();
                        }
                    }
                    if (this.SpeakMessage.StartsWith("/beg "))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(5);
                        if (this.SpeakMessage != string.Empty && this.HasItem(this.SpeakMessage))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Beggar");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Item Removal"]);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)2, this.SpeakMessage, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                this.PopupClose(new uint?(npcByName.ID), (byte)1);
                            }
                        }
                    }
                    if (this.SpeakMessage.StartsWith("/fiorsrad"))
                        this.buyfiorsrads = true;
                    if (this.SpeakMessage.StartsWith("/readmail"))
                        this.openallmails();
                    if (this.SpeakMessage.StartsWith("/song", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.cancast)
                        {
                            string str = string.Empty;
                            foreach (Spell spell in this.SpellBook)
                            {
                                if (spell != null && spell.Name.Contains(" Prayer"))
                                {
                                    str = spell.Name.Substring(0, spell.Name.IndexOf(' '));
                                    break;
                                }
                            }
                            if (this.HasSpell(str + " Prayer", false) && !this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y].HasPrayerSpell)
                            {
                                this.MacroCast(str + " Prayer", new uint?());
                                Thread.Sleep(1200);
                            }
                            if (this.HasItem(str + " Prayer Necklace") && this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y].SafeToDropNecklace)
                            {
                                this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot(str + " Prayer Necklace"), 1);
                                Thread.Sleep(1200);
                                this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                                Thread.Sleep(1200);
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                                if (str == "Gramail")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)109, (byte)1, (byte)5, (byte)4);
                                }
                                else if (str == "Fiosachd")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)7, (byte)4);
                                }
                                else if (str == "Deoch")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)252, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)78, (byte)1, (byte)7, (byte)4);
                                }
                                else if (str == "Luathas")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)42, (byte)1, (byte)6, (byte)4);
                                }
                                else if (str == "Sgrios")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)105, (byte)1, (byte)6, (byte)4);
                                }
                                else if (str == "Glioca")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)80, (byte)1, (byte)8, (byte)4);
                                }
                                else if (str == "Cail")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)45, (byte)1, (byte)6, (byte)4);
                                }
                                else if (str == "Ceannlaidir")
                                {
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                                    this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)1, (byte)248, (byte)1, (byte)6, (byte)4);
                                }
                            }
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/fiobean", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("/fio bean", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("/diabean", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("/dia bean", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.cancast && (this.HasItem("Fiosachd Prayer Necklace") && this.HasSpell("Fiosachd Prayer", false)))
                        {
                            this.MacroCast("Fiosachd Prayer", new uint?());
                            Thread.Sleep(1100);
                            this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Fiosachd Prayer Necklace"), 1);
                            Thread.Sleep(500);
                            this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                            Thread.Sleep(500);
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)3, (byte)4);
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/fiohide", StringComparison.CurrentCultureIgnoreCase) || this.SpeakMessage.StartsWith("/fio hide", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.cancast && (this.HasItem("Fiosachd Prayer Necklace") && this.HasSpell("Fiosachd Prayer", false)))
                        {
                            this.MacroCast("Fiosachd Prayer", new uint?());
                            Thread.Sleep(1100);
                            this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Fiosachd Prayer Necklace"), 1);
                            Thread.Sleep(500);
                            this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                            Thread.Sleep(500);
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)2, (byte)4);
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/ref", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.cancast && (this.HasItem("Gramail Prayer Necklace") && this.HasSpell("Gramail Prayer", false)))
                        {
                            this.MacroCast("Gramail Prayer", new uint?());
                            Thread.Sleep(1100);
                            this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Gramail Prayer Necklace"), 1);
                            Thread.Sleep(500);
                            this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                            Thread.Sleep(500);
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)109, (byte)1, (byte)2, (byte)4);
                        }
                    }
                    else if (this.SpeakMessage.StartsWith("/ao", StringComparison.CurrentCultureIgnoreCase) && this.cancast && (this.HasItem("Gramail Prayer Necklace") && this.HasSpell("Gramail Prayer", false)))
                    {
                        this.MacroCast("Gramail Prayer", new uint?());
                        Thread.Sleep(1100);
                        this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Gramail Prayer Necklace"), 1);
                        Thread.Sleep(500);
                        this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                        Thread.Sleep(500);
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                        this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                        this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)109, (byte)1, (byte)1, (byte)4);
                    }
                    if (this.SpeakMessage.StartsWith("/banklist", StringComparison.CurrentCultureIgnoreCase) && this.MapInfo.Name.Contains("Storage"))
                    {
                        Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                        if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                        {
                            this.banklist = true;
                            this.DialogueRespond(new uint?(npcArray[0].ID), "Withdraw");
                        }
                    }
                    if (this.SpeakMessage.StartsWith("/quest", StringComparison.CurrentCultureIgnoreCase))
                        this.LoadRepeatQuests();
                    if (this.SpeakMessage.StartsWith("/boss", StringComparison.CurrentCultureIgnoreCase))
                        this.LoadBossLog();
                    if (this.SpeakMessage.StartsWith("/higgle", StringComparison.CurrentCultureIgnoreCase) && this.MapInfo.Name.Contains("Storage"))
                    {
                        this.SendMessage("Pause program to stop this task.", (byte)0, false);
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        this.pause = false;
                        int num2 = 0;
                        while (!this.outoflabor)
                        {
                            if (!this.HasItem("Wine") || this.ItemAmount("Wine") < 15U)
                            {
                                foreach (Npc nearbyNpc in this.NearbyNpcs(Npc.NpcType.Mundane))
                                {
                                    if (nearbyNpc != null)
                                    {
                                        this.DialogueRespond(nearbyNpc.ID, Server.Dialogs["Higgle"]);
                                        this.PopupRespond(new uint?(nearbyNpc.ID), Server.Dialogs["Higgle"], (byte)0, (byte)19, (byte)1, (byte)2, (byte)1);
                                        this.PopupRespond(new uint?(nearbyNpc.ID), Server.Dialogs["Higgle"], (byte)0, (byte)26, (byte)1, (byte)2, (byte)1);
                                        this.PopupRespond(new uint?(nearbyNpc.ID), Server.Dialogs["Higgle"], (byte)0, (byte)45, (byte)1, (byte)2, (byte)1);
                                        this.PopupRespond(new uint?(nearbyNpc.ID), Server.Dialogs["Higgle"], (byte)0, (byte)102, (byte)1, (byte)4, (byte)1);
                                        Thread.Sleep(1000);
                                        break;
                                    }
                                }
                            }
                            else if (this.ItemAmount("Wine") == 15U)
                            {
                                this.DropItems("Wine");
                                ++num2;
                                Thread.Sleep(1000);
                            }
                            Thread.Sleep(200);
                            if (num2 >= 12)
                            {
                                this.SendMessage("done higgling 180 wine", (byte)0, false);
                                goto label_1152;
                            }
                            else if (this.pause)
                                goto label_1152;
                        }
                        this.SendMessage("Out of labor.", (byte)0, false);
                        this.Tab.btnPlay.Enabled = true;
                        this.Tab.btnStop.Enabled = false;
                        this.pause = true;
                        label_1152:;
                    }
                    if (this.SpeakMessage.StartsWith("/labor ", StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.SpeakMessage = this.SpeakMessage.Substring(7);
                        if (this.SpeakMessage != string.Empty)
                        {
                            this.Tab.laborname.Text = this.SpeakMessage;
                            this.Tab.laborbutton.Text = "Stop";
                            this.Tab.autowalker_locales.Text = "Nearest Bank";
                            this.Tab.walksettings.Value = new Decimal(250);
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                            this.Tab.btnPlay.Enabled = false;
                            this.Tab.btnStop.Enabled = true;
                            this.pause = false;
                        }
                    }
                    if (this.SpeakMessage.Equals("/n", StringComparison.CurrentCultureIgnoreCase))
                        this.Tab.nowalls.Checked = !this.Tab.nowalls.Checked;
                    else if (this.SpeakMessage.Equals("/b", StringComparison.CurrentCultureIgnoreCase))
                        this.Tab.disableallbody.Checked = !this.Tab.disableallbody.Checked;
                    else if (this.SpeakMessage.StartsWith("/icon", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (ushort num2 in this.SpellBar)
                            this.SendMessage(num2.ToString(), (byte)0, false);
                    }
                    else if (this.SpeakMessage.StartsWith("/map", StringComparison.CurrentCultureIgnoreCase))
                        this.SendMessage(this.MapInfo.Name + " - " + (object)this.MapInfo.Number + ", XY: " + (object)this.MapInfo.Width + "," + (object)this.MapInfo.Height, "pink", false);
                    else if (this.SpeakMessage.StartsWith("/item", StringComparison.CurrentCultureIgnoreCase))
                    {
                        string[] strArray1 = new string[5]
                        {
              this.Inventory[0].Name,
              ", Img#: ",
              null,
              null,
              null
                        };
                        string[] strArray2 = strArray1;
                        num1 = (int)this.Inventory[0].Icon - 32768;
                        string str = num1.ToString();
                        strArray2[2] = str;
                        strArray1[3] = ", Pal#:";
                        strArray1[4] = this.Inventory[0].IconPal.ToString();
                        this.SendMessage(string.Concat(strArray1), (byte)0, false);
                    }
                    if (this.SpeakMessage.StartsWith("/count", StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (this.SpeakMessage.StartsWith("/count+", StringComparison.CurrentCultureIgnoreCase))
                        {
                            foreach (string groupMember in this.GroupMembers)
                            {
                                if (groupMember != string.Empty && this.GroupCounter.ContainsKey(groupMember.ToLower()))
                                    ++this.GroupCounter[groupMember.ToLower()].FilthyErbieCount;
                            }
                        }
                        else if (this.SpeakMessage.StartsWith("/count-", StringComparison.CurrentCultureIgnoreCase))
                        {
                            foreach (string groupMember in this.GroupMembers)
                            {
                                if (groupMember != string.Empty && this.GroupCounter.ContainsKey(groupMember.ToLower()))
                                    --this.GroupCounter[groupMember.ToLower()].FilthyErbieCount;
                            }
                        }
                        else
                        {
                            string text = string.Empty;
                            foreach (string groupMember in this.GroupMembers)
                            {
                                if (groupMember != string.Empty && this.GroupCounter.ContainsKey(groupMember.ToLower()))
                                    text = text + groupMember + " : " + (object)this.GroupCounter[groupMember.ToLower()].FilthyErbieCount + "\n";
                            }
                            if (text != string.Empty)
                                this.SendMessage(text, (byte)8, false);
                        }
                    }
                    if (this.SpeakMessage.StartsWith("/arm"))
                        this.SendMessage(this.ClientArms.ToString(), (byte)0, false);
                    if (this.SpeakMessage.StartsWith("/legend"))
                    {
                        StreamWriter streamWriter = new StreamWriter("C:\\Users\\Russ\\Desktop\\" + this.Name + "marks.txt", true);
                        foreach (KeyValuePair<string, string> legendMark in this.LegendMarks)
                        {
                            if (legendMark.Key != null)
                                streamWriter.WriteLine(legendMark.Key + " _ " + legendMark.Value);
                        }
                        streamWriter.Close();
                    }
                    if (this.SpeakMessage.StartsWith("/test"))
                    {
                        StreamWriter streamWriter = new StreamWriter("C:\\Users\\Russ\\Desktop\\" + this.Name + "marks.txt", true);
                        foreach (KeyValuePair<string, string> legendMark in this.LegendMarks)
                        {
                            if (legendMark.Key != null)
                                streamWriter.WriteLine(legendMark.Key + " _ " + legendMark.Value);
                        }
                        streamWriter.Close();
                    }
                    if (this.SpeakMessage.StartsWith("/balls"))
                    {
                        if (!this.buyballpots)
                        {
                            this.SendMessage("Buying potions.", (byte)0, false);
                            this.buyballpots = true;
                        }
                        else
                        {
                            this.SendMessage("Stopped buying potions.", (byte)0, false);
                            this.buyballpots = false;
                        }
                    }
                    this.SpeakMessage = string.Empty;
                }
                Thread.Sleep(200);
            }
            this.SendMessage("The follow distance you input was invalid.", "pink", false);
            this.SpeakMessage = string.Empty;
            return;
            label_724:
            this.SendMessage("The follow distance you input was invalid.", "pink", false);
            this.SpeakMessage = string.Empty;
        }

        public void MySpeakMessageFunc()
        {
            if (!(this.MySpeakMessage != string.Empty))
                return;
            string empty = string.Empty;
            if (this.MySpeakMessage.StartsWith("/drop ", StringComparison.CurrentCultureIgnoreCase))
            {
                if (this.MySpeakMessage.StartsWith("/drop all ", StringComparison.CurrentCultureIgnoreCase))
                {
                    string name = this.MySpeakMessage.Substring(10);
                    if (name != string.Empty)
                        this.DropItems(name);
                }
                else if (!(this.MySpeakMessage.Substring(6) != string.Empty))
                    ;
            }
            else if (this.MySpeakMessage.StartsWith("/r", StringComparison.CurrentCultureIgnoreCase))
                this.SkillSpellCaption("repair all");
            else if (this.MySpeakMessage.StartsWith("/buy ", StringComparison.CurrentCultureIgnoreCase))
            {
                string name = this.MySpeakMessage.Substring(3);
                if (name.ToLower().StartsWith("hem"))
                    this.BuyItem("hemloch", 30U - this.ItemCount("hemloch"));
                else if (name.ToLower().StartsWith("kom"))
                    this.BuyItem("komadium", 52U - this.ItemCount("komadium"));
                else
                    this.BuyItem(name, 1U);
            }
            else if (this.MySpeakMessage.StartsWith("/d ", StringComparison.CurrentCultureIgnoreCase))
            {
                string name = this.MySpeakMessage.Substring(3);
                if (name.ToLower().StartsWith("hem"))
                    this.Deposit("hemloch", 1);
                else if (name.ToLower().StartsWith("kom"))
                    this.Deposit("komadium", 1);
                else if (name.ToLower().StartsWith("suc"))
                    this.Deposit("succubus's hair", 1);
                else if (name.ToLower().StartsWith("gsf"))
                    this.Deposit("golden starfish", 1);
                else if (name.ToLower().StartsWith("war"))
                    this.Deposit("warranty bag", 1);
                else
                    this.Deposit(name, 1);
            }
            else if (this.MySpeakMessage.StartsWith("/da ", StringComparison.CurrentCultureIgnoreCase))
            {
                string str = this.MySpeakMessage.Substring(4);
                if (str.ToLower().StartsWith("hem"))
                    str = "hemloch";
                else if (str.ToLower().StartsWith("kom"))
                    str = "komadium";
                else if (str.ToLower().StartsWith("suc"))
                    str = "succubus's hair";
                else if (str.ToLower().StartsWith("gsf"))
                    str = "golden starfish";
                else if (str.ToLower().StartsWith("war"))
                    str = "warranty bag";
                if (str.ToLower().StartsWith("armor"))
                {
                    foreach (Item obj in this.Inventory)
                    {
                        if (obj != null && (obj.Name.Contains("Quilas") || obj.Name.Contains("Kano") || (obj.Name.Contains("Aiquil") || obj.Name.Contains("Arglon")) || (obj.Name.Contains("Sinash") || obj.Name.Contains("Soron") || (obj.Name.Contains("Talma") || obj.Name.Contains("Tarsil"))) || (obj.Name.Contains("Yaina") || obj.Name.Contains("Lyrical") || (obj.Name.Contains("Bell Skirt") || obj.Name.Contains("Fichu")) || (obj.Name.Contains("Jekin") || obj.Name.Contains("Casin") || (obj.Name.Contains("Frayloc") || obj.Name.Contains("Hwarone")))) || obj.Name.Contains("Yumi Bow") || obj.Name.Contains("Serpant Sphere")))
                            this.Deposit(obj.Name, 1);
                    }
                }
                else
                    this.Deposit(str, (int)this.ItemCount(str));
            }
            else if (this.MySpeakMessage.StartsWith("/w ", StringComparison.CurrentCultureIgnoreCase))
            {
                string name = this.MySpeakMessage.Substring(3);
                if (name.ToLower().StartsWith("hem"))
                    this.Withdraw("hemloch", 1);
                else if (name.ToLower().StartsWith("kom"))
                    this.Withdraw("komadium", 1);
                else if (name.ToLower().StartsWith("suc"))
                    this.Withdraw("succubus's hair", 1);
                else if (name.ToLower().StartsWith("gsf"))
                    this.Withdraw("golden starfish", 1);
                else if (name.ToLower().StartsWith("war"))
                    this.Withdraw("warranty bag", 1);
                else
                    this.Withdraw(name, 1);
            }
            else if (this.MySpeakMessage.StartsWith("/wa ", StringComparison.CurrentCultureIgnoreCase))
            {
                string name = this.MySpeakMessage.Substring(4);
                if (name.ToLower().StartsWith("hem"))
                    this.Withdraw("hemloch", 30 - (int)this.ItemCount("hemloch"));
                else if (name.ToLower().StartsWith("kom"))
                    this.Withdraw("komadium", 52 - (int)this.ItemCount("komadium"));
                else
                    this.Withdraw(name, 30);
            }
            if (this.MySpeakMessage.StartsWith("/song", StringComparison.CurrentCultureIgnoreCase))
            {
                if (this.cancast)
                {
                    string str = string.Empty;
                    foreach (Spell spell in this.SpellBook)
                    {
                        if (spell != null && spell.Name.Contains(" Prayer"))
                        {
                            str = spell.Name.Substring(0, spell.Name.IndexOf(' '));
                            break;
                        }
                    }
                    if (this.HasItem(str + " Prayer Necklace"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        this.MacroCast(str + " Prayer", new uint?());
                        Thread.Sleep(1100);
                        this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot(str + " Prayer Necklace"), 1);
                        Thread.Sleep(500);
                        this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                        Thread.Sleep(500);
                        this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                        if (str == "Gramail")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)109, (byte)1, (byte)5, (byte)4);
                        }
                        else if (str == "Fiosachd")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)7, (byte)4);
                        }
                        else if (str == "Deoch")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)252, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)78, (byte)1, (byte)7, (byte)4);
                        }
                        else if (str == "Luathas")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)42, (byte)1, (byte)6, (byte)4);
                        }
                        else if (str == "Sgrios")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)105, (byte)1, (byte)6, (byte)4);
                        }
                    }
                }
            }
            else if (this.MySpeakMessage.StartsWith("/fiobean", StringComparison.CurrentCultureIgnoreCase) || this.MySpeakMessage.StartsWith("/fio bean", StringComparison.CurrentCultureIgnoreCase) || this.MySpeakMessage.StartsWith("/diabean", StringComparison.CurrentCultureIgnoreCase) || this.MySpeakMessage.StartsWith("/dia bean", StringComparison.CurrentCultureIgnoreCase))
            {
                if (this.cancast && (this.HasItem("Fiosachd Prayer Necklace") && this.HasSpell("Fiosachd Prayer", false)))
                {
                    this.MacroCast("Fiosachd Prayer", new uint?());
                    Thread.Sleep(1100);
                    this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Fiosachd Prayer Necklace"), 1);
                    Thread.Sleep(500);
                    this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                    Thread.Sleep(500);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)3, (byte)4);
                }
            }
            else if (this.MySpeakMessage.StartsWith("/fiohide", StringComparison.CurrentCultureIgnoreCase) || this.MySpeakMessage.StartsWith("/fio hide", StringComparison.CurrentCultureIgnoreCase))
            {
                if (this.cancast && (this.HasItem("Fiosachd Prayer Necklace") && this.HasSpell("Fiosachd Prayer", false)))
                {
                    this.MacroCast("Fiosachd Prayer", new uint?());
                    Thread.Sleep(1100);
                    this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Fiosachd Prayer Necklace"), 1);
                    Thread.Sleep(500);
                    this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                    Thread.Sleep(500);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)2, (byte)4);
                }
            }
            else if (this.MySpeakMessage.StartsWith("/ref", StringComparison.CurrentCultureIgnoreCase))
            {
                if (this.cancast && (this.HasItem("Gramail Prayer Necklace") && this.HasSpell("Gramail Prayer", false)))
                {
                    this.MacroCast("Gramail Prayer", new uint?());
                    Thread.Sleep(1100);
                    this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Gramail Prayer Necklace"), 1);
                    Thread.Sleep(500);
                    this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                    Thread.Sleep(500);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)2, (byte)4);
                }
            }
            else if (this.MySpeakMessage.StartsWith("/ao", StringComparison.CurrentCultureIgnoreCase) && this.cancast && (this.HasItem("Gramail Prayer Necklace") && this.HasSpell("Gramail Prayer", false)))
            {
                this.MacroCast("Gramail Prayer", new uint?());
                Thread.Sleep(1100);
                this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot("Gramail Prayer Necklace"), 1);
                Thread.Sleep(500);
                this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                Thread.Sleep(500);
                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)2, (byte)4);
            }
        }

        private void EntityNameLoop()
        {
            while (true)
            {
                try
                {
                    if (this.Tab.studycreaturetxt.Checked && (this.sensedelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.sensedelay).TotalMilliseconds > 800.0) && (this.CanSkill("Study Creature", false) || this.CanSkill("Echo Sense", false) || this.CanSkill("Martial Awareness", false) || this.CanSkill("Combat Senses", false)))
                    {
                        foreach (Npc allNearbyMonster in this.AllNearbyMonsters())
                        {
                            if (allNearbyMonster != null && !allNearbyMonster.sensed && allNearbyMonster.IsInRSRange(this.ServerLocation, 3))
                            {
                                if (this.CanSkill("Study Creature", false))
                                {
                                    this.blocklores = true;
                                    this.UseSkill("Study Creature", 0U);
                                    this.sensedelay = DateTime.UtcNow;
                                    break;
                                }
                                if (this.CanSkill("Echo Sense", false))
                                {
                                    this.blocklores = true;
                                    this.UseSkill("Echo Sense", 0U);
                                    this.sensedelay = DateTime.UtcNow;
                                    break;
                                }
                                if (this.CanSkill("Martial Awareness", false))
                                {
                                    this.blocklores = true;
                                    this.UseSkill("Martial Awareness", 0U);
                                    this.sensedelay = DateTime.UtcNow;
                                    break;
                                }
                                if (this.CanSkill("Combat Senses", false))
                                {
                                    this.blocklores = true;
                                    this.UseSkill("Combat Senses", 0U);
                                    this.sensedelay = DateTime.UtcNow;
                                    break;
                                }
                                break;
                            }
                        }
                    }
                    if (this.Tab.recorditemdata.Checked)
                    {
                        if (this.ClickedEntityID == 0U)
                        {
                            foreach (Character character in this.Characters.Values.OrderByDescending<Character, DateTime>((Func<Character, DateTime>)(c => c.CreateTime)).ToArray<Character>())
                            {
                                if (character != null && character.Name == string.Empty && character.IsOnScreen && character is Npc)
                                {
                                    if ((character as Npc).Type == Npc.NpcType.NormalMonster || (character as Npc).Type == Npc.NpcType.PassableMonster)
                                    {
                                        this.ClickEntity(character.ID);
                                        this.ClickedEntityID = character.ID;
                                        this.EntityClickTimer = DateTime.UtcNow;
                                        break;
                                    }
                                    if ((character as Npc).Type == Npc.NpcType.Item && character.WasDropped)
                                    {
                                        this.ClickEntity(character.ID);
                                        this.ClickedEntityID = character.ID;
                                        this.EntityClickTimer = DateTime.UtcNow;
                                        break;
                                    }
                                    if ((character as Npc).Type != Npc.NpcType.Item || character.WasDropped)
                                        break;
                                }
                            }
                        }
                        else if (this.EntityClickTimer != DateTime.MinValue && DateTime.UtcNow.Subtract(this.EntityClickTimer).TotalMilliseconds > 2000.0)
                        {
                            this.ClickedEntityID = 0U;
                            this.EntityClickTimer = DateTime.MinValue;
                        }
                        foreach (Character character1 in this.Characters.Values.ToArray<Character>())
                        {
                            if (character1 != null && character1.Name != string.Empty && character1.CountedItsKill && character1.Map == this.MapInfo.Number)
                            {
                                if (character1.DropList.Count<uint>() > 0)
                                {
                                    foreach (uint index in character1.DropList.ToArray())
                                    {
                                        if (character1.Map == this.MapInfo.Number)
                                        {
                                            if (this.Characters.ContainsKey(index) && this.Characters[index] is Npc && this.Characters[index].Name != string.Empty)
                                            {
                                                Npc character2 = this.Characters[index] as Npc;
                                                if (this.NeedsIdentified(character2))
                                                {
                                                    if (character2.SecondName == string.Empty)
                                                        character2.SecondName = character2.Name;
                                                    if (!character2.Looted && character2.FakeChatCount < (byte)3 && (character2.FakeChatDelay == DateTime.MinValue || DateTime.UtcNow.Subtract(character2.FakeChatDelay).TotalSeconds > 2.0))
                                                    {
                                                        ++character2.FakeChatCount;
                                                        string[] strArray1 = new string[8];
                                                        strArray1[0] = character2.Name;
                                                        strArray1[1] = ": Identify me! (";
                                                        string[] strArray2 = strArray1;
                                                        int num = character2.Location.X;
                                                        string str1 = num.ToString();
                                                        strArray2[2] = str1;
                                                        strArray1[3] = ", ";
                                                        string[] strArray3 = strArray1;
                                                        num = character2.Location.Y;
                                                        string str2 = num.ToString();
                                                        strArray3[4] = str2;
                                                        strArray1[5] = ", ";
                                                        strArray1[6] = character2.MapName;
                                                        strArray1[7] = ")";
                                                        this.FakeChat(string.Concat(strArray1), index);
                                                        character2.FakeChatDelay = DateTime.UtcNow;
                                                    }
                                                    else if (!character2.Looted && character2.FakeChatCount == (byte)3 && DateTime.UtcNow.Subtract(character2.FakeChatDelay).TotalSeconds > 30.0)
                                                    {
                                                        character2.FakeChatCount = (byte)0;
                                                        character2.FakeChatDelay = DateTime.UtcNow;
                                                    }
                                                }
                                                else
                                                {
                                                    if (character2.Name == "Gold Pile" || character2.Name == "Silver Pile")
                                                        character1.GoldList.Add(character2.ID);
                                                    if (character2.Name != "fior sal" && character2.Name != "fior srad" && (character2.Name != "fior creag" && character2.Name != "fior athar") && (character2.Name != "Gold Pile" && character2.Name != "Gold Coin" && character2.Name != "Silver Pile") && character2.Name != "Silver Coin")
                                                        this.SendMessage(character1.Name + " dropped " + character2.Name, (byte)0, false);
                                                    string mapkey = character1.Map.ToString() + "_" + character1.MapName;
                                                    string key1 = (character1 as Npc).Image.ToString() + "_" + character1.Name;
                                                    Item2XML item2Xml = new Item2XML();
                                                    if (character2.Name == "Red Potion")
                                                    {
                                                        item2Xml.SecondName = character2.Name;
                                                        if (character2.MapName == "Ruins Altar 5")
                                                            character2.Name = "beothaich deum";
                                                        else
                                                            character2.Name = "ard ioc deum";
                                                    }
                                                    else if (character2.Name == "Purple Potion")
                                                    {
                                                        item2Xml.SecondName = character2.Name;
                                                        character2.Name = "mor ioc deum";
                                                    }
                                                    else if (character2.Name == "Orange Potion")
                                                    {
                                                        item2Xml.SecondName = character2.Name;
                                                        character2.Name = "beag ioc deum";
                                                    }
                                                    else if (character2.Name == "Blue Potion")
                                                    {
                                                        item2Xml.SecondName = character2.Name;
                                                        character2.Name = "beag spiorad deum";
                                                    }
                                                    else if (character2.Name == "Tentacle" && character2.Image - 16384 == 1546)
                                                    {
                                                        item2Xml.SecondName = character2.Name;
                                                        character2.Name = "Green Tentacle";
                                                    }
                                                    else if (character2.SecondName != string.Empty)
                                                        item2Xml.SecondName = character2.SecondName;
                                                    string key2 = (character2.Image - 16384).ToString() + "_" + character2.Name;
                                                    if (Server.ItemMapDatabase[mapkey].Monsters.ContainsKey(key1))
                                                    {
                                                        if (Server.ItemMapDatabase[mapkey].Monsters[key1].Drops.ContainsKey(key2))
                                                        {
                                                            ++Server.ItemMapDatabase[mapkey].Monsters[key1].Drops[key2].DropCount;
                                                        }
                                                        else
                                                        {
                                                            item2Xml.Name = character2.Name;
                                                            item2Xml.Image = character2.Image - 16384;
                                                            item2Xml.DropCount = 1U;
                                                            Server.ItemMapDatabase[mapkey].Monsters[key1].Drops.Add(key2, item2Xml);
                                                        }
                                                        Program.MainForm.BeginInvoke((Action)(() => Program.MainForm.ItemXMLEditor.UpdateMapForm(Server.ItemMapDatabase[mapkey], this.Name)));
                                                    }
                                                    else
                                                        this.SendMessage("FAIL: Item dropped from a monster/map that didnt record", (byte)0, false);
                                                    character1.DropList.Remove(index);
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                }
                                if (character1.GoldList.Count > 0)
                                {
                                    foreach (uint key1 in character1.GoldList.ToArray())
                                    {
                                        if (character1.Map == this.MapInfo.Number)
                                        {
                                            if (this.Characters.ContainsKey(key1) && this.Characters[key1] is Npc && this.Characters[key1].Name != string.Empty)
                                            {
                                                Npc character2 = this.Characters[key1] as Npc;
                                                if (character2.GoldAmount > 0U)
                                                {
                                                    string mapkey = character1.Map.ToString() + "_" + character1.MapName;
                                                    string key2 = (character1 as Npc).Image.ToString() + "_" + character1.Name;
                                                    if (Server.ItemMapDatabase[mapkey].Monsters.ContainsKey(key2) && !Server.ItemMapDatabase[mapkey].Monsters[key2].GoldAmounts.Contains(character2.GoldAmount.ToString()))
                                                    {
                                                        this.SendMessage(character1.Name + " dropped " + character2.GoldAmount.ToString("#,##0") + " gold!", (byte)0, false);
                                                        Server.ItemMapDatabase[mapkey].Monsters[key2].GoldAmounts.Add(character2.GoldAmount.ToString());
                                                        Program.MainForm.BeginInvoke((Action)(() => Program.MainForm.ItemXMLEditor.UpdateMapForm(Server.ItemMapDatabase[mapkey], this.Name)));
                                                    }
                                                    character1.GoldList.Remove(key1);
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                catch
                {
                }
                Thread.Sleep(200);
            }
        }

        private void Quests()
        {
            while (true)
            {
                bool flag1 = true;
                try
                {
                    if (!this.pause)
                    {
                        if (this.needsrepaired && this.Currentnpctext == "")
                        {
                            Npc[] npcArray1 = this.NearbyNpcs(Npc.NpcType.Mundane);
                            if (npcArray1 != null)
                            {
                                Npc[] npcArray2 = npcArray1;
                                int index = 0;
                                if (index < npcArray2.Length)
                                {
                                    Npc npc = npcArray2[index];
                                    this.repairmode = true;
                                    this.goldbefore = this.Statistics.Gold;
                                    this.DialogueRespond(new uint?(npc.ID), "Fix All");
                                    this.needsrepaired = false;
                                }
                            }
                        }
                        this.InsectEventAssail();
                        if (!this.pausecast && !this.autowalkon)
                        {
                            if ((this.Tab.useskillshidden.Checked ? (this.SpellBar.Contains((ushort)10) ? 1 : 0) : (!this.SpellBar.Contains((ushort)10) ? 1 : 0)) != 0)
                            {
                                this.SetMainTarget();
                                if (this.MainTarget != null && (this.Tab.asrs.Checked ? (!this.asready && !this.rsready || ((this.IgnoreHP(this.MainTarget.Image) ? (this.MainTarget.HpAmount <= 20.0 ? 1 : 0) : 0) != 0 || !this.MainTarget.Lured) ? 1 : (this.HasInfiniteMR(this.MainTarget.Image) ? 1 : 0)) : 1) != 0)
                                {
                                    this.ParalyzeForce();
                                    if ((this.Tab.equipweapon.Checked ? (this.BestWeapon() == string.Empty ? 1 : (this.staffnow.StartsWith("Staff of ") ? 1 : 0)) : 1) != 0)
                                        this.UseSkills();
                                }
                            }
                            if (this.Tab.throwtotems.Checked && (int)this.ClientForm - 16384 > 0 && (this.MonsterInFront() != null && !this.SpellBar.Contains((ushort)10)) && this.CanSkill("Tail Slam", false))
                                this.UseSkill("Tail Slam", 0U);
                        }
                        if (this.Tab.requestaite.Checked && this.askaite && !this.SpellBar.Contains((ushort)11))
                        {
                            if (this.appendand)
                                this.Speak("and " + this.Tab.requesttextaite.Text, 0);
                            else
                                this.Speak(this.Tab.requesttextaite.Text, 0);
                            this.SpeakAiteTimer.Start();
                            this.askaite = false;
                            this.appendand = true;
                        }
                        if (this.Tab.requestfas.Checked && this.askfas && !this.SpellBar.Contains((ushort)119))
                        {
                            if (this.appendand)
                                this.Speak("and " + this.Tab.requesttextfas.Text, 0);
                            else
                                this.Speak(this.Tab.requesttextfas.Text, 0);
                            this.SpeakFasTimer.Start();
                            this.askfas = false;
                            this.appendand = true;
                        }
                        if (this.Tab.requestred.Checked && this.askred && (this.IsSkulled || this.Statistics.CurrentHP == 0U))
                        {
                            if (this.appendand)
                                this.Speak("and " + this.Tab.requesttextred.Text, 0);
                            else
                                this.Speak(this.Tab.requesttextred.Text, 0);
                            this.SpeakRedTimer.Start();
                            this.askred = false;
                            this.appendand = true;
                        }
                        if (this.Tab.requestflower.Checked && this.askflower && (Decimal)this.Statistics.CurrentMP < this.Tab.requestflowercond.Value)
                        {
                            if (this.appendand)
                                this.Speak("and " + this.Tab.requesttextflower.Text, 0);
                            else
                                this.Speak(this.Tab.requesttextflower.Text, 0);
                            this.SpeakFlowerTimer.Start();
                            this.askflower = false;
                            this.appendand = true;
                        }
                        if (this.staffnow == "Fishing Rod" && this.HasItem("Fishing Bait"))
                        {
                            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)this.NearbyNpcs(Npc.NpcType.Mundane)).OrderBy<Npc, int>((Func<Npc, int>)(n => n.DistanceFrom(this.ServerLocation))))
                            {
                                if (npc != null && npc.Image == 583 && npc.DistanceFrom(this.ServerLocation) <= 5)
                                {
                                    this.ClickEntity(npc.ID);
                                    this.ClickEntity(npc.ID);
                                    Thread.Sleep(100);
                                }
                            }
                            if (this.MapInfo.IsLoaded)
                            {
                                Point[,] tiles = this.MapInfo.Tiles;
                                int upperBound1 = tiles.GetUpperBound(0);
                                int upperBound2 = tiles.GetUpperBound(1);
                                for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
                                {
                                    for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
                                    {
                                        Point point = tiles[lowerBound1, lowerBound2];
                                        if (point != null && point.DistanceFrom(this.ServerLocation) <= 5)
                                        {
                                            this.FakeSpellAni(point.X, point.Y, 362);
                                            Thread.Sleep(10);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.portalani == DateTime.MinValue || DateTime.UtcNow.Subtract(this.portalani).TotalMilliseconds > 500.0)
                    {
                        foreach (RootNpc rootNpc in Server.gamenpcs.Values)
                        {
                            if (int.Parse(rootNpc.mapnum) == this.MapInfo.Number)
                                this.FakeSpellAni(int.Parse(rootNpc.x), int.Parse(rootNpc.y), 231);
                        }
                        if (Server.gamemaps.ContainsKey(this.MapInfo.Number) && int.Parse(Server.gamemaps[this.MapInfo.Number].mapnum) == this.MapInfo.Number)
                        {
                            foreach (To to in Server.gamemaps[this.MapInfo.Number].to)
                            {
                                string str = to.ports.Substring(0, to.ports.IndexOf('>'));
                                this.FakeSpellAni(int.Parse(str.Substring(0, str.IndexOf(','))), int.Parse(str.Substring(str.IndexOf(',') + 1)), 19);
                            }
                        }
                        this.portalani = DateTime.UtcNow;
                    }
                    if (this.Tab.studycreaturetxt.Checked)
                    {
                        foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
                        {
                            if (nearbyNormalMonster != null && nearbyNormalMonster.IsOnScreen && nearbyNormalMonster.sensed && (nearbyNormalMonster.senseanimationdelay == DateTime.MinValue || DateTime.UtcNow.Subtract(nearbyNormalMonster.senseanimationdelay).TotalMilliseconds > 500.0))
                            {
                                this.FakeSpellAniTarget(nearbyNormalMonster.ID, 0U, (ushort)19, (ushort)0);
                                nearbyNormalMonster.senseanimationdelay = DateTime.UtcNow;
                            }
                        }
                    }
                    if (!this.safemode && (this.Tab.vmonitorspells || this.Tab.vmonitorcurses || this.Tab.vmonitordion))
                    {
                        foreach (Player player in this.NearbyPlayer())
                        {
                            if (player != null && player != null && (int)player.ID != (int)this.PlayerID && Server.StaticCharacters.ContainsKey(player.ID))
                            {
                                if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasdion && player.DisplayName.Contains(")") && int.Parse(player.DisplayName.Substring(1, player.DisplayName.IndexOf(")") - 1)) != 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[244]).TotalSeconds)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasironskin && player.DisplayName.Contains(")") && int.Parse(player.DisplayName.Substring(1, player.DisplayName.IndexOf(")") - 1)) != 19 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[89]).TotalSeconds)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasdioncomlha && player.DisplayName.Contains(")") && int.Parse(player.DisplayName.Substring(1, player.DisplayName.IndexOf(")") - 1)) != 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[93]).TotalSeconds)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasasgall && player.DisplayName.Contains(")") && int.Parse(player.DisplayName.Substring(1, player.DisplayName.IndexOf(")") - 1)) != 13 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[66]).TotalSeconds)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitordion && player.DisplayName.Contains(")") && (!Server.StaticCharacters[player.ID].hasasgall && !Server.StaticCharacters[player.ID].hasdion) && !Server.StaticCharacters[player.ID].hasironskin && !Server.StaticCharacters[player.ID].hasdioncomlha)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitorspells && (player.DisplayName.Contains("[fas]") || player.DisplayName.Contains("[aite/fas]")) && !Server.StaticCharacters[player.ID].hasfas)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitorspells && (player.DisplayName.Contains("[aite]") || player.DisplayName.Contains("[aite/fas]")) && !Server.StaticCharacters[player.ID].hasaite)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.monitords.Checked && Server.StaticCharacters[player.ID].NameIsRed && !Server.StaticCharacters[player.ID].hasdarkerseal && !Server.StaticCharacters[player.ID].hasdarkseal)
                                    this.UpdatePlayerImage(player);
                                else if (this.Tab.vmonitorcurses && Server.StaticCharacters[player.ID].NameIsRed && !Server.StaticCharacters[player.ID].hasardcradh)
                                    this.UpdatePlayerImage(player);
                            }
                        }
                    }
                    if (!this.safemode)
                    {
                        foreach (Npc allNearbyMonster in this.AllNearbyMonsters())
                        {
                            if (allNearbyMonster != null && Server.StaticCharacters.ContainsKey(allNearbyMonster.ID))
                            {
                                if (!this.MapInfo.Name.Contains("Andor") && Server.StaticCharacters[allNearbyMonster.ID].hasmonsterdion && allNearbyMonster.diontime != 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[allNearbyMonster.ID].SpellAnimationHistory[271]).TotalSeconds)
                                {
                                    allNearbyMonster.diontime = 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[allNearbyMonster.ID].SpellAnimationHistory[271]).TotalSeconds;
                                    this.FakeChat("(" + (object)allNearbyMonster.diontime + ")", allNearbyMonster.ID);
                                }
                                else if (!this.MapInfo.Name.Contains("Andor") && Server.StaticCharacters[allNearbyMonster.ID].hasdion && allNearbyMonster.diontime != 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[allNearbyMonster.ID].SpellAnimationHistory[244]).TotalSeconds)
                                {
                                    allNearbyMonster.diontime = 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[allNearbyMonster.ID].SpellAnimationHistory[244]).TotalSeconds;
                                    this.FakeChat("(" + (object)allNearbyMonster.diontime + ")", allNearbyMonster.ID);
                                }
                            }
                        }
                    }
                    if (this.Tab.uncheckloot.Checked && this.Tab.looton.Checked && !this.SafeToWalkFast)
                    {
                        this.Tab.looton.Checked = false;
                        this.loot = false;
                        this.SendMessage("Loot option was unchecked", "red", false);
                    }
                    if (!this.pause)
                    {
                        if (this.loot && this.lootbefore && !this.castingoneline)
                            this.LootItems();
                        if (this.Tab.vdropitemson && this.dropbefore && this.Tab.dropitemslist.Items.Count > 0)
                        {
                            foreach (object obj in this.Tab.dropitemslist.Items)
                            {
                                if (obj != null && obj.ToString() != string.Empty)
                                {
                                    if (this.HasItem(obj.ToString()))
                                        this.DropItems(obj.ToString());
                                    if (obj.ToString().ToLower() == "count")
                                    {
                                        if (this.HasItem("Abomination Mask"))
                                            this.DropItems("Abomination Mask");
                                        if (this.HasItem("Spectre Mask"))
                                            this.DropItems("Spectre Mask");
                                        if (this.HasItem("Fiend Mask"))
                                            this.DropItems("Fiend Mask");
                                        if (this.HasItem("Dubhaim Helm"))
                                            this.DropItems("Dubhaim Helm");
                                        if (this.HasItem("Undead Hand"))
                                            this.DropItems("Undead Hand");
                                        if (this.HasItem("Swamp Witch Pet"))
                                            this.DropItems("Swamp Witch Pet");
                                        if (this.HasItem("Pumpkin Cap"))
                                            this.DropItems("Pumpkin Cap");
                                        if (this.HasItem("Pumpkin Slippers"))
                                            this.DropItems("Pumpkin Slippers");
                                        if (this.HasItem("Pumpkin Costume"))
                                            this.DropItems("Pumpkin Costume");
                                        if (this.HasItem("Macabre Shoes"))
                                            this.DropItems("Macabre Shoes");
                                        if (this.HasItem("Macabre Hexed Hat"))
                                            this.DropItems("Macabre Hexed Hat");
                                        if (this.HasItem("Macabre Hexed Robes"))
                                            this.DropItems("Macabre Hexed Robes");
                                        if (this.HasItem("Macabre Hexed Dress"))
                                            this.DropItems("Macabre Hexed Dress");
                                        if (this.HasItem("Macabre Battle Armor"))
                                            this.DropItems("Macabre Battle Armor");
                                        if (this.HasItem("Macabre Battle Helm"))
                                            this.DropItems("Macabre Battle Helm");
                                        if (this.HasItem("Macabre Shadow Cloak"))
                                            this.DropItems("Macabre Shadow Cloak");
                                        if (this.HasItem("Macabre Shadow Sheath"))
                                            this.DropItems("Macabre Shadow Sheath");
                                        if (this.HasItem("Blue Shadow Hair"))
                                            this.DropItems("Blue Shadow Hair");
                                        if (this.HasItem("Red Shadow Hair"))
                                            this.DropItems("Red Shadow Hair");
                                        if (this.HasItem("Macabre Virtue Coat"))
                                            this.DropItems("Macabre Virtue Coat");
                                        if (this.HasItem("Macabre Virtue Blouse"))
                                            this.DropItems("Macabre Virtue Blouse");
                                        if (this.HasItem("Virtue Hood"))
                                            this.DropItems("Virtue Hood");
                                        if (this.HasItem("Virtue Cap"))
                                            this.DropItems("Virtue Cap");
                                        if (this.HasItem("Macabre Divine Robe"))
                                            this.DropItems("Macabre Divine Robe");
                                        if (this.HasItem("Macabre Divine Gown"))
                                            this.DropItems("Macabre Divine Gown");
                                        if (this.HasItem("Macabre Holy Hat"))
                                            this.DropItems("Macabre Holy Hat");
                                        if (this.HasItem("Macabre Bewitched Hat"))
                                            this.DropItems("Macabre Bewitched Hat");
                                    }
                                }
                            }
                        }
                        if ((this.Tab.iditems.Checked || this.Tab.recorditemdata.Checked) && !this.Tab.buygems.Checked)
                        {
                            if (!this.waitingonlore && !this.swappingitem && (this.firstitemslot != "" && this.ItemSlot(this.firstitemslot) != 1) && this.SlotHasItem(1))
                            {
                                foreach (Item obj in this.Inventory)
                                {
                                    if (obj != null && obj.InventorySlot == 1)
                                    {
                                        if (!this.NeedsIdentified(obj))
                                        {
                                            this.swappingitem = true;
                                            this.SwitchSlots((byte)0, this.ItemSlot(this.firstitemslot), 1);
                                            break;
                                        }
                                        break;
                                    }
                                }
                            }
                            if (this.CanSkill("Analyze Item", false) || this.CanSkill("Perish Lore", false) || (this.CanSkill("Wise Touch", false) || this.CanSkill("Evaluate Item", false)) || this.CanSkill("Appraise", false) || this.CanSkill("Armor Lore", false))
                                this.waitingonlore = false;
                            if (!this.waitingonlore && !this.swappingitem && (this.CanSkill("Analyze Item", false) || this.CanSkill("Perish Lore", false) || (this.CanSkill("Wise Touch", false) || this.CanSkill("Evaluate Item", false)) || this.CanSkill("Appraise", false) || this.CanSkill("Armor Lore", false)))
                            {
                                foreach (Item obj in this.Inventory)
                                {
                                    if (obj != null && !this.waitingonlore && !this.swappingitem && (this.CanSkill("Analyze Item", false) || this.CanSkill("Perish Lore", false) || this.CanSkill("Wise Touch", false) || (this.CanSkill("Evaluate Item", false) && !this.IsArmor(obj.Name) || this.CanSkill("Appraise", false) && this.IsGem(obj.Name)) || this.CanSkill("Armor Lore", false) && this.IsArmor(obj.Name)))
                                    {
                                        if (this.NeedsIdentified(obj))
                                        {
                                            if (obj.InventorySlot == 1)
                                            {
                                                if (this.CanSkill("Analyze Item", false))
                                                {
                                                    this.waitingonlore = true;
                                                    this.UseSkill("Analyze Item", 0U);
                                                }
                                                else if (this.CanSkill("Perish Lore", false))
                                                {
                                                    this.waitingonlore = true;
                                                    this.UseSkill("Perish Lore", 0U);
                                                }
                                                else if (this.CanSkill("Wise Touch", false))
                                                {
                                                    this.waitingonlore = true;
                                                    this.UseSkill("Wise Touch", 0U);
                                                }
                                                else if (this.CanSkill("Evaluate Item", false) && !this.IsArmor(obj.Name))
                                                {
                                                    this.waitingonlore = true;
                                                    this.UseSkill("Evaluate Item", 0U);
                                                }
                                                else if (this.CanSkill("Armor Lore", false) && this.IsArmor(obj.Name))
                                                {
                                                    this.waitingonlore = true;
                                                    this.UseSkill("Armor Lore", 0U);
                                                }
                                                else if (this.CanSkill("Appraise", false) && this.IsGem(obj.Name))
                                                {
                                                    this.waitingonlore = true;
                                                    this.UseSkill("Appraise", 0U);
                                                }
                                            }
                                            else
                                            {
                                                if (this.firstitemslot != "" && this.ItemSlot(this.firstitemslot) == 1)
                                                {
                                                    this.swappingitem = true;
                                                    this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                    break;
                                                }
                                                if (this.firstitemslot == "")
                                                    this.SendMessage("firstitemslot is blank, manually move an item", (byte)0, false);
                                            }
                                        }
                                        if (this.firstitemslot != "" && !this.SlotHasItem(1))
                                        {
                                            this.swappingitem = true;
                                            this.SwitchSlots((byte)0, this.ItemSlot(this.firstitemslot), 1);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (this.autodeposit && this.Tab.autodepositlistbox.Items.Count > 0)
                        {
                            foreach (object obj in this.Tab.autodepositlistbox.Items)
                            {
                                if (obj != null && obj.ToString() != string.Empty && this.HasItem(obj.ToString()))
                                    this.AutoDeposit(obj.ToString());
                            }
                        }
                        if (this.Tab.trashorbs.Checked && this.MapInfo.Number == 6138 && this.HasItem("Demon Orb"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Table");
                            if (npcByName != null && npcByName.IsOnScreen && npcByName.DistanceFrom(this.ServerLocation) < 3)
                            {
                                this.DropInMonster(npcByName.ID, this.ItemSlot("Demon Orb"), 1);
                                Thread.Sleep(800);
                            }
                        }
                        if (this.Tab.tradeincostumes.Checked && (this.MapInfo.Number == 135 || this.MapInfo.Name == "Abel Storage" || this.MapInfo.Name == "Rucesion Storage") && !this.autowalkon)
                        {
                            if (this.Overhat == "Monkey Head" || this.Overhat == "Dino Head" || (this.Overhat == "Panda Head" || this.Overhat == "Lizard Head") || (this.Overhat == "Bunny Head" || this.Overhat == "Yeti Head" || (this.Overhat == "Cat Head" || this.Overhat == "Dog Head")) || this.Overhat == "Sheep Head")
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Cassidy");
                                if (this.MapInfo.Name == "Abel Storage")
                                    npcByName = this.FindNpcByName<Npc>("Lamont");
                                else if (this.MapInfo.Name == "Rucesion Storage")
                                    npcByName = this.FindNpcByName<Npc>("Antonio");
                                if (npcByName != null)
                                {
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["Item Shop Trade-In"]);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                    this.PopupClose(new uint?(npcByName.ID), (byte)1);
                                    Thread.Sleep(1000);
                                }
                            }
                            else if (this.Overcoat == "Male Beach Attire" || this.Overcoat == "Female Beach Attire" || (this.Overcoat == "Monkey Body" || this.Overcoat == "Shredded Cape") || (this.Overcoat == "Caveman" || this.Overcoat == "Dino Body" || (this.Overcoat == "Panda Body" || this.Overcoat == "Lizard Body")) || (this.Overcoat == "Bunny Body" || this.Overcoat == "Yeti Body" || (this.Overcoat == "Cat Body" || this.Overcoat == "Dog Body")) || this.Overcoat == "Sheep Body")
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Cassidy");
                                if (this.MapInfo.Name == "Abel Storage")
                                    npcByName = this.FindNpcByName<Npc>("Lamont");
                                else if (this.MapInfo.Name == "Rucesion Storage")
                                    npcByName = this.FindNpcByName<Npc>("Antonio");
                                if (npcByName != null)
                                {
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["Item Shop Trade-In"]);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)2, (byte)1);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                    this.PopupClose(new uint?(npcByName.ID), (byte)1);
                                    Thread.Sleep(1000);
                                }
                            }
                            else
                            {
                                if (this.HasItem("Male Beach Attire"))
                                {
                                    this.UseItem("Male Beach Attire");
                                    Thread.Sleep(1000);
                                }
                                if (this.HasItem("Female Beach Attire"))
                                {
                                    this.UseItem("Female Beach Attire");
                                    Thread.Sleep(1000);
                                }
                                if (this.HasItem("Monkey Head"))
                                {
                                    this.UseItem("Monkey Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Cat Head"))
                                {
                                    this.UseItem("Cat Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Lizard Head"))
                                {
                                    this.UseItem("Lizard Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Bunny Head"))
                                {
                                    this.UseItem("Bunny Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Dog Head"))
                                {
                                    this.UseItem("Dog Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Dino Head"))
                                {
                                    this.UseItem("Dino Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Panda Head"))
                                {
                                    this.UseItem("Panda Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Sheep Head"))
                                {
                                    this.UseItem("Sheep Head");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Yeti Head"))
                                {
                                    this.UseItem("Yeti Head");
                                    Thread.Sleep(1000);
                                }
                                if (this.HasItem("Monkey Body"))
                                {
                                    this.UseItem("Monkey Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Cat Body"))
                                {
                                    this.UseItem("Cat Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Lizard Body"))
                                {
                                    this.UseItem("Lizard Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Bunny Body"))
                                {
                                    this.UseItem("Bunny Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Dog Body"))
                                {
                                    this.UseItem("Dog Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Dino Body"))
                                {
                                    this.UseItem("Dino Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Panda Body"))
                                {
                                    this.UseItem("Panda Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Sheep Body"))
                                {
                                    this.UseItem("Sheep Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Yeti Body"))
                                {
                                    this.UseItem("Yeti Body");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Caveman"))
                                {
                                    this.UseItem("Caveman");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Shredded Cape"))
                                {
                                    this.UseItem("Shredded Cape");
                                    Thread.Sleep(1000);
                                }
                            }
                        }
                    }
                    if (this.throwss)
                    {
                        this.throwss = false;
                        this.SendMessage(this.throwername + " threw me.", (byte)0, false);
                        this.throwername = string.Empty;
                    }
                    if (!this.pause && (this.Tab.dojo.Checked ? (this.MapInfo.Name.Contains("Training Dojo") ? 1 : 0) : (!this.Tab.dojo.Checked ? 1 : 0)) != 0 && !this.autowalkon)
                    {
                        if (this.Tab.MacroOptions.macroskill.Checked)
                        {
                            if (this.MainTarget != null && this.MainTarget != this.MonsterInFront() && (this.MainTarget.DistanceFrom(this.ServerLocation) == 1 && !this.ImFacingMonster) && !this.ImFacingAnything)
                                this.FaceTarget(this.MainTarget.Location);
                            foreach (Skill skill in this.SkillBook)
                            {
                                if (skill != null && this.Tab.MacroOptions.macroskillslistview.Items.ContainsKey(skill.Name) && this.Tab.MacroOptions.macroskillslistview.Items[skill.Name].Checked)
                                    this.UseSkill(skill.Name, 0U);
                            }
                        }
                        if (this.Tab.MacroOptions.macropoisoncrasher.Checked && (this.CanSkill("Crasher", false) || this.CanSkill("Animal Feast", false) || this.CanSkill("Execute", false)) && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 <= 2.0)
                        {
                            this.UseSkill("Crasher", 0U);
                            if (this.HasItem("Damage Scroll"))
                                this.UseItem("Damage Scroll");
                            this.UseSkill("Animal Feast", 0U);
                            this.UseSkill("Execute", 0U);
                        }
                        else if (this.Tab.MacroOptions.macrohemcrasher.Checked && (this.CanSkill("Crasher", false) || this.CanSkill("Animal Feast", false) || this.CanSkill("Execute", false)) && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 > 2.0)
                        {
                            if (this.HasItem("Hemloch"))
                            {
                                this.UseItem("Hemloch");
                                this.UseSkill("Crasher", 0U);
                                this.UseSkill("Animal Feast", 0U);
                                this.UseSkill("Execute", 0U);
                                Thread.Sleep(1000);
                            }
                            else if (this.CanSkill("Auto Hemloch", false))
                            {
                                this.UseSkill("Auto Hemloch", 0U);
                                this.UseSkill("Crasher", 0U);
                                this.UseSkill("Animal Feast", 0U);
                                this.UseSkill("Execute", 0U);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.Tab.MacroOptions.macropoisoncrasher.Checked && !this.SpellBar.Contains((ushort)35) && !this.SpellBar.Contains((ushort)1))
                            this.SkillSpellCaption("Poison");
                    }
                    if (this.Statistics.CurrentHP != 0U && !this.IsSkulled && (this.Tab.MacroOptions.macromend.Checked && this.FirstItemHasNoDurability))
                    {
                        foreach (Skill skill in this.SkillBook)
                        {
                            if (skill != null && skill.CurrentLevel < skill.MaximumLevel && skill.MaximumLevel != 0 && (skill.Name == "Lucky Hand" || skill.Name.Contains("Mend") || skill.Name == "Tailoring"))
                                this.UseSkill(skill.Name, 0U);
                        }
                    }
                    if (!this.pause && this.Tab.dojo.Checked)
                    {
                        if (this.MapInfo.Name.Contains("Training Dojo"))
                        {
                            if (this.Tab.autowalker_button.Text == "Stop")
                            {
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                            }
                            if (this.dojowalk && this.SurroundedCount != 4 && this.MainTarget != null && this.MainTarget.IsOnScreen)
                                this.WalkToTarget();
                            if (this.ImFacingMonster && this.MonsterInFront() != null)
                                this.dojowalk = false;
                        }
                        else if (this.MapInfo.Number == 3071)
                        {
                            if (this.Statistics.Gold < 10000U)
                            {
                                this.pause = true;
                                this.Tab.btnPlay.Enabled = true;
                                this.Tab.btnStop.Enabled = false;
                                this.SendMessage("Stopped because you're a broke ass, get some gold", (byte)0, false);
                            }
                            if (this.Tab.autowalker_button.Text == "Stop")
                            {
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                            }
                            this.dojowalk = true;
                            Npc npcByName = this.FindNpcByName<Npc>("Niomope");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                if (!this.niomope)
                                {
                                    if (this.dojodelay == DateTime.MinValue)
                                        this.dojodelay = DateTime.UtcNow;
                                    if (DateTime.UtcNow.Subtract(this.dojodelay).TotalMilliseconds > 5000.0)
                                    {
                                        this.dojodelay = DateTime.MinValue;
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Enter Training Dojo"]);
                                        this.niomope = true;
                                    }
                                }
                                if (this.Currentnpctext.StartsWith("Do you want to enter"))
                                    this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                            }
                        }
                    }
                    if (!this.pause && !this.needsrepaired && !this.repairmode && this.Tab.enterbugs.Checked)
                    {
                        if (this.MapInfo.Number == 133)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Torrance");
                            if (npcByName != null)
                            {
                                Thread.Sleep(2000);
                                this.DialogueRespond(npcByName.ID, (ushort)1900);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(2000);
                            }
                        }
                        if (this.MapInfo.Number == 6513)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Octavio");
                            if (npcByName != null)
                            {
                                Thread.Sleep(2000);
                                this.DialogueRespond(npcByName.ID, (ushort)1899);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(2000);
                            }
                        }
                        if (this.MapInfo.Number == 10265)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Mank");
                            if (npcByName != null)
                            {
                                Thread.Sleep(2000);
                                this.DialogueRespond(npcByName.ID, (ushort)1898);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(2000);
                            }
                        }
                        if (this.MapInfo.Number == 10001)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Akum");
                            if (npcByName != null)
                            {
                                Thread.Sleep(2000);
                                this.DialogueRespond(npcByName.ID, (ushort)1897);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(2000);
                            }
                        }
                    }
                    if (!this.pause && this.autowalkon)
                    {
                        if (this.towerfinish && this.MapInfo.Number == 706 && this.Tab.vautowalker_locales.Equals("Nobis") && this.Tab.vwalklocaleslist.Equals("Tower Maze"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Filippo");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Maze"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Maze"], (byte)0, (byte)47, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Maze"], (byte)0, (byte)48, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Maze"], (byte)0, (byte)49, (byte)1);
                                this.randomdest = (Location)null;
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                                this.towerfinish = false;
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 393 && this.Tab.vautowalker_locales.Equals("Mileth") && (this.Tab.vwalklocaleslist.Equals("ToC Warrior") || this.Tab.vwalklocaleslist.Equals("ToC Monk") || (this.Tab.vwalklocaleslist.Equals("ToC Rogue") || this.Tab.vwalklocaleslist.Equals("ToC Priest")) || this.Tab.vwalklocaleslist.Equals("ToC Wizard")))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Aoife");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Path Reception"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Path Reception"], (byte)0, (byte)1, (byte)1);
                                if (this.Gender == (byte)1)
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Path Reception"], (byte)0, (byte)3, (byte)1);
                                else
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Path Reception"], (byte)0, (byte)6, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Path Reception"], (byte)0, (byte)8, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Path Reception"], (byte)0, (byte)15, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 509)
                        {
                            foreach (Npc nearbyNpc in this.NearbyNpcs(Npc.NpcType.Mundane))
                            {
                                if (nearbyNpc != null && nearbyNpc.IsOnScreen)
                                {
                                    this.SkillSpellCaption("repair all");
                                    this.DialogueRespond(nearbyNpc.ID, Server.Dialogs["Leave Battle Ring"]);
                                    this.PopupRespond(new uint?(nearbyNpc.ID), Server.Dialogs["Leave Battle Ring"], (byte)0, (byte)1, (byte)1, (byte)2, (byte)1);
                                    Thread.Sleep(1000);
                                    break;
                                }
                            }
                        }
                        if (this.MapInfo.Number == 6525 && this.WithinRange(29, 18, 21))
                        {
                            this.Speak("welcome aisling", 2);
                            Thread.Sleep(1000);
                        }
                        if (this.MapInfo.Number == 6926)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Quard");
                            if (npcByName != null)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Express Ship"]);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                Thread.Sleep(800);
                            }
                        }
                        if (this.MapInfo.Number == 10265 && !this.Tab.vautowalker_locales.Equals("Hwarone") && !this.Tab.vautowalker_locales.Equals("Veltain Mines"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Mank");
                            if (npcByName != null)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Caravan to Noam"]);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                Thread.Sleep(800);
                            }
                        }
                        if ((this.Tab.vautowalker_locales.Equals("Veltain Mines") || this.Tab.vautowalker_locales.Equals("Aman Jungle") || (this.Tab.vautowalker_locales.Equals("Lost Ruins") || this.Tab.vautowalker_locales.Equals("Water Dungeon")) || (this.Tab.vautowalker_locales.Equals("Hwarone") || this.Tab.vautowalker_locales.Equals("Andor")) || this.Tab.vautowalker_locales.Equals("Desert Dunes") || this.Tab.vautowalker_locales.Equals("Tavaly")) && this.MapInfo.Number == 5232)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("ColiseumTir");
                            if (npcByName != null)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Arena Exit"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Arena Exit"], (byte)0, (byte)1, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Arena Exit"], (byte)0, (byte)12, (byte)1, (byte)2, (byte)1);
                                Thread.Sleep(800);
                            }
                        }
                        if (!this.Tab.vautowalker_locales.Equals("Balanced Arena") || this.MapInfo.Number != 3052 || this.FindNpcByName<Npc>("Celesta") == null)
                            ;
                        if (this.Tab.vautowalker_locales.Equals("Andor") && this.Tab.vwalklocaleslist.Equals("Andor Lobby") && (Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name]) && this.MapInfo.Number != 10038 && !this.MapInfo.Name.Contains("Andor"))
                        {
                            if (this.Currentnpctext.Contains("Map of Ant"))
                                this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)2);
                            else if (this.Currentnpctext.StartsWith("Where would you like to go?"))
                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)2, (byte)1, (byte)3, (byte)2);
                            else if (this.Currentnpctext.StartsWith("You will be transported to"))
                                this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)2);
                            if (this.Currentnpctext.StartsWith("((You can only use this once every "))
                            {
                                if (this.HasItem("Map of Ant Tunnels"))
                                {
                                    this.anttunnel = DateTime.Now;
                                    this.SaveTimedStuff(23);
                                }
                                else if (this.HasItem("Map of Ant Guardian Tunnels"))
                                {
                                    this.guardiananttunnel = DateTime.Now;
                                    this.SaveTimedStuff(24);
                                }
                                this.usetunneldelay = DateTime.UtcNow;
                                this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                            }
                            if (this.HasItem("Map of Ant Tunnels") && (this.anttunnel == DateTime.MinValue || DateTime.Now.Subtract(this.anttunnel).TotalMinutes > 360.0) && (this.usetunneldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.usetunneldelay).TotalSeconds > 5.0))
                            {
                                this.UseItem("Map of Ant Tunnels");
                                this.usetunneldelay = DateTime.UtcNow;
                            }
                            else if (this.HasItem("Map of Ant Guardian Tunnels") && (this.guardiananttunnel == DateTime.MinValue || DateTime.Now.Subtract(this.guardiananttunnel).TotalMinutes > 240.0) && (this.usetunneldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.usetunneldelay).TotalSeconds > 5.0))
                            {
                                this.UseItem("Map of Ant Guardian Tunnels");
                                this.usetunneldelay = DateTime.UtcNow;
                            }
                        }
                        if (this.MapInfo.Number == 10000 && this.Statistics.Gold > 10000U)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Lenoa");
                            if (npcByName != null)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Caravan to Noam"]);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                Thread.Sleep(800);
                            }
                        }
                        if (!this.Tab.vautowalker_locales.Equals("Andor") && !this.Tab.vautowalker_locales.Equals("Desert Dunes") && !this.Tab.vautowalker_locales.Equals("Noam") && !this.Tab.vautowalker_locales.Equals("Mt Merry") && (this.MapInfo.Number == 10055 && this.Statistics.Gold > 10000U))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Habab");
                            if (npcByName != null)
                            {
                                if (this.carpetdelay == DateTime.MinValue)
                                {
                                    this.donotwalk = true;
                                    this.carpetdelay = DateTime.UtcNow;
                                }
                                if (this.SafeToWalkFast || DateTime.UtcNow.Subtract(this.carpetdelay).TotalMilliseconds > 2000.0)
                                {
                                    this.carpetdelay = DateTime.MinValue;
                                    if (this.Tab.vautowalker_locales.Equals("Veltain Mines") || this.Tab.vautowalker_locales.Equals("Aman Jungle") || (this.Tab.vautowalker_locales.Equals("Lost Ruins") || this.Tab.vautowalker_locales.Equals("Water Dungeon")) || this.Tab.vautowalker_locales.Equals("Hwarone") || this.Tab.vautowalker_locales.Equals("Asilon"))
                                    {
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Caravan to Asilon or Hwarone"]);
                                        this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    }
                                    else
                                    {
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Carpet Merchant"]);
                                        this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                    }
                                    this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    Thread.Sleep(800);
                                    this.donotwalk = false;
                                }
                            }
                        }
                        if ((this.Tab.vautowalker_locales.Equals("Nearest Bank") || this.Tab.pigwalk.Checked || this.frostygift || this.Tab.vautowalker_locales.Equals("Rucesion") && this.Tab.vwalklocaleslist == "Armor Shop") && this.Currentnpctext.Contains("Would you like to go "))
                        {
                            if (this.Tab.vautowalker_locales.Equals("Nearest Bank") && this.Nation == (byte)4)
                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                            else if (this.Nation == (byte)7 || this.Nation == (byte)4)
                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)2, (byte)1);
                            else if (this.Nation < (byte)7)
                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                        }
                    }
                    if (this.Currentnpctext != string.Empty)
                    {
                        if (this.Currentnpctext.Contains("Hydele") && this.Currentnpctext.Contains("repare "))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.HydeleNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                HerbNode herbNode = new HerbNode();
                                herbNode.Type = "Hydele";
                                herbNode.Map = this.MapInfo.Number;
                                herbNode.Location.X = location.X;
                                herbNode.Location.Y = location.Y;
                                herbNode.Active = true;
                                Server.HydeleNodes.Add(key1, herbNode);
                                Server.HerbNodes.Add(key1, herbNode);
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to Hydele Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Betony") && this.Currentnpctext.Contains("repare "))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.BetonyNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                HerbNode herbNode = new HerbNode();
                                herbNode.Type = "Betony";
                                herbNode.Map = this.MapInfo.Number;
                                herbNode.Location.X = location.X;
                                herbNode.Location.Y = location.Y;
                                herbNode.Active = true;
                                Server.BetonyNodes.Add(key1, herbNode);
                                Server.HerbNodes.Add(key1, herbNode);
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to Betony Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Personaca") && this.Currentnpctext.Contains("repare "))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                HerbNode herbNode = new HerbNode();
                                herbNode.Type = "Personaca";
                                herbNode.Map = this.MapInfo.Number;
                                herbNode.Location.X = location.X;
                                herbNode.Location.Y = location.Y;
                                herbNode.Active = true;
                                Server.PersonacaNodes.Add(key1, herbNode);
                                Server.HerbNodes.Add(key1, herbNode);
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to Personaca Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Ancusa") && this.Currentnpctext.Contains("repare "))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "Ancusa",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to Ancusa Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Hemloch") && this.Currentnpctext.Contains("repare "))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "Hemloch",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to Hemloch Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Fifleaf") && this.Currentnpctext.Contains("repare "))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "Fifleaf",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to Fifleaf Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Collect fior sal"))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "sal",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to sal Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Collect fior srad"))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "srad",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to srad Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Collect fior athar"))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "athar",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to athar Nodes", (byte)0, false);
                            }
                        }
                        else if (this.Currentnpctext.Contains("Collect fior creag"))
                        {
                            Location location = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            string key1 = location.X.ToString() + "," + (object)location.Y + "," + (object)this.MapInfo.Number;
                            bool flag2 = false;
                            foreach (string key2 in Server.PersonacaNodes.Keys)
                            {
                                if (key2 == key1)
                                    flag2 = true;
                            }
                            if (!flag2)
                            {
                                Server.HerbNodes.Add(key1, new HerbNode()
                                {
                                    Type = "creag",
                                    Map = this.MapInfo.Number,
                                    Location = {
                    X = location.X,
                    Y = location.Y
                  },
                                    Active = true
                                });
                                this.SaveHerbNodes();
                                this.SendMessage(location.X.ToString() + "," + (object)location.Y + " added to creag Nodes", (byte)0, false);
                            }
                        }
                    }
                    if (!this.pause && this.Tab.useexpgem.Checked)
                    {
                        if (this.Currentnpctext.StartsWith("Using this item will allow you to sell exp"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)2);
                            if (!this.Tab.expgemmp.Checked)
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)2);
                            else
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)2, (byte)2);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)2);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)2);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)2);
                        }
                        if (this.Currentnpctext.StartsWith("Remember you CANNOT GAIN BACK"))
                        {
                            this.beforeascend = this.Statistics.Experience;
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)2, (byte)1);
                            this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                            this.ascendexp = false;
                            this.expgemtimer = DateTime.MinValue;
                        }
                    }
                    if (!this.pause && this.Currentnpctext.StartsWith("The full Red Moon"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)1, (byte)4);
                    if (this.MapInfo.Number == 1960 && this.Currentnpctext.StartsWith("Welcome to the fair town of Tagor"))
                    {
                        if (!this.tagorcitpopup)
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)16, (byte)1, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)75, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)76, (byte)1, (byte)1, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)81, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)89, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)90, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)91, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tagor Welcome"], (byte)0, (byte)91, (byte)1);
                            this.tagorcitpopup = true;
                            Thread.Sleep(1000);
                            this.Tab.fastwalk.Checked = true;
                            this.Tab.autowalker_locales.SelectedItem = (object)"Tagor";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Lost Path";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                        }
                        else
                        {
                            this.tagorcitpopup = false;
                            Thread.Sleep(1000);
                        }
                    }
                    if (this.MapInfo.Name.StartsWith("Path Temple ") && this.Currentnpctext != string.Empty)
                    {
                        this.tocpopup = true;
                        this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                    }
                    if (this.Currentnpctext.StartsWith("You unlock the large door") && (this.MapInfo.Number == 6000 || this.MapInfo.Number == 6002))
                        this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                    if (!this.pause && this.MapInfo.Number == 2051 && !this.autowalkon)
                    {
                        if (this.Currentnpctext == string.Empty && !this.gotmanorkey)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Dreval");
                            if (npcByName != null)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Manor Key"]);
                                uint id = npcByName.ID;
                                this.PopupNext(new uint?(id), (byte)1);
                                this.PopupNext(new uint?(id), (byte)1);
                                this.PopupNext(new uint?(id), (byte)1);
                                this.PopupNext(new uint?(id), (byte)1);
                                this.PopupNext(new uint?(id), (byte)1);
                                this.PopupClose(new uint?(id), (byte)1);
                                Thread.Sleep(1000);
                                this.gotmanorkey = true;
                                this.Tab.fastwalk.Checked = true;
                                this.Tab.autowalker_locales.SelectedItem = (object)"Eingren Manor";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("I just gave you the key,"))
                        {
                            this.gotmanorkey = true;
                            this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                            this.SendMessage("You can't get another key yet.", (byte)0, false);
                        }
                    }
                    if (!this.pause && this.MapInfo.Number == 662 && this.Currentnpctext.StartsWith("You see strange dark fog"))
                        this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    if (!this.pause && this.MapInfo.Number == 4009 && this.Currentnpctext.StartsWith("You feel a pulse"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Enter Heart of Stone"], (byte)0, (byte)1, (byte)1, (byte)1, (byte)1);
                    if (this.MapInfo.Number == 8989 && this.Currentnpctext.StartsWith("This must be where the Slabs"))
                        this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    if (!this.pause && this.MapInfo.Name == "North Pole" && !this.autowalkon && this.megprize)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("MotherErbie");
                        if (npcByName != null)
                        {
                            this.DialogueRespond(new uint?(npcByName.ID), "MotherErbie");
                            this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1);
                            Thread.Sleep(800);
                            this.megprize = false;
                            this.LogOff();
                        }
                    }
                    if (!this.pause && this.MapInfo.Number == 115 && !this.autowalkon && (this.HasMPig() && this.HasFPig()))
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Jay");
                        if (npcByName != null)
                        {
                            this.DialogueRespond(new uint?(npcByName.ID), "Jay");
                            this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1);
                            Thread.Sleep(1000);
                            if (this.HasItem("Pig Hairpin"))
                                this.DropItems("Pig Hairpin");
                            if (this.HasItem("Pig Head"))
                                this.DropItems("Pig Head");
                            if (this.HasItem("Pig Body"))
                                this.DropItems("Pig Body");
                            if (this.HasItem("Pet Male Pig"))
                                this.DropItems("Pet Male Pig");
                            if (this.HasItem("Pet Female Pig"))
                                this.DropItems("Pet Female Pig");
                            if (this.HasItem("Event Star Medal"))
                                this.DropItems("Event Star Medal");
                            Thread.Sleep(1000);
                            this.LogOff();
                        }
                    }
                    if (this.Currentnpctext != string.Empty)
                    {
                        if (!this.lawquest && this.MapInfo.Number == 8988)
                            this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)4);
                        if (!this.pause && this.Tab.openveltchest.Checked && this.Tab.openveltchestgold.Text != string.Empty && (!this.Currentnpcname.StartsWith("Heavy") && this.Currentnpcname.Equals("Veltain Treasure Chest") && this.Currentnpctext.StartsWith("You are about to pull an item out of the chest,")))
                        {
                            this.chestfee = this.Tab.openveltchestgold.Text;
                            this.veltainchestopen = true;
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)2);
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)2);
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)2, this.Tab.openveltchestgold.Text, (byte)2);
                        }
                        if (this.Currentnpctext.StartsWith("You are about to enter a hostile area."))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)4);
                        if (this.Currentnpctext.StartsWith("You fall into a deep sleep"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)4);
                        else if (this.Currentnpctext.StartsWith("((You are about to be taken"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)4);
                        else if (this.Currentnpctext.StartsWith("Lying in bed, "))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)4);
                        else if (!this.pause && this.Currentnpctext.StartsWith("Ask a friend to show you"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Harvest Conix"], (byte)0, (byte)6, (byte)4);
                        else if (this.Currentnpctext.StartsWith("((This powerful scent"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)2);
                        else if (this.Currentnpctext.StartsWith("((You are entering a role-playing"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)4);
                        else if (this.Currentnpctext.StartsWith("You can't bring weapons here!"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Loures Soldiers"], (byte)1, (byte)43, (byte)4);
                        else if (this.Currentnpctext.StartsWith("Come back when you have money."))
                        {
                            this.SendMessage(this.Name + " couldn't afford repairs!", "red", true);
                            this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                        }
                        else if (this.withdrawmode == 1 && this.Currentnpctext != string.Empty && !this.Currentnpctext.StartsWith("Here is what you have deposited"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                            if (this.SafeToWalkFast)
                                this.DialogueRespond(new uint?(currentnpcpopupId), "Withdraw");
                            this.withdrawmode = 2;
                        }
                        else if (this.depositmode == 1 && this.Currentnpctext != string.Empty && !this.Currentnpctext.StartsWith("I can only take new or fully repaired"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                            if (this.SafeToWalkFast)
                                this.DialogueRespond(new uint?(currentnpcpopupId), "Deposit");
                            this.depositmode = 2;
                        }
                        else if (this.sendmode == 1 && this.Currentnpctext.Contains("It will be done."))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                            this.DialogueRespond(new uint?(currentnpcpopupId), "Send Parcel");
                            this.sendmode = 2;
                        }
                        else if (this.repairmode && this.Currentnpctext.Contains("Your items have been repaired."))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            if (this.goldbefore > this.Statistics.Gold)
                                this.SendMessage("repair bill: " + Math.Abs((long)(this.goldbefore - this.Statistics.Gold)).ToString() + " coins.", (byte)0, false);
                            else
                                this.SendMessage("Cannot afford repairs or something.", (byte)0, false);
                            this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                            this.repairmode = false;
                            this.needsrepaired = false;
                        }
                        else if (this.banklist && this.Currentnpctext.StartsWith("Here is what you have deposited"))
                        {
                            this.banklist = false;
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)69, (byte)0, (byte)1, (byte)1);
                        }
                    }
                    if (!this.pause && this.MapInfo.Number == 421)
                    {
                        if (this.Currentnpctext.Contains(" wishes to be your mentor. If you "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Mentor"], (byte)0, (byte)80, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Mentor"], (byte)0, (byte)81, (byte)1, (byte)2, (byte)1);
                        }
                        else if (this.Currentnpctext.Contains(" has accepted you as mentor. Teach"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Mentor"], (byte)0, (byte)118, (byte)1);
                    }
                    if (!this.pause && this.Tab.AscendOptions.vascendbutton)
                    {
                        if (this.HasItem("Warranty Bag"))
                        {
                            this.SendMessage("Deposit your Warranty Bag!", (byte)0, false);
                            this.Tab.AscendOptions.ascendbutton.Text = "Start";
                        }
                        if (this.Tab.AscendOptions.vascendhp)
                        {
                            if (this.MapInfo.Number == 435)
                            {
                                if (this.ServerLocation.Y < 27 && this.ServerLocation.Y > 17 && this.ServerLocation.X < 6)
                                    this.WalkToExact(4, 20);
                                else
                                    this.WalkToExact(6, 23);
                            }
                            if (this.MapInfo.Number == 3085)
                                this.WalkToExact(10, 13);
                            if (this.MapInfo.Number == 3086)
                            {
                                if (this.ServerLocation.Y == 5 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                    this.WalkWithinRange(6, 2, 2);
                                else if (this.ServerLocation.Y == 6 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                {
                                    this.WalkWithinRange(6, 9, 2);
                                }
                                else
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Deoch");
                                    if (npcByName != null)
                                    {
                                        if (!this.deoch)
                                        {
                                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Deoch Toiseach"]);
                                            this.deoch = true;
                                        }
                                        if (this.Tab.AscendOptions.instantascend.Checked && this.SafeToWalkFast)
                                        {
                                            if (this.Currentnpctext.StartsWith("Aisling, do."))
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You will transform your Work"))
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)28, (byte)1);
                                            if (this.Currentnpctext.StartsWith("((It costs "))
                                            {
                                                uint num1 = uint.Parse(this.Currentnpctext.Split(' ')[2].ToString());
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)30, (byte)1);
                                                uint num2 = 0;
                                                ulong num3 = 0;
                                                while (true)
                                                {
                                                    num3 += (ulong)(num1 * 500U);
                                                    if (num3 <= (ulong)this.Statistics.Experience)
                                                    {
                                                        num1 += 50U;
                                                        ++num2;
                                                        flag1 = true;
                                                    }
                                                    else
                                                        break;
                                                }
                                                for (uint index = 0; index < num2; ++index)
                                                {
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)2, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)80, (byte)1, (byte)2, (byte)1);
                                                    Thread.Sleep(10);
                                                }
                                                Thread.Sleep(1000);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)47, (byte)1);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)85, (byte)1, (byte)3, (byte)1);
                                                this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                                Thread.Sleep(1000);
                                            }
                                        }
                                        else
                                        {
                                            if (this.Currentnpctext.StartsWith("Aisling, do."))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You will transform your Work"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)28, (byte)1);
                                            if (this.Currentnpctext.StartsWith("((It costs "))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)30, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You remember that you cannot"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)2, (byte)1);
                                            if (this.Currentnpctext.StartsWith("Do you prostrate yourself"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)80, (byte)1, (byte)2, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You lack experience"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)47, (byte)1);
                                            if (this.Currentnpctext.StartsWith("Do you now descend"))
                                            {
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)85, (byte)1, (byte)3, (byte)1);
                                                this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (this.Tab.AscendOptions.buyto.Checked)
                        {
                            if (this.MapInfo.Number == 435)
                            {
                                if (this.ServerLocation.Y < 27 && this.ServerLocation.Y > 17 && this.ServerLocation.X < 6)
                                    this.WalkToExact(4, 20);
                                else
                                    this.WalkToExact(6, 23);
                            }
                            if (this.MapInfo.Number == 3085)
                            {
                                if (this.Tab.AscendOptions.buytohpvalue.Value > new Decimal(0) && this.Tab.AscendOptions.buytohpvalue.Value > (Decimal)this.Statistics.MaximumHP)
                                    this.WalkToExact(10, 13);
                                else if (this.Tab.AscendOptions.buytompvalue.Value > new Decimal(0) && this.Tab.AscendOptions.buytompvalue.Value > (Decimal)this.Statistics.MaximumMP)
                                    this.WalkToExact(10, 6);
                            }
                            if (this.MapInfo.Number == 3086)
                            {
                                if (this.Tab.AscendOptions.buytohpvalue.Value > new Decimal(0) && this.Tab.AscendOptions.buytohpvalue.Value > (Decimal)this.Statistics.MaximumHP)
                                {
                                    if (this.ServerLocation.Y == 5 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                        this.WalkWithinRange(6, 2, 2);
                                    else if (this.ServerLocation.Y == 6 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                    {
                                        this.WalkWithinRange(6, 9, 2);
                                    }
                                    else
                                    {
                                        Npc npcByName = this.FindNpcByName<Npc>("Deoch");
                                        if (npcByName != null)
                                        {
                                            if (!this.deoch)
                                            {
                                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Deoch Toiseach"]);
                                                this.deoch = true;
                                            }
                                            if (this.Tab.AscendOptions.instantascend.Checked && this.SafeToWalkFast)
                                            {
                                                if (this.Currentnpctext.StartsWith("Aisling, do."))
                                                {
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)28, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)30, (byte)1);
                                                    Thread.Sleep(200);
                                                    int num = (int)Math.Ceiling(((double)this.Tab.AscendOptions.buytohpvalue.Value - (double)this.Statistics.MaximumHP) / 50.0);
                                                    for (int index = 0; index < num; ++index)
                                                    {
                                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)2, (byte)1);
                                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)80, (byte)1, (byte)2, (byte)1);
                                                        Thread.Sleep(10);
                                                    }
                                                    Thread.Sleep(1000);
                                                }
                                            }
                                            else if (this.Currentnpctext.StartsWith("Aisling, do."))
                                            {
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                                Thread.Sleep(1000);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)28, (byte)1);
                                                Thread.Sleep(1000);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)30, (byte)1);
                                                Thread.Sleep(1000);
                                                int num = (int)Math.Ceiling(((double)this.Tab.AscendOptions.buytohpvalue.Value - (double)this.Statistics.MaximumHP) / 50.0);
                                                for (int index = 0; index < num; ++index)
                                                {
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)2, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)80, (byte)1, (byte)2, (byte)1);
                                                    Thread.Sleep(2000);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (this.Tab.AscendOptions.buytompvalue.Value > new Decimal(0) && this.Tab.AscendOptions.buytompvalue.Value > (Decimal)this.Statistics.MaximumMP)
                                {
                                    if (this.Currentnpctext != string.Empty)
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)50, (byte)1);
                                    this.WalkToExact(8, 5);
                                }
                                else if (this.Currentnpctext.StartsWith("You remember that you cannot"))
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Deoch");
                                    if (npcByName != null)
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)85, (byte)1, (byte)3, (byte)1);
                                        if (this.Tab.AscendOptions.buytompvalue.Value == new Decimal(0) || this.Tab.AscendOptions.buytompvalue.Value <= (Decimal)this.Statistics.MaximumMP)
                                            this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                        Thread.Sleep(1000);
                                    }
                                }
                            }
                            if (this.MapInfo.Number == 3087)
                            {
                                if (this.Tab.AscendOptions.buytompvalue.Value > new Decimal(0) && this.Tab.AscendOptions.buytompvalue.Value > (Decimal)this.Statistics.MaximumMP)
                                {
                                    if (this.ServerLocation.Y == 5 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                        this.WalkWithinRange(6, 2, 2);
                                    else if (this.ServerLocation.Y == 6 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                    {
                                        this.WalkWithinRange(6, 9, 2);
                                    }
                                    else
                                    {
                                        Npc npcByName = this.FindNpcByName<Npc>("Gramail");
                                        if (npcByName != null)
                                        {
                                            if (!this.gramail)
                                            {
                                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Gramail Toiseach"]);
                                                this.gramail = true;
                                            }
                                            if (this.Tab.AscendOptions.instantascend.Checked && this.SafeToWalkFast)
                                            {
                                                if (this.Currentnpctext.StartsWith("Aisling, live true."))
                                                {
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)28, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)30, (byte)1);
                                                    Thread.Sleep(200);
                                                    int num = (int)Math.Ceiling(((double)this.Tab.AscendOptions.buytompvalue.Value - (double)this.Statistics.MaximumMP) / 25.0);
                                                    for (int index = 0; index < num; ++index)
                                                    {
                                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)47, (byte)1, (byte)2, (byte)1);
                                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)73, (byte)1, (byte)2, (byte)1);
                                                        Thread.Sleep(10);
                                                    }
                                                    Thread.Sleep(1000);
                                                }
                                            }
                                            else if (this.Currentnpctext.StartsWith("Aisling, live true."))
                                            {
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                                Thread.Sleep(1000);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)28, (byte)1);
                                                Thread.Sleep(1000);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)30, (byte)1);
                                                Thread.Sleep(1000);
                                                int num = (int)Math.Ceiling(((double)this.Tab.AscendOptions.buytompvalue.Value - (double)this.Statistics.MaximumMP) / 25.0);
                                                for (int index = 0; index < num; ++index)
                                                {
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)47, (byte)1, (byte)2, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)73, (byte)1, (byte)2, (byte)1);
                                                    Thread.Sleep(2000);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (this.Tab.AscendOptions.buytohpvalue.Value > new Decimal(0) && this.Tab.AscendOptions.buytohpvalue.Value > (Decimal)this.Statistics.MaximumHP)
                                    this.WalkToExact(8, 6);
                                else if (this.Currentnpctext.StartsWith("You remember that you cannot"))
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Gramail");
                                    if (npcByName != null)
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)47, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)78, (byte)1, (byte)3, (byte)1);
                                        if (this.Tab.AscendOptions.buytohpvalue.Value == new Decimal(0) || this.Tab.AscendOptions.buytohpvalue.Value <= (Decimal)this.Statistics.MaximumHP)
                                            this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                        Thread.Sleep(1000);
                                    }
                                }
                            }
                        }
                        else if (this.Tab.AscendOptions.vascendmp)
                        {
                            if (this.MapInfo.Number == 435)
                            {
                                if (this.ServerLocation.Y < 27 && this.ServerLocation.Y > 17 && this.ServerLocation.X < 6)
                                    this.WalkToExact(4, 20);
                                else
                                    this.WalkToExact(6, 23);
                            }
                            if (this.MapInfo.Number == 3085)
                                this.WalkToExact(10, 6);
                            if (this.MapInfo.Number == 3087)
                            {
                                if (this.ServerLocation.Y == 5 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                    this.WalkWithinRange(6, 2, 2);
                                else if (this.ServerLocation.Y == 6 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                {
                                    this.WalkWithinRange(6, 9, 2);
                                }
                                else
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Gramail");
                                    if (npcByName != null)
                                    {
                                        if (!this.gramail)
                                        {
                                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Gramail Toiseach"]);
                                            this.gramail = true;
                                        }
                                        if (this.Tab.AscendOptions.instantascend.Checked && this.SafeToWalkFast)
                                        {
                                            if (this.Currentnpctext.StartsWith("Aisling, live true."))
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You will transform your Work"))
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)28, (byte)1);
                                            if (this.Currentnpctext.StartsWith("((It costs "))
                                            {
                                                uint num1 = uint.Parse(this.Currentnpctext.Split(' ')[2].ToString());
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)30, (byte)1);
                                                uint num2 = 0;
                                                ulong num3 = 0;
                                                while (true)
                                                {
                                                    num3 += (ulong)(num1 * 500U);
                                                    if (num3 <= (ulong)this.Statistics.Experience)
                                                    {
                                                        num1 += 25U;
                                                        ++num2;
                                                        flag1 = true;
                                                    }
                                                    else
                                                        break;
                                                }
                                                for (uint index = 0; index < num2; ++index)
                                                {
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)47, (byte)1, (byte)2, (byte)1);
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)73, (byte)1, (byte)2, (byte)1);
                                                    Thread.Sleep(10);
                                                }
                                                Thread.Sleep(1000);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)43, (byte)1);
                                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)78, (byte)1, (byte)3, (byte)1);
                                                this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                                Thread.Sleep(1000);
                                            }
                                        }
                                        else
                                        {
                                            if (this.Currentnpctext.StartsWith("Aisling, live true."))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You will transform your Work"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)28, (byte)1);
                                            if (this.Currentnpctext.StartsWith("((It costs "))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)30, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You remember that you cannot"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)47, (byte)1, (byte)2, (byte)1);
                                            if (this.Currentnpctext.StartsWith("Do you prostrate yourself"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)73, (byte)1, (byte)2, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You lack experience"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)43, (byte)1);
                                            if (this.Currentnpctext.StartsWith("Do you now descend"))
                                            {
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gramail Toiseach"], (byte)0, (byte)78, (byte)1, (byte)3, (byte)1);
                                                this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!this.pause && this.Tab.vrescueascender)
                    {
                        Player characterByName = this.FindCharacterByName<Player>(this.Tab.vrescueascendername);
                        if (characterByName != null && characterByName.IsOnScreen && characterByName.Location.DistanceFrom(this.ServerLocation) == 1 && this.CanSkill("Rescue", false))
                            this.UseSkill("Rescue", characterByName.ID);
                    }
                    if (!this.pause && this.Tab.AscendOptions.vbuystatsbtn)
                    {
                        if (this.HasItem("Warranty Bag"))
                        {
                            this.SendMessage("Deposit your Warranty Bag!", (byte)0, false);
                            this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                            goto label_3227;
                        }
                        else
                        {
                            if (this.MapInfo.Number == 435)
                            {
                                if (this.ascendtime != DateTime.MinValue && DateTime.Now.Subtract(this.ascendtime).TotalMinutes < 210.0)
                                {
                                    if (this.ServerLocation.Y < 27 && this.ServerLocation.Y > 17 && this.ServerLocation.X < 6)
                                        this.WalkToExact(4, 20);
                                    else
                                        this.WalkToExact(6, 23);
                                }
                                else
                                {
                                    this.SendMessage("You cannot ascend. (Drop a hair)", (byte)0, false);
                                    this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                }
                            }
                            if (this.MapInfo.Number == 3085)
                                this.WalkToExact(10, 13);
                            if (this.MapInfo.Number == 3086)
                            {
                                if (this.ServerLocation.Y == 5 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                    this.WalkWithinRange(6, 2, 2);
                                else if (this.ServerLocation.Y == 6 && (this.ServerLocation.X == 7 || this.ServerLocation.X == 6))
                                {
                                    this.WalkWithinRange(6, 9, 2);
                                }
                                else
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Deoch");
                                    if (npcByName != null)
                                    {
                                        if (!this.deoch)
                                        {
                                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Deoch Toiseach"]);
                                            this.deoch = true;
                                        }
                                        if (this.Currentnpctext.StartsWith("Aisling, do."))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                        if (this.Currentnpctext.StartsWith("You will transform your Work"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)28, (byte)1);
                                        if (this.Currentnpctext.StartsWith("((It costs "))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)30, (byte)1);
                                        if (this.Currentnpctext.StartsWith("You remember that you cannot"))
                                        {
                                            if ((Decimal)this.Statistics.MaximumHP < (Decimal)this.pathmaxhp + new Decimal(150) * this.Tab.AscendOptions.buynum.Value)
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)2, (byte)1);
                                            else
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)51, (byte)1, (byte)1, (byte)1);
                                        }
                                        if (this.Currentnpctext.StartsWith("Do you prostrate yourself"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)80, (byte)1, (byte)2, (byte)1);
                                        if (this.Currentnpctext.StartsWith("You lack experience"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)47, (byte)1);
                                        if (this.Currentnpctext.StartsWith("Do you now descend"))
                                        {
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Deoch Toiseach"], (byte)0, (byte)85, (byte)1, (byte)3, (byte)1);
                                            this.Tab.AscendOptions.ascendbutton.Text = "Start";
                                        }
                                    }
                                }
                            }
                            if (this.MapInfo.Number == 393 && !this.needsmats)
                            {
                                if (Math.Floor((double)(this.Statistics.MaximumHP - this.pathmaxhp) / 150.0) > 0.0)
                                {
                                    Player characterByName = this.FindCharacterByName<Player>(this.Tab.AscendOptions.rescuername.Text);
                                    if (characterByName != null && characterByName.IsOnScreen && characterByName.Location.DistanceFrom(this.ServerLocation) > 1)
                                    {
                                        this.WalkToPlayer(characterByName.Location.X, characterByName.Location.Y, 1);
                                    }
                                    else
                                    {
                                        Npc npcByName = this.FindNpcByName<Npc>("Aoife");
                                        if (npcByName != null)
                                        {
                                            if (!this.habab)
                                            {
                                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Master Stats"]);
                                                this.habab = true;
                                            }
                                            if (this.Currentnpctext.StartsWith("So, Master Aisling,"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], (byte)0, (byte)38, (byte)1);
                                            if (this.Currentnpctext.StartsWith("Realize that it is through"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], (byte)0, (byte)39, (byte)1);
                                            if (this.Currentnpctext.StartsWith("And you will suffer"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], (byte)0, (byte)40, (byte)1);
                                            if (this.Currentnpctext.StartsWith("Do you wish to"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], (byte)0, (byte)41, (byte)1, (byte)1, (byte)1);
                                            if (this.Currentnpctext.StartsWith("You are too weak"))
                                            {
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], (byte)0, (byte)122, (byte)1);
                                                this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                                goto label_3227;
                                            }
                                            else if (this.Currentnpctext.StartsWith("One of your abilities"))
                                            {
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], (byte)0, (byte)230, (byte)1);
                                                this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                                goto label_3227;
                                            }
                                            else if (this.Currentnpctext.StartsWith("Which Attribute"))
                                            {
                                                byte action = 0;
                                                byte un = 0;
                                                if (this.Path == (byte)3)
                                                    action = (byte)186;
                                                else if (this.Path == (byte)4)
                                                    action = (byte)237;
                                                else if (this.Path == (byte)1)
                                                    action = (byte)84;
                                                else if (this.Path == (byte)2)
                                                    action = (byte)135;
                                                else if (this.Path == (byte)5)
                                                {
                                                    action = (byte)45;
                                                    un = (byte)1;
                                                }
                                                if (this.Tab.AscendOptions.strt.Text != string.Empty && int.Parse(this.Tab.AscendOptions.strt.Text) > 0 && (long)int.Parse(this.Tab.AscendOptions.strt.Text) < (long)this.pathstr)
                                                {
                                                    int num1 = int.Parse(this.Tab.AscendOptions.strl.Text);
                                                    Label strl = this.Tab.AscendOptions.strl;
                                                    int num2 = num1 + 1;
                                                    string str1 = num2.ToString();
                                                    strl.Text = str1;
                                                    int num3 = int.Parse(this.Tab.AscendOptions.strt.Text);
                                                    TextBox strt = this.Tab.AscendOptions.strt;
                                                    num2 = num3 - 1;
                                                    string str2 = num2.ToString();
                                                    strt.Text = str2;
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], un, action, (byte)1, (byte)1, (byte)1);
                                                }
                                                else if (this.Tab.AscendOptions.intt.Text != string.Empty && int.Parse(this.Tab.AscendOptions.intt.Text) > 0 && (long)int.Parse(this.Tab.AscendOptions.intt.Text) < (long)this.pathint)
                                                {
                                                    int num1 = int.Parse(this.Tab.AscendOptions.intl.Text);
                                                    Label intl = this.Tab.AscendOptions.intl;
                                                    int num2 = num1 + 1;
                                                    string str1 = num2.ToString();
                                                    intl.Text = str1;
                                                    int num3 = int.Parse(this.Tab.AscendOptions.intt.Text);
                                                    TextBox intt = this.Tab.AscendOptions.intt;
                                                    num2 = num3 - 1;
                                                    string str2 = num2.ToString();
                                                    intt.Text = str2;
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], un, action, (byte)1, (byte)3, (byte)1);
                                                }
                                                else if (this.Tab.AscendOptions.wist.Text != string.Empty && int.Parse(this.Tab.AscendOptions.wist.Text) > 0 && (long)int.Parse(this.Tab.AscendOptions.wist.Text) < (long)this.pathwis)
                                                {
                                                    int num1 = int.Parse(this.Tab.AscendOptions.wisl.Text);
                                                    Label wisl = this.Tab.AscendOptions.wisl;
                                                    int num2 = num1 + 1;
                                                    string str1 = num2.ToString();
                                                    wisl.Text = str1;
                                                    int num3 = int.Parse(this.Tab.AscendOptions.wist.Text);
                                                    TextBox wist = this.Tab.AscendOptions.wist;
                                                    num2 = num3 - 1;
                                                    string str2 = num2.ToString();
                                                    wist.Text = str2;
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], un, action, (byte)1, (byte)4, (byte)1);
                                                }
                                                else if (this.Tab.AscendOptions.cont.Text != string.Empty && int.Parse(this.Tab.AscendOptions.cont.Text) > 0 && (long)int.Parse(this.Tab.AscendOptions.cont.Text) < (long)this.pathcon)
                                                {
                                                    int num1 = int.Parse(this.Tab.AscendOptions.conl.Text);
                                                    Label conl = this.Tab.AscendOptions.conl;
                                                    int num2 = num1 + 1;
                                                    string str1 = num2.ToString();
                                                    conl.Text = str1;
                                                    int num3 = int.Parse(this.Tab.AscendOptions.cont.Text);
                                                    TextBox cont = this.Tab.AscendOptions.cont;
                                                    num2 = num3 - 1;
                                                    string str2 = num2.ToString();
                                                    cont.Text = str2;
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], un, action, (byte)1, (byte)2, (byte)1);
                                                }
                                                else if (this.Tab.AscendOptions.dext.Text != string.Empty && int.Parse(this.Tab.AscendOptions.dext.Text) > 0 && (long)int.Parse(this.Tab.AscendOptions.dext.Text) < (long)this.pathdex)
                                                {
                                                    int num1 = int.Parse(this.Tab.AscendOptions.dexl.Text);
                                                    Label dexl = this.Tab.AscendOptions.dexl;
                                                    int num2 = num1 + 1;
                                                    string str1 = num2.ToString();
                                                    dexl.Text = str1;
                                                    int num3 = int.Parse(this.Tab.AscendOptions.dext.Text);
                                                    TextBox dext = this.Tab.AscendOptions.dext;
                                                    num2 = num3 - 1;
                                                    string str2 = num2.ToString();
                                                    dext.Text = str2;
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Master Stats"], un, action, (byte)1, (byte)5, (byte)1);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (this.ascendtime == DateTime.MinValue || DateTime.Now.Subtract(this.ascendtime).TotalMinutes > 210.0)
                                {
                                    this.SendMessage("You need to drop a Succubus Hair in Mileth Altar.", (byte)0, false);
                                    this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                    goto label_3227;
                                }
                                else if (this.Tab.AscendOptions.canaffordonestat())
                                {
                                    Player characterByName = this.FindCharacterByName<Player>(this.Tab.AscendOptions.rescuername.Text);
                                    if (characterByName != null && characterByName.IsOnScreen && characterByName.Location.DistanceFrom(this.ServerLocation) > 1)
                                        this.WalkToPlayer(characterByName.Location.X, characterByName.Location.Y, 1);
                                    else if (characterByName != null && characterByName.IsOnScreen && characterByName.Location.DistanceFrom(this.ServerLocation) == 1)
                                    {
                                        if (this.ascendtime != DateTime.MinValue && DateTime.Now.Subtract(this.ascendtime).TotalMinutes < 210.0)
                                        {
                                            if (this.rescuedtime != DateTime.MinValue && DateTime.UtcNow.Subtract(this.rescuedtime).TotalSeconds < 30.0)
                                            {
                                                this.SendMessage("", (byte)18, false);
                                                if (this.HasItem("Hemloch"))
                                                {
                                                    if (this.HasItem("Wine"))
                                                    {
                                                        this.UseItem("Hemloch");
                                                        this.UseItem("Wine");
                                                        Thread.Sleep(2000);
                                                    }
                                                    else if (this.HasItem("Rum"))
                                                    {
                                                        this.UseItem("Hemloch");
                                                        this.UseItem("Rum");
                                                        Thread.Sleep(2000);
                                                    }
                                                    else if (this.HasItem("Brandy"))
                                                    {
                                                        this.UseItem("Hemloch");
                                                        this.UseItem("Brandy");
                                                        Thread.Sleep(2000);
                                                    }
                                                    else if (this.HasItem("Satchel of hemloch"))
                                                    {
                                                        this.UseItem("Satchel of hemloch");
                                                        this.UseItem("Rum");
                                                    }
                                                    else if (this.HasItem("wine"))
                                                    {
                                                        this.UseItem("Satchel of Hemloch");
                                                        this.UseItem("wine");
                                                    }
                                                    else if (this.HasItem("Brandy"))
                                                    {
                                                        this.UseItem("Satchel of Hemloch");
                                                        this.UseItem("Brandy");
                                                    }
                                                    else if (this.Tab.AscendOptions.vwithdrawwine)
                                                    {
                                                        this.needsmats = true;
                                                    }
                                                    else
                                                    {
                                                        this.SendMessage("Out of Drink", (byte)0, false);
                                                        if (this.MapInfo.Number == 393)
                                                            this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                                    }
                                                }
                                                else if (this.Tab.AscendOptions.vwithdrawhem)
                                                {
                                                    this.needsmats = true;
                                                }
                                                else
                                                {
                                                    this.SendMessage("Out of Hemloch", (byte)0, false);
                                                    if (this.MapInfo.Number == 393)
                                                        this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                                }
                                            }
                                            else
                                                this.SendMessage("Waiting for Rescue", (byte)18, false);
                                        }
                                        else
                                        {
                                            this.SendMessage("Drop a hair", (byte)0, false);
                                            this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                        }
                                    }
                                }
                                else
                                {
                                    this.SendMessage("All done!", (byte)0, false);
                                    this.Tab.AscendOptions.buystatsbtn.Text = "Start";
                                }
                            }
                            else if (this.MapInfo.Number == 393 && this.needsmats)
                                this.WalkToExact(11, 6);
                            else if (this.MapInfo.Number == 500 && this.needsmats)
                                this.WalkToExact(54, 69);
                            else if (this.MapInfo.Number == 135 && this.needsmats)
                            {
                                if (this.ItemAmount("Wine") == 0U)
                                {
                                    this.Withdraw("Wine", 15);
                                    this.needsmats = false;
                                }
                                if (this.ItemAmount("Hemloch") == 0U)
                                {
                                    this.Withdraw("Hemloch", 30);
                                    this.needsmats = false;
                                }
                            }
                            else if (this.MapInfo.Number == 135)
                                this.WalkToExact(5, 11);
                            else if (this.MapInfo.Number == 500)
                                this.WalkToExact(93, 13);
                            else if (this.MapInfo.Number == 3006)
                            {
                                if (this.ServerLocation.Y <= 9 && this.ServerLocation.Y >= 4)
                                    this.WalkToExact(0, this.ServerLocation.Y);
                                else if (this.ServerLocation.Y > 9)
                                    this.WalkToExact(0, 9);
                                else if (this.ServerLocation.Y < 4)
                                    this.WalkToExact(0, 4);
                            }
                            else if (this.MapInfo.Number == 3079 && this.ServerLocation.Y == 1)
                                this.WalkToExact(this.ServerLocation.X, 2);
                            else if (this.MapInfo.Number == 3079 && this.ServerLocation.Y == 5)
                                this.WalkToExact(this.ServerLocation.X, 6);
                        }
                    }
                    if (this.buyfiorsrads && this.Statistics.Gold > 500U)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Braz");
                        if (npcByName != null && this.ItemAmount("fior srad") < 30U)
                        {
                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Buy Fior"]);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Fior"], (byte)0, (byte)6, (byte)1);
                            for (int index = (int)this.ItemAmount("fior srad"); index < 30; ++index)
                            {
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Fior"], (byte)0, (byte)15, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(50);
                            }
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Fior"], (byte)0, (byte)14, (byte)1);
                            this.buyfiorsrads = false;
                        }
                    }
                    if (this.MapInfo.Number == 10055 && this.Statistics.Gold > 1000U)
                    {
                        if (this.Tab.vautobuykoms && this.DistanceFrom(this.poiloc) < 21 && DateTime.UtcNow.Subtract(this.newmapdelay).TotalMilliseconds > (double)this.RandomNumber(1200, 1500))
                            this.BuyItem("Komadium", 52U - this.ItemCount("Komadium"));
                        if (this.Tab.vautobuyhems && (this.DistanceFrom(this.poiloc) < 21 || this.DistanceFrom(this.muettaloc) < 21))
                            this.BuyItem("Hemloch", 30U - this.ItemCount("Hemloch"));
                    }
                    if (this.losterbiedelay != DateTime.MinValue && DateTime.UtcNow.Subtract(this.losterbiedelay).TotalSeconds > 180.0)
                    {
                        this.losterbiedelay = DateTime.MinValue;
                        this.SendMessage("You can catch another erbie now.", "pink", false);
                    }
                    if (!this.pause && this.frostygift)
                    {
                        if (this.Statistics.Level < 99)
                        {
                            this.SendMessage("Not level 99, logging off in 5 seconds.", "red", false);
                            this.autowalkon = false;
                            Thread.Sleep(5000);
                            this.LogOff();
                        }
                        if (!this.autowalkon && this.MapInfo.Number == 3271 && !this.InventoryIsFull())
                        {
                            Npc npcByName1 = this.FindNpcByName<Npc>("Frosty3");
                            if (npcByName1 != null)
                            {
                                this.ClickNpc(npcByName1.ID);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                                this.PopupClose(new uint?(npcByName1.ID), (byte)1);
                                this.frostygift = false;
                                Thread.Sleep(2000);
                                this.LogOff();
                            }
                            Npc npcByName2 = this.FindNpcByName<Npc>("Nadia");
                            if (npcByName2 != null)
                            {
                                this.ClickNpc(npcByName2.ID);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                                this.PopupNext(new uint?(npcByName2.ID), (byte)1);
                                this.PopupClose(new uint?(npcByName2.ID), (byte)1);
                                this.frostygift = false;
                                Thread.Sleep(2000);
                                this.LogOff();
                            }
                            Npc npcByName3 = this.FindNpcByName<Npc>("Chang");
                            if (npcByName3 != null)
                            {
                                this.ClickNpc(npcByName3.ID);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                                this.PopupNext(new uint?(npcByName3.ID), (byte)1);
                                this.PopupNext(new uint?(npcByName3.ID), (byte)1);
                                this.PopupNext(new uint?(npcByName3.ID), (byte)1);
                                this.frostygift = false;
                                Thread.Sleep(4000);
                                this.LogOff();
                            }
                        }
                    }
                    if (this.HasItem("Yule Log") && this.HasItem("fior srad") && !this.autowalkon)
                    {
                        Npc npc = (Npc)null;
                        if (this.MapInfo.Number == 136 && !this.yulemileth)
                            npc = this.FindNpcByName<Npc>("Riona");
                        if (this.MapInfo.Number == 169 && !this.yuleabel)
                            npc = this.FindNpcByName<Npc>("Runa");
                        if (this.MapInfo.Number == 150 && !this.yulepiet)
                            npc = this.FindNpcByName<Npc>("Saskia");
                        if (this.MapInfo.Number == 498 && !this.yuleruc)
                            npc = this.FindNpcByName<Npc>("Maria");
                        if (this.MapInfo.Number == 1960 && !this.yuletagor)
                            npc = this.FindNpcByName<Npc>("Dorina");
                        if (this.MapInfo.Number == 950 && !this.yulesuomi)
                            npc = this.FindNpcByName<Npc>("Eeva");
                        if (npc != null)
                        {
                            this.Speak("Yule Log", 0);
                            while (this.Currentnpctext == string.Empty)
                                Thread.Sleep(100);
                            if (this.Currentnpctext.StartsWith("Thank you for the yule log, aisling"))
                            {
                                this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                if (npc.Name == "Riona")
                                {
                                    this.yulemileth = true;
                                    this.SendMessage("mileth done", (byte)0, false);
                                }
                                else if (npc.Name == "Runa")
                                {
                                    this.yuleabel = true;
                                    this.SendMessage("abel done", (byte)0, false);
                                }
                                else if (npc.Name == "Saskia")
                                {
                                    this.yulepiet = true;
                                    this.SendMessage("piet done", (byte)0, false);
                                }
                                else if (npc.Name == "Maria")
                                {
                                    this.yuleruc = true;
                                    this.SendMessage("rucesion done", (byte)0, false);
                                }
                                else if (npc.Name == "Dorina")
                                {
                                    this.yuletagor = true;
                                    this.SendMessage("tagor done", (byte)0, false);
                                }
                                else if (npc.Name == "Eeva")
                                {
                                    this.yulesuomi = true;
                                    this.SendMessage("suomi done", (byte)0, false);
                                }
                                if (!this.yuleruc)
                                {
                                    this.Tab.autowalker_locales.Text = "Rucesion";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yuleabel)
                                {
                                    this.Tab.autowalker_locales.Text = "Abel";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yulepiet)
                                {
                                    this.Tab.autowalker_locales.Text = "Piet";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yuletagor)
                                {
                                    this.Tab.autowalker_locales.Text = "Tagor";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yulemileth)
                                {
                                    if (this.HasItem("Abel Song") && this.MapInfo.Number == 1960)
                                    {
                                        this.UseItem("Abel Song");
                                        Thread.Sleep(1000);
                                    }
                                    else if (this.HasItem("Mileth Song") && this.MapInfo.Number == 1960)
                                    {
                                        this.UseItem("Mileth Song");
                                        Thread.Sleep(1000);
                                    }
                                    this.Tab.autowalker_locales.Text = "Mileth";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yulesuomi)
                                {
                                    if (this.HasItem("Suomi Song"))
                                        this.UseItem("Suomi Song");
                                    this.Tab.autowalker_locales.Text = "Suomi";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else
                                {
                                    this.Tab.autowalker_locales.Text = "Suomi";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Weapon Shop";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                    this.yulequest = true;
                                    this.LastnpcpopupID = 0U;
                                }
                            }
                            if (this.Currentnpctext.StartsWith("*shivers* Aisling,"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 8; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                if (npc.Name == "Riona")
                                {
                                    this.yulemileth = true;
                                    this.SendMessage("mileth done", (byte)0, false);
                                }
                                else if (npc.Name == "Runa")
                                {
                                    this.yuleabel = true;
                                    this.SendMessage("abel done", (byte)0, false);
                                }
                                else if (npc.Name == "Saskia")
                                {
                                    this.yulepiet = true;
                                    this.SendMessage("piet done", (byte)0, false);
                                }
                                else if (npc.Name == "Maria")
                                {
                                    this.yuleruc = true;
                                    this.SendMessage("rucesion done", (byte)0, false);
                                }
                                else if (npc.Name == "Dorina")
                                {
                                    this.yuletagor = true;
                                    this.SendMessage("tagor done", (byte)0, false);
                                }
                                else if (npc.Name == "Eeva")
                                {
                                    this.yulesuomi = true;
                                    this.SendMessage("suomi done", (byte)0, false);
                                }
                                if (!this.yuleruc)
                                {
                                    this.Tab.autowalker_locales.Text = "Rucesion";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yuleabel)
                                {
                                    this.Tab.autowalker_locales.Text = "Abel";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yulepiet)
                                {
                                    this.Tab.autowalker_locales.Text = "Piet";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yuletagor)
                                {
                                    this.Tab.autowalker_locales.Text = "Tagor";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yulemileth)
                                {
                                    if (this.HasItem("Abel Song") && this.MapInfo.Number == 1960)
                                    {
                                        this.UseItem("Abel Song");
                                        Thread.Sleep(1000);
                                    }
                                    else if (this.HasItem("Mileth Song") && this.MapInfo.Number == 1960)
                                    {
                                        this.UseItem("Mileth Song");
                                        Thread.Sleep(1000);
                                    }
                                    this.Tab.autowalker_locales.Text = "Mileth";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else if (!this.yulesuomi)
                                {
                                    if (this.HasItem("Suomi Song"))
                                    {
                                        this.UseItem("Suomi Song");
                                        Thread.Sleep(1000);
                                    }
                                    this.Tab.autowalker_locales.Text = "Suomi";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                }
                                else
                                {
                                    this.Tab.autowalker_locales.Text = "Suomi";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Weapon Shop";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.Tab.fastwalk.Checked = true;
                                    this.pause = false;
                                    this.Tab.btnPlay.Enabled = false;
                                    this.Tab.btnStop.Enabled = true;
                                    this.yulequest = true;
                                    this.LastnpcpopupID = 0U;
                                }
                            }
                        }
                    }
                    if (this.MapInfo.Number == 410 && !this.autowalkon && !this.pause)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Torbjorn");
                        if (npcByName != null && (int)this.LastnpcpopupID != (int)npcByName.ID && this.yulequest)
                        {
                            this.DialogueRespond(npcByName.ID, (ushort)1786);
                            this.LastnpcpopupID = npcByName.ID;
                        }
                    }
                    if (this.Currentnpctext.StartsWith("Aisling, do you feel the cold winter wind?"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                        this.SendMessage("Go to Mount Giragan and get logs", (byte)0, false);
                        this.Tab.autowalker_locales.Text = "Mount Giragan";
                        this.Tab.walklocaleslist.SelectedItem = (object)"Mtg 1";
                        this.Tab.autowalker_button.Text = "Stop";
                        this.autowalkon = true;
                        this.Tab.mediumwalk.Checked = true;
                        this.pause = false;
                        this.Tab.btnPlay.Enabled = false;
                        this.Tab.btnStop.Enabled = true;
                        Thread.Sleep(1000);
                        if (this.HasItem("Torbjorn's Axe"))
                            this.UseItem("Torbjorn's Axe");
                    }
                    if (this.Currentnpctext.StartsWith("Excellent! Now, here. Take this "))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                        if (this.HasItem("fior srad") && this.ItemAmount("fior srad") >= 6U)
                        {
                            this.SendMessage("Walking to inns", (byte)0, false);
                            this.Tab.autowalker_locales.Text = "Suomi";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                        }
                        else
                            this.SendMessage("Get fiors and go to inns", (byte)0, false);
                    }
                    if (this.Currentnpctext.StartsWith("Aisling, you have shown such generosity"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        for (int index = 0; index < 5; ++index)
                        {
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(10);
                        }
                        this.SaveTimedStuff(35);
                        this.yulequest = false;
                        this.SendMessage("Yule Quest Complete!", (byte)0, false);
                    }
                    if (this.Currentnpctext.StartsWith("The inns of Temuair and the people inside are warm"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                        this.SendMessage("Can't do it yet", (byte)0, false);
                    }
                    if (!this.pause && this.learnswim && this.MapInfo.Number == 136 && !this.autowalkon)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Riona");
                        if (npcByName != null && npcByName.IsOnScreen)
                        {
                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Swimming"]);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            Thread.Sleep(1000);
                            this.learnswim = false;
                            this.Tab.autowalker_locales.SelectedItem = (object)"Lynith";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Paradise";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                        }
                    }
                    if (!this.pause && this.claimsunprotection && (this.MapInfo.Number == 3271 && !this.autowalkon) && !this.InventoryIsFull())
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Francis");
                        if (npcByName != null && npcByName.IsOnScreen)
                        {
                            this.DialogueRespond(npcByName.ID, (ushort)1807);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            Thread.Sleep(1000);
                            this.claimsunprotection = false;
                        }
                    }
                    if (!this.pause && this.claimbeachattire && (this.MapInfo.Number == 7900 && !this.autowalkon) && !this.InventoryIsFull())
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Ruba");
                        if (npcByName != null && npcByName.IsOnScreen)
                        {
                            this.DialogueRespond(npcByName.ID, (ushort)2068);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            Thread.Sleep(1000);
                            this.claimbeachattire = false;
                        }
                    }
                    if (!this.pause && !this.autowalkon && this.MapInfo.Number == 192 && this.makeawish)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Naomhan");
                        if (npcByName != null)
                        {
                            this.DialogueRespond(npcByName.ID, (ushort)1544);
                            for (int index = 0; index < 17; ++index)
                            {
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                Thread.Sleep(10);
                            }
                            this.PopupRespond(new uint?(npcByName.ID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            this.PopupNext(new uint?(npcByName.ID), (byte)1);
                            this.PopupClose(new uint?(npcByName.ID), (byte)1);
                            this.SendMessage("Go to fountain and pick your wish", "orange", false);
                            this.makeawish = false;
                            Thread.Sleep(1000);
                        }
                    }
                    if (this.MapInfo.Number == 3029)
                    {
                        if (this.Currentnpctext.StartsWith("Welcome to Dark Ages : "))
                        {
                            this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)4);
                            this.Tab.fastwalk.Checked = true;
                            this.Tab.usemonster.Checked = true;
                            this.walktut = true;
                            if (!this.BotThread.IsAlive)
                                this.BotThread.Start();
                            this.pause = false;
                            this.Tab.btnPlay.Enabled = false;
                            this.Tab.btnStop.Enabled = true;
                            Thread.Sleep(1000);
                        }
                        if (!this.pause && this.walktut && this.Currentnpctext == "" && (this.ServerLocation.X != 49 || this.ServerLocation.Y != 30))
                            this.WalkToExact(49, 30);
                        if (this.Currentnpctext.StartsWith("You are about to leave the "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)3, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)11, (byte)1, (byte)1, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)19, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)49, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)109, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Tutorial Exit"], (byte)0, (byte)42, (byte)4);
                            Thread.Sleep(1000);
                        }
                    }
                    if (this.MapInfo.Number == 3000)
                    {
                        if (!this.pause && this.walktut && this.Currentnpctext == "" && (this.ServerLocation.X != 2 || this.ServerLocation.Y != 5))
                            this.WalkToExact(2, 5);
                        if (this.Currentnpctext.StartsWith("You rub your eyes..."))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Wake Up"], (byte)0, (byte)52, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Wake Up"], (byte)0, (byte)66, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Wake Up"], (byte)0, (byte)69, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Wake Up"], (byte)0, (byte)72, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Wake Up"], (byte)0, (byte)75, (byte)4);
                            Thread.Sleep(1000);
                            this.walktut = false;
                        }
                        if (!this.pause && !this.walktut && this.Currentnpctext == "" && (this.ServerLocation.X != 4 || this.ServerLocation.Y != 7))
                        {
                            this.WalkToExact(4, 7);
                            this.walktut = true;
                        }
                    }
                    if (this.MapInfo.Number == 136 && this.walktut)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Riona");
                        if (npcByName != null)
                        {
                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Riona's Greeting"]);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)26, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)27, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)28, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)29, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)31, (byte)1, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)41, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)42, (byte)1, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)52, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)54, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)55, (byte)1);
                            Thread.Sleep(1000);
                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Riona's Greeting"]);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)31, (byte)1, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)41, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)42, (byte)1, (byte)2, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)52, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)54, (byte)1);
                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Riona's Greeting"], (byte)0, (byte)55, (byte)1);
                            this.walktut = false;
                            Thread.Sleep(1000);
                        }
                    }
                    if (!this.pause && !this.autowalkon)
                    {
                        if (this.warrior && this.MapInfo.Number == 347)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Neal");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Warrior"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Warrior"], (byte)0, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Warrior"], (byte)0, (byte)60, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Warrior"], (byte)0, (byte)173, (byte)1);
                                this.rogue = false;
                            }
                        }
                        if (this.rogue && this.MapInfo.Number == 346)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Keefe");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Rogue"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Rogue"], (byte)0, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Rogue"], (byte)0, (byte)57, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Rogue"], (byte)0, (byte)170, (byte)1);
                                this.rogue = false;
                            }
                        }
                        if (this.monk && this.MapInfo.Number == 348)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Donnan");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Monk"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Monk"], (byte)0, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Monk"], (byte)0, (byte)60, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Monk"], (byte)0, (byte)174, (byte)1);
                                this.monk = false;
                            }
                        }
                        if (this.priest && this.MapInfo.Number == 345)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Erin");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Priest"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Priest"], (byte)0, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Priest"], (byte)0, (byte)60, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Priest"], (byte)0, (byte)174, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Priest"], (byte)0, (byte)175, (byte)1);
                                this.rogue = false;
                            }
                        }
                        if (this.wizard && this.MapInfo.Number == 398)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Logan");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Wizard"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Wizard"], (byte)0, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Wizard"], (byte)0, (byte)63, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Wizard"], (byte)0, (byte)176, (byte)1);
                                this.rogue = false;
                            }
                        }
                    }
                    if (this.pause || !this.Tab.altar.Checked || this.Currentnpctext.StartsWith("There are spaces in between time,") || !(this.Currentnpctext != string.Empty))
                        ;
                    if (!this.pause && this.Tab.altar.Checked && (this.altartimer == DateTime.MinValue || DateTime.Now.Subtract(this.altartimer).TotalHours >= 3.01))
                    {
                        if (this.MapInfo.Number == 500)
                        {
                            if (this.HasItem("Wine"))
                            {
                                if (this.WithinRange(31, 53, 3))
                                {
                                    this.Drop(31, 53, this.ItemSlot("Wine"), 1);
                                    this.SaveTimedStuff(36);
                                    Thread.Sleep(1000);
                                }
                                else
                                    this.WalkWithinRange(31, 53, 3);
                            }
                            else
                                this.WalkToExact(54, 69);
                        }
                        if (this.MapInfo.Number == 135)
                        {
                            if (!this.HasItem("Wine"))
                            {
                                this.Withdraw("Wine", 15);
                                Thread.Sleep(1000);
                            }
                            else
                                this.WalkToExact(5, 11);
                        }
                    }
                    if (this.slabquest && this.MapInfo.Number == 10266 && !this.autowalkon)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Cheung");
                        if (npcByName != null && npcByName.IsOnScreen)
                        {
                            this.Speak("marble slab", 0);
                            while (this.Currentnpctext == string.Empty)
                                Thread.Sleep(100);
                        }
                        if (this.Currentnpctext.StartsWith("I don't have any, but I know where you can find some."))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            for (int index = 0; index < 6; ++index)
                            {
                                this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(10);
                            }
                            Thread.Sleep(1000);
                            this.slabquest = false;
                            this.Tab.autowalker_locales.SelectedItem = (object)"Lost Ruins";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Nairn";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                        }
                        else if (this.Currentnpctext.Equals("You seem confused."))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            for (int index = 0; index < 3; ++index)
                            {
                                this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(10);
                            }
                            Thread.Sleep(1000);
                            this.slabquest = false;
                            this.Tab.autowalker_locales.SelectedItem = (object)"Lost Ruins";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Nairn";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                        }
                    }
                    if (this.darkmaze && !this.autowalkon)
                    {
                        if (this.MapInfo.Number == 378)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Marlin");
                            if (npcByName != null && npcByName.IsOnScreen && (int)this.LastnpcpopupID != (int)npcByName.ID)
                            {
                                if (this.darkmazequest == 0)
                                {
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["From The Heart"]);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)20, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)37, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)41, (byte)1);
                                    Thread.Sleep(1000);
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["From The Heart"]);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)20, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)37, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)44, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)51, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)51, (byte)1);
                                    Thread.Sleep(1000);
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["From The Heart"]);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)20, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)27, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)29, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)55, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)65, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)55, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)62, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)55, (byte)1, (byte)3, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)69, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)55, (byte)1, (byte)4, (byte)1);
                                    this.darkmazequest = 1;
                                    Thread.Sleep(1000);
                                    this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Jean";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                                if (this.darkmazequest == 3)
                                {
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["From The Heart"]);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)84, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)105, (byte)1, (byte)3, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)121, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["From The Heart"], (byte)0, (byte)130, (byte)1);
                                    this.darkmazequest = 4;
                                    this.darkmaze = false;
                                    Thread.Sleep(1000);
                                    this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Dark Maze";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                            }
                        }
                        if (this.MapInfo.Number == 124)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Jean");
                            if (npcByName != null && npcByName.IsOnScreen && (int)this.LastnpcpopupID != (int)npcByName.ID && this.darkmazequest == 1)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Cycle of Becoming"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)3, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)20, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)21, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)22, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)36, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)40, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)41, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)52, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)56, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)57, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)36, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)61, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)66, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Cycle of Becoming"], (byte)0, (byte)35, (byte)1);
                                this.darkmazequest = 2;
                                Thread.Sleep(1000);
                                if (this.HasItem("Loures Song"))
                                {
                                    this.UseItem("Loures Song");
                                    Thread.Sleep(1000);
                                }
                                else if (this.HasItem("Abel Song"))
                                {
                                    this.UseItem("Abel Song");
                                    Thread.Sleep(1000);
                                }
                                if (this.HasItem("beothaich deum") || this.HasItem("Red Potion"))
                                {
                                    this.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Enchanted Garden";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                                else
                                    this.SendMessage("You need a beothaich for the next step.", (byte)0, false);
                            }
                        }
                        if (this.MapInfo.Number == 622 && this.darkmazequest == 2)
                        {
                            this.WalkToExact(81, 8);
                            if (this.Currentnpctext.StartsWith("You notice what appears to"))
                            {
                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Dancing Faerie"], (byte)0, (byte)4, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(1000);
                            }
                            if (this.Currentnpctext.StartsWith("You wait but nothing appears"))
                            {
                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Dancing Faerie"], (byte)0, (byte)40, (byte)1, (byte)2, (byte)1);
                                Thread.Sleep(1000);
                            }
                            if (this.Currentnpctext.StartsWith("*peeks* Are all the mundanes away?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Dancing Faerie"], (byte)0, (byte)35, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Dancing Faerie"], (byte)0, (byte)91, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Dancing Faerie"], (byte)0, (byte)101, (byte)1);
                                this.darkmazequest = 3;
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Dungeon (aite)";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                            }
                        }
                    }
                    if (this.theletter && !this.autowalkon && this.GroupMembers.Count<string>() > 0 && this.GroupIsInRange(7))
                    {
                        if (this.MapInfo.Number == 129)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Oona");
                            if (npcByName != null)
                            {
                                if (this.Gender == (byte)0 && this.letterquest == 1)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower())
                                        {
                                            client.Tab.autowalker_button.Text = "Start";
                                            client.autowalkon = false;
                                        }
                                    }
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["The Letter"]);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)19, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)20, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)28, (byte)2, this.GroupMembers[0], (byte)1);
                                    this.letterquest = 2;
                                }
                                if (this.Gender == (byte)1 && this.letterquest == 1)
                                {
                                    if (this.Currentnpctext.Contains("If you aided him,"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)59, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)60, (byte)1, (byte)2, (byte)1);
                                    }
                                    else if (this.Currentnpctext.Contains("Frida of Abel"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)157, (byte)1);
                                        Thread.Sleep(1000);
                                        this.letterquest = 2;
                                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                        {
                                            if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                            {
                                                client.Tab.mediumwalk.Checked = true;
                                                client.Tab.autowalker_locales.SelectedItem = (object)"Abel";
                                                client.Tab.walklocaleslist.SelectedItem = (object)"Tavern";
                                                client.Tab.autowalker_button.Text = "Stop";
                                                client.autowalkon = true;
                                                client.letterquest = 2;
                                                if (client.HasItem("Abel Song"))
                                                    client.UseItem("Abel Song");
                                                else if (client.HasItem("Loures Song"))
                                                    client.UseItem("Loures Song");
                                            }
                                        }
                                    }
                                    else if (this.Currentnpctext.Contains("Aoife dwell."))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)144, (byte)1);
                                        Thread.Sleep(1000);
                                        this.letterquest = 2;
                                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                        {
                                            if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                            {
                                                client.Tab.mediumwalk.Checked = true;
                                                client.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                                client.Tab.walklocaleslist.SelectedItem = (object)"Temple of Choosing";
                                                client.Tab.autowalker_button.Text = "Stop";
                                                client.autowalkon = true;
                                                client.letterquest = 2;
                                            }
                                        }
                                    }
                                    else if (this.Currentnpctext.Contains("Riona scarcely"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)133, (byte)1);
                                        Thread.Sleep(1000);
                                        this.letterquest = 2;
                                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                        {
                                            if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                            {
                                                client.Tab.mediumwalk.Checked = true;
                                                client.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                                client.Tab.walklocaleslist.SelectedItem = (object)"Inn";
                                                client.Tab.autowalker_button.Text = "Stop";
                                                client.autowalkon = true;
                                                client.letterquest = 2;
                                            }
                                        }
                                    }
                                    else if (this.Currentnpctext.Contains("Duana"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter"], (byte)0, (byte)168, (byte)1);
                                        Thread.Sleep(1000);
                                        this.letterquest = 2;
                                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                        {
                                            if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                            {
                                                client.Tab.mediumwalk.Checked = true;
                                                client.Tab.autowalker_locales.SelectedItem = (object)"Mileth";
                                                client.Tab.walklocaleslist.SelectedItem = (object)"Tavern";
                                                client.Tab.autowalker_button.Text = "Stop";
                                                client.autowalkon = true;
                                                client.letterquest = 2;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 168)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Frida");
                            if (npcByName != null)
                            {
                                if (this.Gender == (byte)1 && this.letterquest == 6)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)186, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)187, (byte)1);
                                            this.theletter = false;
                                            this.SaveTimedStuff(33);
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)1 && this.letterquest < 3)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)63, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)64, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)66, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)67, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)70, (byte)1, (byte)6, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)106, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)108, (byte)1);
                                            this.letterquest = 3;
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)0 && this.letterquest < 3 && this.Currentnpctext != "")
                                {
                                    int num = 0;
                                    if (this.Currentnpctext.Contains("Courtney"))
                                    {
                                        this.lettercourtney = true;
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)176, (byte)1);
                                        num = 1;
                                    }
                                    else if (this.Currentnpctext.Contains("Lowell"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)147, (byte)1);
                                        num = 2;
                                    }
                                    else if (this.Currentnpctext.Contains("Marlon"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)132, (byte)1);
                                        num = 3;
                                    }
                                    else if (this.Currentnpctext.Contains("Thibault"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Frida)"], (byte)0, (byte)162, (byte)1);
                                        num = 4;
                                    }
                                    Thread.Sleep(1000);
                                    this.letterquest = 3;
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                        {
                                            client.Tab.mediumwalk.Checked = true;
                                            client.letterquest = 3;
                                            client.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                            switch (num)
                                            {
                                                case 1:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                                case 2:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"2nd Floor Weapon";
                                                    break;
                                                case 3:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"1st Floor Weapon";
                                                    break;
                                                case 4:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                            }
                                            client.Tab.autowalker_button.Text = "Stop";
                                            client.autowalkon = true;
                                            client.letterquest = 3;
                                            if (client.HasItem("Loures Song"))
                                                client.UseItem("Loures Song");
                                            else if (client.HasItem("Abel Song"))
                                                client.UseItem("Abel Song");
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 393)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Aoife");
                            if (npcByName != null)
                            {
                                if (this.Gender == (byte)1 && this.letterquest == 6)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)186, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)187, (byte)1);
                                            this.theletter = false;
                                            this.SaveTimedStuff(33);
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)1 && this.letterquest < 3)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)63, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)64, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)66, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)67, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)70, (byte)1, (byte)6, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)106, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)108, (byte)1);
                                            this.letterquest = 3;
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)0 && this.letterquest < 3 && this.Currentnpctext != "")
                                {
                                    int num = 0;
                                    if (this.Currentnpctext.Contains("Courtney"))
                                    {
                                        this.lettercourtney = true;
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)176, (byte)1);
                                        num = 1;
                                    }
                                    else if (this.Currentnpctext.Contains("Lowell"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)147, (byte)1);
                                        num = 2;
                                    }
                                    else if (this.Currentnpctext.Contains("Marlon"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)132, (byte)1);
                                        num = 3;
                                    }
                                    else if (this.Currentnpctext.Contains("Thibault"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Aoife)"], (byte)0, (byte)162, (byte)1);
                                        num = 4;
                                    }
                                    Thread.Sleep(1000);
                                    this.letterquest = 3;
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                        {
                                            client.Tab.mediumwalk.Checked = true;
                                            client.letterquest = 3;
                                            client.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                            switch (num)
                                            {
                                                case 1:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                                case 2:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"2nd Floor Weapon";
                                                    break;
                                                case 3:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"1st Floor Weapon";
                                                    break;
                                                case 4:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                            }
                                            client.Tab.autowalker_button.Text = "Stop";
                                            client.autowalkon = true;
                                            client.letterquest = 3;
                                            if (client.HasItem("Loures Song"))
                                                client.UseItem("Loures Song");
                                            else if (client.HasItem("Abel Song"))
                                                client.UseItem("Abel Song");
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 134)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Duana");
                            if (npcByName != null)
                            {
                                if (this.Gender == (byte)1 && this.letterquest == 6)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)186, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)187, (byte)1);
                                            this.theletter = false;
                                            this.SaveTimedStuff(33);
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)1 && this.letterquest < 3)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)63, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)64, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)66, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)67, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)70, (byte)1, (byte)6, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)106, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)108, (byte)1);
                                            this.letterquest = 3;
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)0 && this.letterquest < 3 && this.Currentnpctext != "")
                                {
                                    int num = 0;
                                    if (this.Currentnpctext.Contains("Courtney"))
                                    {
                                        this.lettercourtney = true;
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)176, (byte)1);
                                        num = 1;
                                    }
                                    else if (this.Currentnpctext.Contains("Lowell"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)147, (byte)1);
                                        num = 2;
                                    }
                                    else if (this.Currentnpctext.Contains("Marlon"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)132, (byte)1);
                                        num = 3;
                                    }
                                    else if (this.Currentnpctext.Contains("Thibault"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Duana)"], (byte)0, (byte)162, (byte)1);
                                        num = 4;
                                    }
                                    Thread.Sleep(1000);
                                    this.letterquest = 3;
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                        {
                                            client.Tab.mediumwalk.Checked = true;
                                            client.letterquest = 3;
                                            client.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                            switch (num)
                                            {
                                                case 1:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                                case 2:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"2nd Floor Weapon";
                                                    break;
                                                case 3:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"1st Floor Weapon";
                                                    break;
                                                case 4:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                            }
                                            client.Tab.autowalker_button.Text = "Stop";
                                            client.autowalkon = true;
                                            client.letterquest = 3;
                                            if (client.HasItem("Loures Song"))
                                                client.UseItem("Loures Song");
                                            else if (client.HasItem("Abel Song"))
                                                client.UseItem("Abel Song");
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 136)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Riona");
                            if (npcByName != null)
                            {
                                if (this.Gender == (byte)1 && this.letterquest == 6)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)186, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)187, (byte)1);
                                            this.theletter = false;
                                            this.SaveTimedStuff(33);
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)1 && this.letterquest < 3)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)63, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)64, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)66, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)67, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)70, (byte)1, (byte)6, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)106, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)108, (byte)1);
                                            this.letterquest = 3;
                                            break;
                                        }
                                    }
                                }
                                if (this.Gender == (byte)0 && this.letterquest < 3 && this.Currentnpctext != "")
                                {
                                    int num = 0;
                                    if (this.Currentnpctext.Contains("Courtney"))
                                    {
                                        this.lettercourtney = true;
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)176, (byte)1);
                                        num = 1;
                                    }
                                    else if (this.Currentnpctext.Contains("Lowell"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)147, (byte)1);
                                        num = 2;
                                    }
                                    else if (this.Currentnpctext.Contains("Marlon"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)132, (byte)1);
                                        num = 3;
                                    }
                                    else if (this.Currentnpctext.Contains("Thibault"))
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Riona)"], (byte)0, (byte)162, (byte)1);
                                        num = 4;
                                    }
                                    Thread.Sleep(1000);
                                    this.letterquest = 3;
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                        {
                                            client.Tab.mediumwalk.Checked = true;
                                            client.letterquest = 3;
                                            client.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                            switch (num)
                                            {
                                                case 1:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                                case 2:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"2nd Floor Weapon";
                                                    break;
                                                case 3:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"1st Floor Weapon";
                                                    break;
                                                case 4:
                                                    client.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                                    break;
                                            }
                                            client.Tab.autowalker_button.Text = "Stop";
                                            client.autowalkon = true;
                                            client.letterquest = 3;
                                            if (client.HasItem("Loures Song"))
                                                client.UseItem("Loures Song");
                                            else if (client.HasItem("Abel Song"))
                                                client.UseItem("Abel Song");
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 115)
                        {
                            if (this.lettercourtney)
                            {
                                if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                        {
                                            client.Tab.autowalker_button.Text = "Start";
                                            client.autowalkon = false;
                                        }
                                    }
                                }
                                Npc npcByName = this.FindNpcByName<Npc>("Courtney");
                                if (npcByName != null && npcByName.Name == "Courtney" && (this.Gender == (byte)0 && this.letterquest < 4))
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the love letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Courtney)"], (byte)0, (byte)26, (byte)1, (byte)3, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Courtney)"], (byte)0, (byte)43, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Courtney)"], (byte)0, (byte)46, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Courtney)"], (byte)0, (byte)65, (byte)1);
                                            Thread.Sleep(1000);
                                            this.letterquest = 4;
                                            break;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                        {
                                            client.Tab.autowalker_button.Text = "Start";
                                            client.autowalkon = false;
                                        }
                                    }
                                }
                                Npc npcByName = this.FindNpcByName<Npc>("Thibault");
                                if (npcByName != null && npcByName.Name == "Thibault" && (this.Gender == (byte)0 && this.letterquest < 4))
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Thibault)"], (byte)0, (byte)26, (byte)1, (byte)3, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Thibault)"], (byte)0, (byte)43, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Thibault)"], (byte)0, (byte)46, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Thibault)"], (byte)0, (byte)65, (byte)1);
                                            Thread.Sleep(1000);
                                            this.letterquest = 4;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 118)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Lowell");
                            if (npcByName != null && (this.Gender == (byte)0 && this.letterquest < 4))
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                    {
                                        this.Speak("the letter", 0);
                                        Thread.Sleep(500);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Lowell)"], (byte)0, (byte)26, (byte)1, (byte)3, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Lowell)"], (byte)0, (byte)43, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Lowell)"], (byte)0, (byte)46, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Lowell)"], (byte)0, (byte)65, (byte)1);
                                        Thread.Sleep(1000);
                                        this.letterquest = 4;
                                        break;
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 122)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Marlon");
                            if (npcByName != null && (this.Gender == (byte)0 && this.letterquest < 4))
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                    {
                                        this.Speak("the letter", 0);
                                        Thread.Sleep(500);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Marlon)"], (byte)0, (byte)26, (byte)1, (byte)3, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Marlon)"], (byte)0, (byte)43, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Marlon)"], (byte)0, (byte)46, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Marlon)"], (byte)0, (byte)65, (byte)1);
                                        Thread.Sleep(1000);
                                        this.letterquest = 4;
                                        break;
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 303)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            Npc npcByName = this.FindNpcByName<Npc>("Baltasar");
                            if (npcByName != null)
                            {
                                if (this.Gender == (byte)1 && this.letterquest < 5 && this.Currentnpctext != "")
                                {
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)35, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)43, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)44, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)45, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)47, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)64, (byte)1);
                                    Thread.Sleep(1000);
                                    this.letterquest = 5;
                                }
                                if (this.Gender == (byte)0 && this.letterquest < 5)
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client.Name.ToLower() == this.GroupMembers[0].ToLower() && !client.autowalkon)
                                        {
                                            this.Speak("the letter", 0);
                                            Thread.Sleep(500);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["The Letter (Baltasar)"], (byte)0, (byte)20, (byte)1, (byte)1, (byte)1);
                                            this.letterquest = 5;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (this.MapInfo.Number == 3041)
                        {
                            if (this.letterquest == 1 && this.GroupMembers.Count<string>() == 1)
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client.Name.ToLower() == this.GroupMembers[0].ToLower() || client.Name.ToLower() == this.Name.ToLower())
                                    {
                                        client.Tab.autowalker_button.Text = "Start";
                                        client.autowalkon = false;
                                    }
                                }
                            }
                            if (this.Gender == (byte)1 && this.letterquest < 6 && (this.ServerLocation.X != 1 || this.ServerLocation.Y != 14))
                                this.WalkToExact(1, 14);
                            if (this.Gender == (byte)1 && this.letterquest < 6 && this.Currentnpctext.Contains("You attempt to pull out the compartment"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)15, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)30, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)37, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)30, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)42, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)30, (byte)1, (byte)3, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)47, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)30, (byte)1, (byte)4, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["The Letter (Library)"], (byte)0, (byte)78, (byte)1, (byte)2, (byte)1);
                                this.letterquest = 6;
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    if (this.molo && !this.autowalkon)
                    {
                        Npc npc = (Npc)null;
                        if (this.MapInfo.Number == 181)
                            npc = this.FindNpcByName<Npc>("Aud");
                        if (this.MapInfo.Number == 129)
                            npc = this.FindNpcByName<Npc>("Oona");
                        if (this.MapInfo.Number == 162)
                            npc = this.FindNpcByName<Npc>("Alleen");
                        if (npc != null)
                        {
                            this.DialogueRespond(npc.ID, Server.Dialogs["Mother's Love"]);
                            while (!this.Currentnpctext.Contains("I think I have something"))
                            {
                                if (this.Currentnpctext.Contains("has horrible nightmares"))
                                {
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)16, (byte)1);
                                    break;
                                }
                                Thread.Sleep(200);
                            }
                            while (!this.Currentnpctext.Contains("I think I have something"))
                                Thread.Sleep(200);
                            if (this.Currentnpctext.Contains("terrible viper"))
                            {
                                if (!this.HasPersonaca())
                                {
                                    this.SendMessage("Get a personaca deum", (byte)0, false);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)52, (byte)1);
                                }
                                else
                                {
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)53, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)71, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)72, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)73, (byte)1);
                                    this.SaveTimedStuff(31);
                                }
                            }
                            else if (this.Currentnpctext.Contains("nightmares grow"))
                            {
                                if (!this.HasBetony())
                                {
                                    this.SendMessage("Get a betony deum", (byte)0, false);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)34, (byte)1);
                                }
                                else
                                {
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)35, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)71, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)72, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)73, (byte)1);
                                    this.SaveTimedStuff(31);
                                }
                            }
                            else if (this.Currentnpctext.Contains("restore her strength"))
                            {
                                if (!this.HasHydele())
                                {
                                    this.SendMessage("Get a hydele deum", (byte)0, false);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)52, (byte)1);
                                }
                                else
                                {
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)44, (byte)1, (byte)2, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)71, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)72, (byte)1);
                                    this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)73, (byte)1);
                                    this.SaveTimedStuff(31);
                                }
                            }
                            else if (this.Currentnpctext.Contains("Thank you. My da"))
                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Mother's Love"], (byte)0, (byte)10, (byte)1);
                            this.molo = false;
                        }
                    }
                    if (!this.pause && !this.autowalkon)
                    {
                        if (this.MapInfo.Number == 1006 && this.HasItem("Papaya") && (this.HasItem("Rambutan") && this.HasItem("Green Grapes")) && (this.HasItem("Grapes") && this.HasItem("Cherry")) && !this.InventoryIsFull())
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Qaeli");
                            if (npcByName != null)
                            {
                                this.SkillSpellCaption("giant ant");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Giant Ant"], (byte)0, (byte)5, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Giant Ant"], (byte)0, (byte)9, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Giant Ant"], (byte)0, (byte)13, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Giant Ant"], (byte)0, (byte)14, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Giant Ant"], (byte)0, (byte)18, (byte)1);
                                Thread.Sleep(1000);
                                this.SkillSpellCaption("i have the fruits");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Fruits"], (byte)0, (byte)38, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 1006 && this.ItemCount("Mantis's Eye") >= 3U && this.ItemCount("Tangerines") >= 2U && this.HasItem("Passion Flower"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Qaeli");
                            if (npcByName != null)
                            {
                                this.SkillSpellCaption("red mantis");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Red Mantis"], (byte)0, (byte)5, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Red Mantis"], (byte)0, (byte)9, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Red Mantis"], (byte)0, (byte)10, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Red Mantis"], (byte)0, (byte)11, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Red Mantis"], (byte)0, (byte)12, (byte)1);
                                Thread.Sleep(1000);
                                this.SkillSpellCaption("i have the mantis stuff");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mantis Stuff"], (byte)0, (byte)14, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mantis Stuff"], (byte)0, (byte)25, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 1007 && this.HasItem("Red Mantis Claw") && this.HasItem("Ant Head"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Codus");
                            if (npcByName != null)
                            {
                                this.SkillSpellCaption("creant");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Creants"], (byte)0, (byte)5, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Creants"], (byte)0, (byte)6, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Creants"], (byte)0, (byte)15, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Creants"], (byte)0, (byte)19, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Creants"], (byte)0, (byte)20, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Creants"], (byte)0, (byte)21, (byte)1);
                                Thread.Sleep(1000);
                                this.SkillSpellCaption("i have the head");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["I have the head"], (byte)0, (byte)13, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["I have the head"], (byte)0, (byte)14, (byte)1);
                                Thread.Sleep(1000);
                                this.SkillSpellCaption("i have the claw");
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["I have the claw"], (byte)0, (byte)12, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 134 && this.HasItem("Tentacle"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Theradus");
                            if (npcByName != null && (int)this.LastnpcpopupID != (int)npcByName.ID)
                            {
                                this.ClickNpc(npcByName.ID);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Dragon Scale Sword"], (byte)0, (byte)5, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Dragon Scale Sword"], (byte)0, (byte)6, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Dragon Scale Sword"], (byte)0, (byte)7, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Dragon Scale Sword"], (byte)0, (byte)17, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Dragon Scale Sword"], (byte)0, (byte)18, (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Shinewood";
                                this.Tab.walklocaleslist.SelectedItem = (object)"SW 8 (DSS)";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                if (!this.BotThread.IsAlive)
                                    this.BotThread.Start();
                                this.pause = false;
                                this.Tab.btnPlay.Enabled = false;
                                this.Tab.btnStop.Enabled = true;
                            }
                        }
                    }
                    if (!this.pause && this.buy2ndtalisman)
                    {
                        if (this.MapInfo.Number == 6718 && !this.InventoryIsFull() && this.Statistics.Gold > 500000U)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Lalerid");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Talisman"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Talisman"], (byte)0, (byte)8, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Talisman"], (byte)0, (byte)12, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Talisman"], (byte)0, (byte)16, (byte)1);
                                Thread.Sleep(1000);
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Talisman"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Talisman"], (byte)0, (byte)24, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Talisman"], (byte)0, (byte)36, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Talisman"], (byte)0, (byte)39, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 6716 && this.Statistics.Gold > 100000U && this.HasItem("Half Talisman") && this.HasItem("2nd Half Talisman"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Uliam");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Broken Talisman"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)1, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)16, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)17, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)33, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 6716 && this.Statistics.Gold > 500000U && (this.HasItem("Talisman") && this.HasItem("Ruby Eye")) && (this.HasItem("Sapphire Eye") && this.HasItem("Emerald Eye") && (this.HasItem("Diamond Eye") && this.HasItem("Iron Ore Eye"))) && this.HasItem("Orange Beryl Eye"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Uliam");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Broken Talisman"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)1, (byte)1, (byte)2, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)64, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)95, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                        if (this.MapInfo.Number == 6716 && this.Statistics.Gold > 100000U && this.HasItem("Giant Pearl") && this.HasItem("Talisman with Gems"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Uliam");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Broken Talisman"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)1, (byte)1, (byte)3, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)109, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)110, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)126, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    if (!this.pause && this.giantpearl)
                    {
                        if (!this.giantpearl2)
                        {
                            if (this.Gender == (byte)0 && this.HasItem("Bathing Trousers"))
                            {
                                this.UseItem("Bathing Trousers");
                                while (this.Overcoat != "Bathing Trousers")
                                    Thread.Sleep(200);
                                this.Refresh();
                            }
                            else if (this.Gender == (byte)1 && this.HasItem("Sarong"))
                            {
                                this.UseItem("Sarong");
                                while (this.Overcoat != "Sarong")
                                    Thread.Sleep(200);
                                this.Refresh();
                            }
                        }
                        if (this.giantpearl2 && (this.Overcoat == "Bathing Trousers" || this.Overcoat == "Sarong"))
                            this.UnequipSlot((byte)15);
                        if (this.giantpearl2)
                        {
                            if (this.HasItem("Bathing Trousers"))
                            {
                                this.giantpearl2 = false;
                                this.DropItems("Bathing Trousers");
                                if (this.MapInfo.Number == 6627)
                                    this.Drop(7, 6, this.ItemSlot("Giant Pearl"), 1);
                                else if (this.MapInfo.Number == 6625)
                                    this.Drop(58, 26, this.ItemSlot("Giant Pearl"), 1);
                                this.giantpearl = false;
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                            }
                            if (this.HasItem("Sarong"))
                            {
                                this.giantpearl2 = false;
                                this.DropItems("Sarong");
                                if (this.MapInfo.Number == 6627)
                                    this.Drop(7, 6, this.ItemSlot("Giant Pearl"), 1);
                                else if (this.MapInfo.Number == 6625)
                                    this.Drop(58, 26, this.ItemSlot("Giant Pearl"), 1);
                                this.giantpearl = false;
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                            }
                        }
                    }
                    if (this.Currentnpctext != string.Empty)
                    {
                        if (this.Currentnpctext.StartsWith("You see something shiny next to your feet"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Giant Pearl"], (byte)0, (byte)15, (byte)4);
                        if (this.Currentnpctext.StartsWith("You find some bones"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)13, (byte)4);
                        if (this.Currentnpctext.StartsWith("You feel the ground shift beneath your feet. It does not seem solid. You take"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)11, (byte)4);
                        else if (this.Currentnpctext.StartsWith("You feel the ground shift beneath"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)7, (byte)4);
                    }
                    if (this.Tab.vwalklocaleslist == "Shamensyth ent")
                    {
                        if (!this.pause && this.autowalkon && this.MapInfo.Number == 706)
                            this.Speak("enter sewer maze", 2);
                        if (!this.pause && this.MapInfo.Number == 6716 && (this.Statistics.Gold > 300000U && this.HasItem("Top Blazing Wand Piece")) && this.HasItem("Lower Blazing Wand Piece"))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Uliam");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Broken Talisman"]);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)1, (byte)1, (byte)4, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Broken Talisman"], (byte)0, (byte)138, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    if (!this.pause && this.Tab.vwalklocaleslist == "tauren nose ring")
                    {
                        if (this.HasItem("Goblin Hy-brasyl Gauntlet") && this.nosering != 3)
                            this.nosering = 3;
                        else if (this.HasItem("Throne Key") && this.nosering < 2)
                            this.nosering = 2;
                        if (this.MapInfo.Number == 2082 && this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("*You hear a low"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            ushort currentnpcscript = this.Currentnpcscript;
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)4, (byte)1, (byte)1, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)12, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)14, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)15, (byte)1);
                            Thread.Sleep(1000);
                        }
                        if (this.MapInfo.Number == 2080 && this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("You unlocked"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)17, (byte)1);
                        if (this.MapInfo.Number == 2076 && this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Yes, I was told that"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            ushort currentnpcscript = this.Currentnpcscript;
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)5, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)6, (byte)1, (byte)1, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)10, (byte)1, (byte)1, (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)17, (byte)1);
                            Thread.Sleep(1000);
                        }
                        if (this.MapInfo.Number == 2078)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Hogor");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                if (this.nosering == 0)
                                {
                                    this.ClickNpc(npcByName.ID);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(200);
                                    if (this.Currentnpctext.StartsWith("You want the Goblin Gauntlet?"))
                                    {
                                        ushort currentnpcscript = this.Currentnpcscript;
                                        this.PopupRespond(new uint?(npcByName.ID), currentnpcscript, (byte)0, (byte)9, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), currentnpcscript, (byte)0, (byte)16, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), currentnpcscript, (byte)0, (byte)17, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), currentnpcscript, (byte)0, (byte)21, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), currentnpcscript, (byte)0, (byte)22, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), currentnpcscript, (byte)0, (byte)23, (byte)1);
                                        this.nosering = 1;
                                    }
                                }
                                else if (this.nosering == 2)
                                {
                                    this.ClickNpc(npcByName.ID);
                                    this.PopupRespond(new uint?(npcByName.ID), this.Currentnpcscript, (byte)0, (byte)33, (byte)1);
                                    this.nosering = 3;
                                }
                            }
                        }
                        if (this.MapInfo.Number == 2110)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Gridak");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.ClickNpc(npcByName.ID);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Goblin Disguise"], (byte)0, (byte)9, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Goblin Disguise"], (byte)0, (byte)10, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Goblin Disguise"], (byte)0, (byte)11, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Goblin Disguise"], (byte)0, (byte)12, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Goblin Disguise"], (byte)0, (byte)16, (byte)1);
                                this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Goblin Disguise"], (byte)0, (byte)17, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    if (!this.pause && this.Tab.vwalklocaleslist == "tauren horn")
                    {
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Keep away! A mystical beast"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Even is where it lies."))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Light is its life"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Bring nothing with you."))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Enter if you dare."))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Rage will consume it"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Old is the beast"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("To summon the beast."))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        if (this.Currentnpctext != string.Empty && this.Currentnpctext.StartsWith("Howl its name,"))
                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)1, (byte)1);
                        foreach (Character character in this.Characters.Values.ToArray<Character>())
                        {
                            if (character != null && character is Npc && character.Map == this.MapInfo.Number && character.IsOnScreen)
                            {
                                if (character.Name == "IceStone1" && this.taurenhorn == 0)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 1;
                                }
                                if (character.Name == "IceStone2" && this.taurenhorn == 1)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 2;
                                }
                                if (character.Name == "IceStone4" && this.taurenhorn == 2)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 3;
                                }
                                if (character.Name == "IceStone5" && this.taurenhorn == 3)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 4;
                                }
                                if (character.Name == "IceStone8" && this.taurenhorn == 4)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 5;
                                }
                                if (character.Name == "IceStone9" && this.taurenhorn == 5)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 6;
                                }
                                if (character.Name == "IceStone6" && this.taurenhorn == 6)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 7;
                                }
                                if (character.Name == "IceStone7" && this.taurenhorn == 7)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 8;
                                }
                                if (character.Name == "IceStone3" && this.taurenhorn == 8)
                                {
                                    this.ClickNpc(character.ID);
                                    this.taurenhorn = 9;
                                }
                            }
                        }
                    }
                    if (!this.pause && this.lawquest)
                    {
                        if (this.MapInfo.Name.Contains("Dung Field") && this.LastnpcpopupID != 0U)
                            this.LastnpcpopupID = 0U;
                        if ((this.MapInfo.Number == 10056 || this.MapInfo.Number == 10004) && this.Tab.autowalker_button.Text != "Stop")
                        {
                            this.Tab.LoadTemplate("default", false);
                            this.Tab.fastwalk.Checked = true;
                            this.Tab.autowalker_locales.Text = "Lost Ruins";
                            this.Tab.walklocaleslist.SelectedItem = (object)"Nairn";
                            this.Tab.autowalker_button.Text = "Stop";
                            this.autowalkon = true;
                            this.Tab.btnPlay.Enabled = false;
                            this.Tab.btnStop.Enabled = true;
                            this.pause = false;
                        }
                        if (this.MapInfo.Name.Contains("Lost Ruins 7") && this.LastnpcpopupID != 0U)
                            this.LastnpcpopupID = 0U;
                        else if (this.MapInfo.Number == 8995)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Nairn");
                            if (npcByName != null && npcByName.IsOnScreen && (int)this.LastnpcpopupID != (int)npcByName.ID)
                            {
                                this.ClickNpc(npcByName.ID);
                                if (this.Currentnpctext.StartsWith("You just discovered the Lost Ruins."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.SendMessage("Not time yet! (1 hour wait)", (byte)0, false);
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("Have you found any sign of the ruins?"))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"LR2 Rocks";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("I found several rocks that could have been one of the five structures you were talking about.") || this.Currentnpctext.StartsWith("Go on, find the second ruins site."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"LR3 Rocks";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("Great news, I found another ruin.") || this.Currentnpctext.StartsWith("Go on, find the wall scriptures."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Ass Dungeon";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("You were right, the wall scriptures were hidden from plain sight.") || this.Currentnpctext.StartsWith("Go on, find the third set of ruins!"))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"LR4 Rocks";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("Looks like you got some scrapes and bruises."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.LastnpcpopupID = 0U;
                                }
                                else if (this.Currentnpctext.StartsWith("Go find the rest of the wall tablets."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Marble Vault";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("Great job on taking notes on the wall tablets.") || this.Currentnpctext.StartsWith("Go find the altar."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"LR5 Altar";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("Great news! I found the altar.") || this.Currentnpctext.StartsWith("Go back to the altar and perform that ritual."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Dung Field";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("From the look on your face, I guess you were successful.") || this.Currentnpctext.StartsWith("Go find the FINAL Altar."))
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Law";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                                else if (this.Currentnpctext.StartsWith("Guess who we encountered after performing the ritual?"))
                                {
                                    this.lawwall = 0;
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.SendMessage("DONE!", (byte)0, false);
                                    this.LastnpcpopupID = npcByName.ID;
                                    this.lawquest = false;
                                }
                                else
                                {
                                    while (!this.Currentnpctext.StartsWith("Great.  Here's what I know about"))
                                    {
                                        if (this.Currentnpctext.StartsWith("I will not accept your notes if they are out of order"))
                                        {
                                            this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                            this.Tab.autowalker_locales.Text = "Lost Ruins";
                                            this.Tab.walklocaleslist.SelectedItem = (object)"Marble Vault";
                                            this.Tab.autowalker_button.Text = "Stop";
                                            this.autowalkon = true;
                                            goto label_1782;
                                        }
                                        else
                                        {
                                            if (this.Currentnpctext.StartsWith("Do you want to help me discover the Lost Ruins?"))
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                            else if (this.Currentnpctext != "")
                                                this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                                            if (!this.pause)
                                            {
                                                Thread.Sleep(200);
                                                if (this.Currentpopuptype == 10)
                                                    goto label_1782;
                                            }
                                            else
                                                goto label_1782;
                                        }
                                    }
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"LR2 Rocks";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    label_1782:
                                    this.LastnpcpopupID = npcByName.ID;
                                }
                            }
                        }
                        else if (this.MapInfo.Number == 8994 || this.MapInfo.Number == 8988 || this.MapInfo.Number == 8990)
                        {
                            if (this.MapInfo.Number == 8994 && this.Tab.autowalker_button.Text == "Start")
                                this.SearchAllTiles(6, 13, 17, 24);
                            if (this.MapInfo.Number == 8988)
                            {
                                if (this.lawwall == 0)
                                    this.WalkToExact(25, 13);
                                else if (this.lawwall == 1)
                                    this.WalkToExact(2, 25);
                                else if (this.lawwall == 2)
                                    this.WalkToExact(13, 19);
                                else if (this.lawwall == 3)
                                    this.WalkToExact(8, 2);
                                else if (this.lawwall == 4)
                                    this.WalkToExact(13, 25);
                                else if (this.lawwall == 5)
                                    this.WalkToExact(2, 8);
                                else if (this.lawwall == 6)
                                    this.WalkToExact(16, 13);
                                else if (this.lawwall == 7 && this.HasSpell("dachaidh", false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["dachaidh"].ManaCost)
                                    this.MacroCast("dachaidh", new uint?());
                            }
                            if (this.Currentnpctext != "")
                            {
                                if (!this.Currentnpctext.StartsWith("Finally!!! I'm glad this is the last Wall Tablet I have to take notes on."))
                                    ;
                                if (this.Currentnpctext.StartsWith("This must be the wall markings that Nairn was talking about."))
                                    this.SendMessage("I got the lame popup =(", (byte)0, false);
                                if (this.Currentnpctext.StartsWith("You notice an odd arrangement of rocks"))
                                {
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Nairn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                                this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)4);
                                this.LastnpcpopupID = 0U;
                            }
                        }
                        else if (this.MapInfo.Number == 8993 || this.MapInfo.Number == 8989 || this.MapInfo.Number == 8987)
                        {
                            if (this.MapInfo.Number == 8993 && this.Tab.autowalker_button.Text == "Start")
                                this.SearchAllTiles(16, 27, 6, 17);
                            if (this.MapInfo.Number == 8989 && this.Tab.autowalker_button.Text == "Start")
                                this.SearchAllTiles(7, 19, 5, 17);
                            if (this.MapInfo.Number == 8987 && this.Tab.autowalker_button.Text == "Start" && this.Tab.walklocaleslist.SelectedItem.ToString() != "Dung Field")
                                this.SearchAllTiles(5, 14, 7, 15);
                            if (this.MapInfo.Number == 8989 && this.Tab.autowalker_button.Text == "Start" && this.lawwall > 0 && this.lawwall < 7)
                                this.WalkToExact(45, 2);
                            if (this.Currentnpctext != "")
                            {
                                if (this.Currentnpctext.StartsWith("What is this? It looks scary down there!"))
                                    this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)4);
                                else if (this.Currentnpctext.StartsWith("This must be the underground passage."))
                                    this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)4);
                                else if (this.Currentnpctext != "")
                                {
                                    this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)4);
                                    this.Tab.autowalker_locales.Text = "Lost Ruins";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Nairn";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                                this.LastnpcpopupID = this.MapInfo.Number != 8989 ? 0U : 1U;
                            }
                        }
                    }
                    if (!this.pause)
                    {
                        if (this.MapInfo.Number == 8296)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Vortigern");
                            if (npcByName != null && npcByName.IsOnScreen && this.ajquest == 1)
                            {
                                this.ClickNpc(npcByName.ID);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                            }
                            if (this.Currentnpctext.StartsWith("Hi! My name is Vortigern."))
                            {
                                this.ajquest = 2;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 11; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 13; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                if (this.HasItem("Scrap of Clothing") && this.ItemAmount("Scrap of Clothing") >= 20U)
                                {
                                    this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"Bank";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                                else
                                    this.SendMessage("Get 20 Scrap of Clothing, and go to AJ bank", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("From the look on your face,"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 24; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.SendMessage("Wait 24 hours to receive the Note.", "orange", false);
                            }
                            else if (this.Currentnpctext.StartsWith("Here is the note."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 3; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                if (!this.SpellBar.Contains((ushort)10))
                                {
                                    this.UseItem("Hostile Headgear");
                                    this.UseItem("Male Hostile Costume");
                                    this.UseItem("Female Hostile Costume");
                                    if (this.HasItem("Elemus Mount") && ((int)this.ClientForm - 16384 != 658 && (int)this.ClientForm - 16384 != 659))
                                        this.UseItem("Elemus Mount");
                                }
                                Thread.Sleep(500);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 0 End";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.SendMessage("*walking to AJ ent* - Go to HG end", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("You have good news?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 16; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.SendMessage("AJ quest chain finished!", "orange", false);
                            }
                        }
                        if (this.MapInfo.Number == 8295)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Jovino");
                            if (npcByName != null && npcByName.IsOnScreen && (int)this.LastnpcpopupID != (int)npcByName.ID)
                            {
                                this.LastnpcpopupID = npcByName.ID;
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Jovino"]);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                            }
                            if (this.Currentnpctext.StartsWith("Hi there, are you old enough to be here?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 6; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 5; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 3; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 6; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 0 End";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.SendMessage("*walking to AJ ent* - Go to AJ 8 (dendrons)", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("I can't believe you killed"))
                            {
                                this.ajquest = 90;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 4; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Oriana";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                            }
                        }
                        if (this.MapInfo.Number == 8299)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Glenna");
                            if (npcByName != null && npcByName.IsOnScreen && this.ajquest == 2)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Hostile Clothing"]);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                            }
                            if (this.Currentnpctext.StartsWith("Hi. Do you need anything?"))
                            {
                                this.ajquest = 3;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 5; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 6; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.SendMessage("Wait 24 hours to receive Hostile Clothing.", "orange", false);
                            }
                            else if (this.Currentnpctext.StartsWith("Ahhh, here for your new outfit?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.ajquest = 3;
                                Thread.Sleep(1000);
                                if (!this.SpellBar.Contains((ushort)10))
                                {
                                    this.UseItem("Hostile Headgear");
                                    this.UseItem("Male Hostile Costume");
                                    this.UseItem("Female Hostile Costume");
                                    if (this.HasItem("Elemus Mount") && ((int)this.ClientForm - 16384 != 658 && (int)this.ClientForm - 16384 != 659))
                                        this.UseItem("Elemus Mount");
                                }
                                Thread.Sleep(500);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 0 End";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.SendMessage("*walking to AJ ent* - Go to HG end", (byte)0, false);
                            }
                        }
                        if (this.MapInfo.Number == 8306)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Weylin");
                            if (npcByName != null && npcByName.IsOnScreen && this.Tab.vwalklocaleslist.Equals("AJ 6"))
                            {
                                this.Speak("oriana", 2);
                                this.repeatspeech = DateTime.UtcNow;
                                while (this.MapInfo.Number != 8319)
                                {
                                    if (this.repeatspeech != DateTime.MinValue && DateTime.UtcNow.Subtract(this.repeatspeech).TotalSeconds > 1.0)
                                    {
                                        this.Speak("oriana", 2);
                                        this.repeatspeech = DateTime.UtcNow;
                                    }
                                    Thread.Sleep(200);
                                    if (!(this.Currentnpctext == string.Empty))
                                        break;
                                }
                            }
                            if (this.Currentnpctext.StartsWith("Good thing you know Oriana"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 3; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                            }
                            if (this.Currentnpctext.StartsWith("I heard you helped Oriana"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                            }
                        }
                        if (this.MapInfo.Number == 8329)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Hostile Chief");
                            if (npcByName != null && npcByName.IsOnScreen && !this.autowalkon)
                            {
                                if (this.ajquest == 3)
                                {
                                    this.ClickNpc(npcByName.ID);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(100);
                                }
                                if (this.ajquest == 7)
                                {
                                    this.ClickNpc(npcByName.ID);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(100);
                                }
                            }
                            if (this.Currentnpctext.StartsWith("You dare speak to me in that tone!"))
                            {
                                this.ajquest = 4;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 19; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.SendMessage("Go say Ugliest Mask to Oriana", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("You have returned!"))
                            {
                                this.ajquest = 8;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 6; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Speak("tell me the plan", 2);
                            }
                            else if (this.Currentnpctext.StartsWith("Okay I don't normal share my plans with anybody,"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 21; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.SendMessage("Go talk to Vortigern", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("What do you know about the Note?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 20; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.SendMessage("Go talk to Vortigern", (byte)0, false);
                            }
                        }
                        if (this.MapInfo.Number == 8300)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Oriana");
                            if (npcByName != null && npcByName.IsOnScreen && (int)this.LastnpcpopupID != (int)npcByName.ID && !this.autowalkon && (this.ajquest == 90 || this.ajquest == 91))
                            {
                                this.LastnpcpopupID = npcByName.ID;
                                this.Speak("jovino", 0);
                                while (this.Currentnpctext == string.Empty)
                                    Thread.Sleep(100);
                            }
                            if (this.Currentnpctext.StartsWith("Hi! You seem to know my dad's name."))
                            {
                                this.ajquest = 91;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 19; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 5; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 0 End";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.SendMessage("*walking to AJ ent* - Go to AJ 6", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("Did you find him?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 3; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.SendMessage("Wait 24 hours to receive Elemus Mount.", "orange", false);
                            }
                            else if (this.Currentnpctext.StartsWith("Here is your surprise."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.ajquest = 1;
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"Vortigern";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                            }
                            else if (this.Currentnpctext.StartsWith("Hey, "))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 7; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(10);
                                for (int index = 0; index < 11; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                if (this.ItemAmount("Crystal Bar") >= 20U)
                                    this.Speak("ugliest mask", 2);
                                else
                                    this.SendMessage("You need 20 Crystal Bars", "red", false);
                            }
                            else if (this.Currentnpctext.StartsWith("Back so soon?"))
                            {
                                this.ajquest = 7;
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(10);
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                if (!this.SpellBar.Contains((ushort)10))
                                {
                                    this.UseItem("Hostile Headgear");
                                    this.UseItem("Male Hostile Costume");
                                    this.UseItem("Female Hostile Costume");
                                    if (this.HasItem("Elemus Mount") && ((int)this.ClientForm - 16384 != 658 && (int)this.ClientForm - 16384 != 659))
                                        this.UseItem("Elemus Mount");
                                }
                                Thread.Sleep(500);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"AJ 0 End";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.SendMessage("*walking to AJ ent* - Go to HG End", (byte)0, false);
                            }
                        }
                        if (this.MapInfo.Number == 8337)
                        {
                            if (!this.autowalkon)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Kharlo");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    if (this.ytquest == 2)
                                    {
                                        this.Speak("jowella is mad at you", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 4)
                                    {
                                        this.Speak("favorite flower", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 7)
                                    {
                                        this.Speak("dendron bouquet", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 9)
                                    {
                                        this.Speak("she forgives you", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                }
                            }
                            if (this.Currentnpctext.StartsWith("Thank you for waking me up."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 20; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 1;
                            }
                            else if (this.Currentnpctext.StartsWith("Who told you that name?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 14; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 3;
                            }
                            else if (this.Currentnpctext.StartsWith("Huh? What are you talking about?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 17; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 5;
                            }
                            else if (this.Currentnpctext.StartsWith("Wow! I forgot how beautiful it looks."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(10);
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 8;
                            }
                            else if (this.Currentnpctext.StartsWith("Did she really forgive me?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 19; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 10;
                            }
                            else if (this.Currentnpctext.StartsWith("Are you joking?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 3; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 70;
                            }
                        }
                        if (this.MapInfo.Number == 8347)
                        {
                            if (!this.autowalkon)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Jowella");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    if (this.ytquest == 1)
                                    {
                                        this.Speak("i know kharlo", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 3)
                                    {
                                        this.Speak("he is apologizing", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 8)
                                    {
                                        this.Speak("dendron bouquet", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                }
                            }
                            if (this.Currentnpctext.StartsWith("Whaaaa! You know Kharlo?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 8; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 2;
                            }
                            else if (this.Currentnpctext.StartsWith("Did he really say that?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 12; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 4;
                            }
                            else if (this.Currentnpctext.StartsWith("Yaaay! Kharlo still remembers my favorite bouquet!"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 6; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT ent";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 9;
                            }
                        }
                        if (this.MapInfo.Number == 8348)
                        {
                            if (!this.autowalkon && this.WithinRange(53, 50, 21))
                            {
                                if (this.ytquest == 13)
                                {
                                    this.Speak("yowien fishing pole", 2);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(100);
                                }
                                else if (this.ytquest == 14 && this.ItemAmount("Yowien Fish") >= 20U)
                                {
                                    this.Speak("yowien fishes", 2);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(100);
                                }
                            }
                            if (this.Currentnpctext.StartsWith("How did you find me?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 11; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.ytquest = 14;
                                Thread.Sleep(1000);
                            }
                            else if (this.Currentnpctext.StartsWith("Yummy!"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 5";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 15;
                            }
                        }
                        if (this.MapInfo.Number == 8349)
                        {
                            if (!this.autowalkon)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Luwella");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    if (this.ytquest == 12)
                                    {
                                        this.Speak("why are you crying?", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.HasItem("Luwella's House Key"))
                                    {
                                        this.Speak("house key", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 17)
                                    {
                                        this.Speak("can i come in?", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                }
                            }
                            if (this.Currentnpctext.StartsWith("You're the first aisling to ask me that."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 21; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                Thread.Sleep(1000);
                                this.ytquest = 13;
                                if (!this.SpellBar.Contains((ushort)10))
                                {
                                    this.SendMessage("Enter Yt 4 to make Fishing Pole (get hide first!)", "red", false);
                                }
                                else
                                {
                                    this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"YT 4";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                }
                            }
                            else if (this.Currentnpctext.StartsWith("Thank you so much for finding my house key."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.Speak("can i come in?", 0);
                                this.ytquest = 17;
                            }
                            else if (this.Currentnpctext.StartsWith("Of course. Come in."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 2; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                if (this.ytquest == 17)
                                    this.ytquest = 18;
                            }
                        }
                        if (this.MapInfo.Number == 8370)
                        {
                            if (!this.autowalkon)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Granny");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    if (this.ytquest == 18)
                                    {
                                        this.Speak("hello granny", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 19)
                                    {
                                        this.Speak("i can protect luwella", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 20)
                                    {
                                        this.Speak("i am all done", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 21)
                                    {
                                        this.Speak("wake up granny!", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 22 && this.ItemAmount("Yowien Blue Vine") >= 25U && this.ItemAmount("Yowien Yellow Vine") >= 25U)
                                    {
                                        this.Speak("i have the vines", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                }
                            }
                            if (this.Currentnpctext.StartsWith("How did you get in here?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 17; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.ytquest = 19;
                                Thread.Sleep(1000);
                            }
                            else if (this.Currentnpctext.StartsWith("Really?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 7; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                if (this.ytquest != 19)
                                {
                                    this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                    this.ytquest = 21;
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    Thread.Sleep(1000);
                                    this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                    this.Tab.walklocaleslist.SelectedItem = (object)"YT 5";
                                    this.Tab.autowalker_button.Text = "Stop";
                                    this.autowalkon = true;
                                    this.ytquest = 20;
                                }
                            }
                            else if (this.Currentnpctext.StartsWith("Oh...sorry. Did I fall asleep?"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 24; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.ytquest = 22;
                                Thread.Sleep(1000);
                            }
                            else if (this.Currentnpctext.StartsWith("Good job. Let me see"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 9; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.ytquest = 23;
                            }
                        }
                        if (this.MapInfo.Number == 8350)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Kheven");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                if ((this.ytquest == 5 || this.ytquest == 70) && !this.autowalkon)
                                {
                                    this.Speak("dendron bouquet", 0);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(100);
                                }
                                else if (this.ytquest == 6 && DateTime.UtcNow.Subtract(this.KhevenTimer).TotalSeconds > 601.0)
                                {
                                    this.Speak("dendron bouquet", 0);
                                    while (this.Currentnpctext == string.Empty)
                                        Thread.Sleep(100);
                                }
                            }
                            if (this.Currentnpctext.StartsWith("I haven't heard someone shout that in a long time"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 15; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                this.ytquest = 6;
                                this.KhevenTimer = DateTime.UtcNow;
                                this.SendMessage("Wait here 10 minutes, walk the hider to yt5 for rehide", (byte)0, false);
                            }
                            else if (this.Currentnpctext.StartsWith("Here it is! It's perfection if I have to say so myself."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(10);
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.UseItem("Dendron Bouquet");
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 5";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 7;
                                this.KhevenTimer = DateTime.MinValue;
                            }
                            else if (this.Currentnpctext.StartsWith("Hmmm...let me guess,"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 4; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)2, (byte)1);
                                for (int index = 0; index < 4; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(2000);
                                this.Assail();
                                this.UseItem("Dendron Bouquet");
                                Thread.Sleep(500);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 5";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 7;
                            }
                        }
                        if (this.MapInfo.Number == 8355)
                        {
                            if (!this.autowalkon)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Norrie");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    if (this.ytquest == 10)
                                    {
                                        this.ClickNpc(npcByName.ID);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                    else if (this.ytquest == 11 && this.HasItem("Crystal Orb"))
                                    {
                                        this.Speak("crystal orb", 0);
                                        while (this.Currentnpctext == string.Empty)
                                            Thread.Sleep(100);
                                    }
                                }
                            }
                            if (this.Currentnpctext.StartsWith("Yes, I'm the great Norrie, the fortune teller."))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 15; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.ytquest = 11;
                                Thread.Sleep(1000);
                            }
                            else if (this.Currentnpctext.StartsWith("You're back!"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                for (int index = 0; index < 12; ++index)
                                {
                                    this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                                    Thread.Sleep(10);
                                }
                                this.PopupClose(new uint?(currentnpcpopupId), (byte)1);
                                Thread.Sleep(1000);
                                this.Tab.autowalker_locales.SelectedItem = (object)"Aman Jungle";
                                this.Tab.walklocaleslist.SelectedItem = (object)"YT 5";
                                this.Tab.autowalker_button.Text = "Stop";
                                this.autowalkon = true;
                                this.ytquest = 12;
                            }
                        }
                    }
                    if (!this.pause && this.Tab.vautowalker_locales.Equals("Aman Jungle") && this.Tab.autowalker_button.Text == "Stop")
                    {
                        if (this.MapInfo.Number == 8355 && this.WithinRange(36, 3, 11) && (this.Tab.vwalklocaleslist.Equals("YT 15") || this.Tab.vwalklocaleslist.Equals("Yellow Vines") || this.Tab.vwalklocaleslist.Equals("YT 12")))
                        {
                            this.Speak("let me through", 2);
                            this.repeatspeech = DateTime.UtcNow;
                            do
                            {
                                if (this.repeatspeech != DateTime.MinValue && DateTime.UtcNow.Subtract(this.repeatspeech).TotalSeconds > 1.0)
                                {
                                    this.Speak("let me through", 2);
                                    this.repeatspeech = DateTime.UtcNow;
                                }
                                Thread.Sleep(200);
                            }
                            while (this.Currentnpctext == string.Empty);
                            if (this.Currentnpctext.Contains("Sure") && this.Currentnpctext.Contains("Not again") && !this.HasItem("Crystal Orb"))
                            {
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                                this.PopupClose(new uint?(this.CurrentnpcpopupID), (byte)1);
                                this.SendMessage("You have no Crystal Orb!", "red", false);
                            }
                            else if (this.Currentnpctext.Contains("Sure") && this.Currentnpctext.Contains("Not again") && this.HasItem("Crystal Orb"))
                            {
                                uint currentnpcpopupId = this.CurrentnpcpopupID;
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                                Thread.Sleep(1000);
                                this.Speak("let me through", 2);
                            }
                            if (this.Currentnpctext.StartsWith("Sorry I forgot"))
                            {
                                do
                                {
                                    Thread.Sleep(200);
                                    if (this.Currentnpctext != string.Empty)
                                        this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                                }
                                while (this.Currentpopuptype != 10);
                            }
                        }
                        else if (this.Tab.vwalklocaleslist.Equals("HG end"))
                        {
                            if (this.MapInfo.Number == 8310 && this.SpellBar.Contains((ushort)3))
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Elemus Guard");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    this.ClickNpc(npcByName.ID);
                                    Thread.Sleep(200);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    Thread.Sleep(800);
                                }
                            }
                            else if (this.MapInfo.Number == 8328)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Hostile Guard");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    this.ClickNpc(npcByName.ID);
                                    Thread.Sleep(200);
                                    this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                    this.PopupClose(new uint?(npcByName.ID), (byte)1);
                                    Thread.Sleep(800);
                                }
                            }
                        }
                        else if (this.MapInfo.Number == 8318 && (this.Tab.vwalklocaleslist.Equals("YT 3") || this.Tab.vwalklocaleslist.Equals("YT 5") || (this.Tab.vwalklocaleslist.Equals("YT 6") || this.Tab.vwalklocaleslist.Equals("Yellow Vines")) || (this.Tab.vwalklocaleslist.Equals("YT 15") || this.Tab.vwalklocaleslist.Equals("YT 11")) || this.Tab.vwalklocaleslist.Equals("YT 12")))
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Ashlee");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.ClickNpc(npcByName.ID);
                                Thread.Sleep(200);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                Thread.Sleep(800);
                            }
                        }
                        else if (this.MapInfo.Number == 8361 && this.WithinRange(29, 4, 11) && this.Tab.vwalklocaleslist.Equals("YT Boss"))
                        {
                            this.Speak("graauuloow", 2);
                            this.repeatspeech = DateTime.UtcNow;
                            do
                            {
                                if (this.repeatspeech != DateTime.MinValue && DateTime.UtcNow.Subtract(this.repeatspeech).TotalSeconds > 1.0)
                                {
                                    this.Speak("graauuloow", 2);
                                    this.repeatspeech = DateTime.UtcNow;
                                }
                                Thread.Sleep(200);
                            }
                            while (this.Currentnpctext == string.Empty);
                            do
                            {
                                Thread.Sleep(200);
                                if (this.Currentnpctext != string.Empty)
                                    this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            }
                            while (this.Currentpopuptype != 10);
                        }
                    }
                    if (this.meditate && this.Currentnpctext == "")
                    {
                        if (this.MapInfo.Number == 5210)
                            this.WalkToExact(5, 0);
                        if (this.MapInfo.Number == 5219)
                        {
                            if (this.distracted)
                            {
                                this.Refresh();
                                this.distracted = false;
                            }
                            if (this.mwhite)
                                this.WalkToExact(4, 4);
                            if (this.mgreen)
                                this.WalkToExact(13, 9);
                            if (this.mblue)
                                this.WalkToExact(4, 12);
                            if (this.myellow)
                                this.WalkToExact(9, 3);
                            if (this.mpurple)
                                this.WalkToExact(11, 13);
                            if (this.mbrown)
                                this.WalkToExact(3, 7);
                        }
                    }
                    if (this.meditatedone && this.Currentnpctext == "")
                    {
                        if (this.MapInfo.Number == 5219)
                            this.WalkToExact(8, 16);
                        if (this.MapInfo.Number == 5210)
                        {
                            if (!this.WithinRange(5, 5, 2))
                            {
                                this.WalkWithinRange(5, 5, 2);
                            }
                            else
                            {
                                this.Speak("sabonim, i understand the " + this.currentdugon + " dugon", 0);
                                this.meditatedone = false;
                            }
                        }
                    }
                    if (this.Currentnpctext.StartsWith("You must defeat a Shrieker"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        ushort currentnpcscript = this.Currentnpcscript;
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)204, (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)232, (byte)1);
                        this.meditate = true;
                        this.mbrown = true;
                    }
                    if (this.Currentnpctext.StartsWith("You must defeat a Leech"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        ushort currentnpcscript = this.Currentnpcscript;
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)205, (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)221, (byte)1);
                        this.meditate = true;
                        this.mpurple = true;
                    }
                    if (this.Currentnpctext.StartsWith("You must defeat a Gruesomefly"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        ushort currentnpcscript = this.Currentnpcscript;
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)206, (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)234, (byte)1);
                        this.meditate = true;
                        this.myellow = true;
                    }
                    if (this.Currentnpctext.StartsWith("You must defeat a Chest"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        ushort currentnpcscript = this.Currentnpcscript;
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)207, (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)235, (byte)1);
                        this.meditate = true;
                        this.mblue = true;
                    }
                    if (this.Currentnpctext.StartsWith("You must defeat a Crab"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        ushort currentnpcscript = this.Currentnpcscript;
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)204, (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)1, (byte)228, (byte)1);
                        this.meditate = true;
                        this.mgreen = true;
                    }
                    if (this.Currentnpctext.StartsWith("You must defeat a Bat"))
                    {
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        ushort currentnpcscript = this.Currentnpcscript;
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)0, (byte)215, (byte)1);
                        this.PopupRespond(new uint?(currentnpcpopupId), currentnpcscript, (byte)1, (byte)7, (byte)1);
                        this.meditate = true;
                        this.mwhite = true;
                    }
                    if (this.Currentnpctext.StartsWith("*has a sparkle in his eye*"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)83, (byte)1);
                    if (this.Currentnpctext.StartsWith("*kindly smiles*"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)74, (byte)1);
                    if (this.Currentnpctext.StartsWith("*serenely sits*"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)74, (byte)1);
                    if (this.Currentnpctext.StartsWith("*appears deep in contemplation*"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)74, (byte)1);
                    if (this.Currentnpctext.StartsWith("*respectfully sits*"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)74, (byte)1);
                    if (this.Currentnpctext.StartsWith("*closes his palm quickly*"))
                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), this.Currentnpcscript, (byte)0, (byte)74, (byte)1);
                    if (this.Currentnpctext.StartsWith("Will you be respectful of the m"))
                        this.PopupOption1();
                    if (this.MapInfo.Number == 5219)
                    {
                        if (this.Currentnpctext.StartsWith("Meditate on the "))
                        {
                            this.attemptingdugon = this.Currentnpctext.Split(' ')[3];
                            this.PopupOption1();
                        }
                        if (this.Currentnpctext.StartsWith("A bat flutters"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A candle flame dances"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A cold, gray, empty room"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A crab sits still"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A cross"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A die yields success"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A flower wilts"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A hand softly touches"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A leafless, winter tree"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A lock deftly undone"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A pyre consumes you"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A spark dances in your chest"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A well-cobbled path"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A wolf lunges at your throat"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("A word"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Aha!"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("An invigorating cry"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("All fades away"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("As without, within; as outside, inside"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Blushing countenance of sunset"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Clash"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Cool, running river"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Discovery"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Dissipation"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Flames envelop you"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Flash of light"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Gentle violet light surrounds you"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Glint of gold"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Heat swells from below"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Let go"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Light beneath the waves"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Light twinkles"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Lush green leaves"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Mantis in the garden"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Mother's caress"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Myriad, distant stars"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Ocean waves reflect light"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Passion"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Peaceful mountain"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Profound understanding"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Rays reflect in crystals at sharp angles"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Sages concur"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Satyrs dance about you"))
                        {
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Serene stream"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Stillness"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Stone tablet"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Sweat trickles down your chest"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Swords stab into you"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Swiftly dashing deer"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("The hand turns over"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("The median appears obvious"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("The moon shines as if smiling"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("The other cheek is offered"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("The way is revealed"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("The wolf whizzes by"))
                        {
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Trickle of thoughts"))
                        {
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Unbroken stare"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("You taste blood"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("You feel cold and numb"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Your body lies on an unlit pyre"))
                        {
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Your empty hands cusp the wind"))
                        {
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Your heart gently warms"))
                        {
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Blue"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("White"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Your left shoulder and right balance"))
                        {
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Purple"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                        if (this.Currentnpctext.StartsWith("Your muscles breathe easily"))
                        {
                            if (this.attemptingdugon.Equals("Green"))
                            {
                                this.PopupOption5();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Black"))
                            {
                                this.PopupOption4();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Red"))
                            {
                                this.PopupOption3();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Brown"))
                            {
                                this.PopupOption2();
                                this.meditate = false;
                            }
                            if (this.attemptingdugon.Equals("Yellow"))
                            {
                                this.PopupOption1();
                                this.meditate = false;
                            }
                        }
                    }
                    if (this.Tab.togglehaxloop.Text == "stop" && (this.haxtimer == DateTime.MinValue || DateTime.UtcNow.Subtract(this.haxtimer).TotalSeconds > (double)this.Tab.haxtimenum.Value))
                    {
                        if (this.MapInfo.Number == 6138)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Table");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Crystal Table"]);
                                Thread.Sleep(100);
                                this.PopupNext(new uint?(npcByName.ID), (byte)1);
                                this.haxtimer = DateTime.UtcNow;
                            }
                        }
                        if (this.MapInfo.Number == 2051)
                        {
                            Npc npcByName = this.FindNpcByName<Npc>("Dreval");
                            if (npcByName != null && npcByName.IsOnScreen)
                            {
                                this.DialogueRespond(npcByName.ID, Server.Dialogs["Manor Key"]);
                                Thread.Sleep(100);
                                this.PopupClose(new uint?(npcByName.ID), (byte)1);
                                this.Tab.togglehaxloop.Text = "start";
                            }
                        }
                    }
                    if (this.buyballpots)
                    {
                        Npc npcByName = this.FindNpcByName<Npc>("Bartender1");
                        if (npcByName != null && npcByName.IsOnScreen)
                        {
                            if (this.Statistics.Gold < 50000U)
                            {
                                this.SendMessage("Monies all spent.", (byte)0, false);
                                this.buyballpots = false;
                            }
                            else
                            {
                                uint id = npcByName.ID;
                                this.ClickNpc(id);
                                this.PopupRespond(new uint?(id), (ushort)0, (byte)0, (byte)0, (byte)2);
                                this.PopupRespond(new uint?(id), (ushort)0, (byte)0, (byte)0, (byte)2);
                                this.PopupRespond(new uint?(id), (ushort)0, (byte)0, (byte)0, (byte)2, (byte)1, (byte)1);
                                this.PopupRespond(new uint?(id), (ushort)0, (byte)0, (byte)0, (byte)2);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    if (this.Currentnpcname == "Taster")
                    {
                        if (this.Currentnpctext.StartsWith("Hello there "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.SkillSpellCaption("good");
                        }
                        if (this.Currentnpctext.StartsWith("I see, well I"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            if (this.HasItem("Glass of Wine") && this.WithinRange(5, 27, 3))
                                this.DropInMonster(currentnpcpopupId, this.ItemSlot("Glass of Wine"), 1);
                            else
                                this.SendMessage("Get a glass of wine and drop it on Taster", (byte)0, false);
                        }
                        if (this.Currentnpctext.StartsWith("Why thank you very much"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            if (this.HasItem("Lobster Meal") && this.WithinRange(5, 27, 3))
                                this.DropInMonster(currentnpcpopupId, this.ItemSlot("Lobster Meal"), 1);
                            else if (this.HasItem("Lobster") && this.WithinRange(5, 27, 3))
                                this.DropInMonster(currentnpcpopupId, this.ItemSlot("Lobster"), 1);
                            else
                                this.SendMessage("Get a Lobster Meal and drop it on Taster", (byte)0, false);
                        }
                        if (this.Currentnpctext.StartsWith("Wonderful,"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    }
                    if (this.Currentnpcname == "Snobi")
                    {
                        if (this.Currentnpctext.StartsWith("Greetings, and how are"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("good", 0);
                        }
                        if (this.Currentnpctext.StartsWith("That is good to hear"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("how are you", 0);
                        }
                        if (this.Currentnpctext.StartsWith("I am doing just fine"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("what requirements", 0);
                        }
                        if (this.Currentnpctext.StartsWith("First you need"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("no", 0);
                        }
                        if (this.Currentnpctext.StartsWith("What? Now that is just "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("heart", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Hmmmm, that's right, "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("i forgive you", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Thank you for understanding"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    }
                    if (this.Currentnpcname == "Boogle")
                    {
                        if (this.Currentnpctext.StartsWith("Hello there, "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("rat", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Good answer, I "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupRespond(new uint?(currentnpcpopupId), (ushort)0, (byte)0, (byte)2, (byte)1, (byte)1, (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("nothing", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Correct! Those"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    }
                    if (this.Currentnpcname == "Modly")
                    {
                        if (this.Currentnpctext.StartsWith("*looking ne"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("good", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Hey, how's it going?"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("good", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Sorry for sounding"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("expert", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Interesting,"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("expert", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Really?"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("sure", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Great I really "))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.ballemoboy = 1;
                            if (!this.BotThread.IsAlive)
                                this.BotThread.Start();
                            this.pause = false;
                            this.Tab.btnPlay.Enabled = false;
                            this.Tab.btnStop.Enabled = true;
                            this.Tab.fastwalk.Checked = true;
                        }
                        if (this.Currentnpctext.StartsWith("I can't go"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("handsome", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Really! Someone"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("be yourself", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Thank you"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    }
                    if (this.ballemoboy == 1 && this.Currentnpctext == "")
                    {
                        if (this.WithinRange(21, 14, 2))
                        {
                            this.ballemoboy = 2;
                            Thread.Sleep(1000);
                            this.Speak("hello", 0);
                        }
                        else
                            this.WalkWithinRange(21, 14, 2);
                    }
                    if (this.ballemoboy == 3 && this.Currentnpctext == "")
                    {
                        if (this.WithinRange(22, 28, 2))
                        {
                            this.ballemoboy = 4;
                            Thread.Sleep(1000);
                            this.Speak("go talk to her", 0);
                        }
                        else
                            this.WalkWithinRange(22, 28, 2);
                    }
                    if (this.Currentnpcname == "Grace")
                    {
                        if (this.Currentnpctext.StartsWith("Hello"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("i have a friend", 0);
                        }
                        if (this.Currentnpctext.StartsWith("A friend?"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("he is interested", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Well, which one"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("in the corner", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Oh him, I noticed"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            this.ballemoboy = 3;
                            if (!this.BotThread.IsAlive)
                                this.BotThread.Start();
                            this.pause = false;
                            this.Tab.btnPlay.Enabled = false;
                            this.Tab.btnStop.Enabled = true;
                            this.Tab.fastwalk.Checked = true;
                        }
                    }
                    if (this.Currentnpcname == "Josephine")
                    {
                        if (this.Currentnpctext.StartsWith("Hello"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("want to dance?", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Thank you for asking"))
                        {
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                            Thread.Sleep(1000);
                            this.Speak("i can teach you", 0);
                        }
                        if (this.Currentnpctext.StartsWith("Really, that would be"))
                        {
                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("right", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("forward", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("left", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("forward", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("left", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("forward", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                            Thread.Sleep(800);
                            this.Speak("left", 0);
                            Thread.Sleep(800);
                            this.PopupNext(new uint?(currentnpcpopupId), (byte)1);
                        }
                        if (this.Currentnpctext.StartsWith("Wonderful I think"))
                            this.PopupNext(new uint?(this.CurrentnpcpopupID), (byte)1);
                    }
                }
                catch
                {
                }
                label_3227:
                Thread.Sleep(200);
            }
        }

        private void Walking()
        {
            while (true)
            {
                try
                {
                    if (this.refreshdelay == DateTime.MinValue || this.refreshdelay != DateTime.MinValue && DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0)
                    {
                        if (this.refreshdelay != DateTime.MinValue && DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0)
                            this.refreshdelay = DateTime.MinValue;
                        if (!this.pause && !this.pausewalk && !this.donotwalk && (!this.IsSkulled || !this.IsSuained || (!this.IsStunned || !this.SpellBar.Contains((ushort)90)) || !this.SpellBar.Contains((ushort)97) || !this.SpellBar.Contains((ushort)101)))
                        {
                            int num;
                            if (this.Tab.wayregionson.Checked && this.laststep != DateTime.MinValue)
                            {
                                DateTime utcNow = DateTime.UtcNow;
                                if (utcNow.Subtract(this.laststep).TotalMilliseconds > 6000.0 && this.lastsuccessfulcast != DateTime.MinValue)
                                {
                                    utcNow = DateTime.UtcNow;
                                    num = utcNow.Subtract(this.lastsuccessfulcast).TotalMilliseconds <= 10000.0 ? 1 : 0;
                                    goto label_9;
                                }
                            }
                            num = 1;
                            label_9:
                            if (num == 0)
                            {
                                this.Refresh();
                                Thread.Sleep(1200);
                                this.laststep = DateTime.UtcNow;
                            }
                            if (this.Tab.vredaislings && this.Tab.walktored.Checked && !this.IsSurrounded(this.ServerLocation))
                            {
                                foreach (Player e in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                {
                                    if (e != null && (int)e.ID != (int)this.PlayerID && (Server.StaticCharacters[e.ID].isskulled || Server.StaticCharacters[e.ID].IsSkulled) && (this.IsClosestToYou(e.Location) && !this.IsSurrounded(e.Location)) && (this.GroupMembers.Contains(e.Name) || Server.Alts.ContainsKey(e.Name.ToLower()) || Server.friendlist != null && Server.friendlist.Contains(e.Name.ToLower())) && e.IsOnScreen && ((!Server.Alts.ContainsKey(e.Name.ToLower()) || Server.Alts[e.Name.ToLower()].IsSkulled) && this.HasItem("Komadium")))
                                    {
                                        this.Red(e);
                                        break;
                                    }
                                }
                            }
                            if (this.oktofollow && !this.disstopwalk)
                            {
                                if (this.autowalkon)
                                {
                                    this.walkaround = false;
                                    if (DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
                                    {
                                        this.Refresh();
                                        Thread.Sleep(1200);
                                        this.laststep = DateTime.MinValue;
                                    }
                                    this.AutoWalker();
                                    this.AWTest();
                                }
                                else if (this.Tab.walkeverytile.Checked)
                                {
                                    if (!this.walkaround)
                                        this.walkaround = true;
                                    if (!this.Tab.vactonlyinmobs || !this.Mobbed)
                                    {
                                        if (this.Tab.vwalktoloot && this.loot && this.walktoloot)
                                        {
                                            Npc i = this.NearestItem();
                                            if (i != null && i.IsOnScreen && !this.ServerLocation.WithinSquare(i.Location, 2))
                                            {
                                                Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, i.Location.X, i.Location.Y, false);
                                                if (path.Length == 0)
                                                    i.OutofReach = true;
                                                if (path.Length != 0 && path.Length < i.DistanceFrom(this.ServerLocation) * 2)
                                                {
                                                    this.WalkToLoot(i);
                                                    continue;
                                                }
                                                if (this.walktoloot)
                                                    this.walktoloot = false;
                                            }
                                            else if (i == null && this.walktoloot)
                                                this.walktoloot = false;
                                        }
                                        if (!this.Tab.topx.Text.Equals("") && !this.Tab.topy.Text.Equals("") && !this.Tab.bottomx.Text.Equals("") && !this.Tab.bottomy.Text.Equals(""))
                                            this.SearchAllTiles(int.Parse(this.Tab.topx.Text), int.Parse(this.Tab.topy.Text), int.Parse(this.Tab.bottomx.Text), int.Parse(this.Tab.bottomy.Text));
                                    }
                                    else
                                        continue;
                                }
                                else if (this.Tab.vwayregionson)
                                {
                                    if (DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
                                    {
                                        this.Refresh();
                                        Thread.Sleep(1200);
                                        this.laststep = DateTime.MinValue;
                                    }
                                    if (!this.Tab.haltwalknonfriends.Checked || this.SafeToWalkFast || this.MapInfo.Number == 2141)
                                        this.WayRegion();
                                }
                                else if (this.Tab.vfollowplayer && this.Tab.vfollowtarget != string.Empty && this.follow_walk != 1)
                                {
                                    if (DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
                                    {
                                        this.Refresh();
                                        Thread.Sleep(1200);
                                        this.laststep = DateTime.MinValue;
                                    }
                                    else
                                        this.Follow(this.Tab.vfollowtarget, this.Tab.vfollowdist);
                                }
                                if (this.Tab.pigwalk.Checked)
                                {
                                    if (this.MainTarget != null && this.MainTarget.IsOnScreen && this.MapInfo.Number == 2141)
                                    {
                                        if (DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
                                        {
                                            this.Refresh();
                                            Thread.Sleep(1200);
                                            this.laststep = DateTime.MinValue;
                                        }
                                        this.WalkOnTarget();
                                    }
                                    else if (this.HasMPig() && this.HasFPig())
                                    {
                                        this.Tab.autowalker_locales.SelectedItem = (object)"Loures";
                                        this.Tab.walklocaleslist.SelectedItem = (object)"Throne Room";
                                        this.Tab.autowalker_button.Text = "Stop";
                                        this.autowalkon = true;
                                        this.Tab.pigwalk.Checked = false;
                                    }
                                }
                                else if (this.Tab.walktowards.Checked && !this.walktoloot && (this.WaitOnBlankNames() || !this.Tab.vactonlyinmobs || this.Tab.vactonlyinmobs && this.Mobbed))
                                {
                                    if (!(this.itemdroppeddelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.itemdroppeddelay).TotalSeconds > 3.0)
                                    {
                                        if (this.Tab.vwalktoloot && this.loot && this.walktoloot)
                                        {
                                            Npc i = this.NearestItem();
                                            if (i != null && i.IsOnScreen && !this.ServerLocation.WithinSquare(i.Location, 2))
                                            {
                                                Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, i.Location.X, i.Location.Y, false);
                                                if (path.Length == 0)
                                                    i.OutofReach = true;
                                                if (path.Length != 0 && path.Length < i.DistanceFrom(this.ServerLocation) * 2)
                                                {
                                                    this.WalkToLoot(i);
                                                    continue;
                                                }
                                                if (this.walktoloot)
                                                    this.walktoloot = false;
                                            }
                                            else if (i == null && this.walktoloot)
                                                this.walktoloot = false;
                                        }
                                        this.WalkTowardsNearestMonster();
                                    }
                                }
                                else if (this.Tab.walktomonster.Checked && !this.SpellBar.Contains((ushort)10) && (!this.Tab.vactonlyinmobs || this.Tab.vactonlyinmobs && this.Mobbed) && (this.MainTarget != null && this.MainTarget.IsOnScreen) && this.MainTarget.Map == this.MapInfo.Number)
                                {
                                    if (DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
                                    {
                                        this.Refresh();
                                        Thread.Sleep(1200);
                                        this.laststep = DateTime.MinValue;
                                    }
                                    if (this.SurroundedCount == 0)
                                        this.WalkToTarget();
                                    else if (this.SurroundedCount != 4 && this.Tab.attackleaderstarget.Checked)
                                        this.WalkToTarget();
                                }
                            }
                        }
                    }
                }
                catch
                {
                }
                Thread.Sleep(200);
            }
        }

        private void BotLoop()
        {
            while (true)
            {
                try
                {
                    if (!this.pause)
                    {
                        if (this.Statistics.CurrentHP != 0U && !this.IsSkulled)
                        {
                            if (this.waitingforlabor && this.whisperagain != DateTime.MinValue && DateTime.UtcNow.Subtract(this.whisperagain).TotalSeconds >= 1.0)
                            {
                                if (this.Tab.requestlabor.Checked && this.Tab.requestlabornametext.Text != string.Empty)
                                    this.Whisper(this.Tab.requestlabornametext.Text, this.Tab.requestlabormessagetext.Text);
                                this.whisperagain = DateTime.MinValue;
                            }
                            if (this.Tab.clickladder.Checked)
                            {
                                foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
                                {
                                    if (nearbyNormalMonster != null && nearbyNormalMonster.Image == 362 && nearbyNormalMonster.DistanceFrom(this.ServerLocation) < 5)
                                    {
                                        this.ClickEntity(nearbyNormalMonster.ID);
                                        this.SendMessage("click", (byte)0, false);
                                        break;
                                    }
                                }
                            }
                            if (this.Tab.vassistonthischar)
                            {
                                if (this.Currentnpctext.Contains("I assist this work of Magic."))
                                    this.PopupOption1();
                                if (this.Currentnpctext.Contains("I embue the enchantment with my essence of Magic."))
                                    this.PopupOption1();
                                if (this.Currentnpctext.Contains("I assist the Tailoring"))
                                    this.PopupOption3();
                                if (this.Currentnpctext.Contains("I assist the preparation"))
                                    this.PopupOption3();
                                else if (this.Currentnpctext.Contains(" is attempting to advance degree in "))
                                    this.PopupOption2();
                                else if (this.Currentnpctext.Contains("is collecting fior"))
                                    this.PopupOption3();
                                else if (this.Currentnpctext.Contains("is desecrating an item of Cail or Deoch"))
                                    this.PopupOption2();
                                else if (this.Currentnpctext.Contains("A curse on you for bothering me!"))
                                    this.PopupOption2();
                                if (this.Currentnpctext.Contains("Curse the Disrepectful Hubae"))
                                    this.PopupOption2();
                                if (this.Currentnpctext.Contains("is attempting wizardry research"))
                                    this.PopupOption2();
                                if (this.Currentnpctext.Contains("is attempting to higgle"))
                                    this.PopupOption2();
                            }
                            if (!this.autowalkon && this.Tab.vlaborbutton && this.Tab.laborname.Text != string.Empty)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Cecil");
                                if (this.MapInfo.Number == 135)
                                    npcByName = this.FindNpcByName<Npc>("Cassidy");
                                else if (this.MapInfo.Number == 167)
                                    npcByName = this.FindNpcByName<Npc>("Lamont");
                                else if (this.MapInfo.Number == 422)
                                    npcByName = this.FindNpcByName<Npc>("Antonio");
                                else if (this.MapInfo.Number == 148)
                                    npcByName = this.FindNpcByName<Npc>("Jilt");
                                else if (this.MapInfo.Number == 432)
                                    npcByName = this.FindNpcByName<Npc>("Argus");
                                if (npcByName != null && !this.banker && npcByName.IsOnScreen)
                                {
                                    this.banker = true;
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["Labor"]);
                                    if (!this.SafeToWalkFast)
                                        Thread.Sleep(2000);
                                }
                                if (this.Currentnpctext.Contains("You have no time"))
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)10, (byte)1);
                                if (this.Currentnpctext.Contains("Hello.") && this.Currentnpctext.Contains("((laborfix))"))
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)11, (byte)1, (byte)1, (byte)1);
                                if (this.Currentnpctext.Contains("This will reset your labor"))
                                {
                                    if (this.Tab.laborwhisper.Checked)
                                        this.Whisper(this.Tab.laborname.Text, this.Tab.laborwhispertext.Text);
                                    this.Tab.laborbutton.Text = "Start";
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)75, (byte)1);
                                    this.laborcount = 1;
                                }
                                if (this.Currentnpctext.Contains("You have already reset your labor."))
                                {
                                    if (this.Tab.laborwhisper.Checked)
                                        this.Whisper(this.Tab.laborname.Text, this.Tab.laborwhispertext.Text);
                                    this.SendMessage("Out of labor.", (byte)0, false);
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client != null && client.Tab.requestlabornametext.Text == this.Name)
                                            client.Tab.requestlabornametext.Text = string.Empty;
                                    }
                                    this.Tab.laborbutton.Text = "Start";
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)78, (byte)1);
                                    do
                                    {
                                        Thread.Sleep(200);
                                    }
                                    while (this.Currentpopuptype != 10);
                                    if (this.Tab.laborlogoff.Checked)
                                        this.LogOff();
                                }
                                if (this.Currentnpctext.Contains("((labor fix))"))
                                {
                                    if ((Decimal)this.laborcount < this.Tab.labordays.Value)
                                    {
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)17, (byte)1, (byte)2, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.Currentpopuptype != 4);
                                        if (this.Currentpopuptype == 4)
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)25, (byte)2, this.Tab.laborname.Text, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.polishsuccess == 0);
                                        if (this.polishsuccess == 2)
                                        {
                                            if (this.Tab.laborwhisper.Checked)
                                                this.Whisper(this.Tab.laborname.Text, this.Tab.laborwhispertext.Text);
                                            this.Tab.laborbutton.Text = "Start";
                                        }
                                        if (this.polishsuccess == 3)
                                            this.Tab.laborbutton.Text = "Start";
                                        this.polishsuccess = 0;
                                        ++this.laborcount;
                                    }
                                    else
                                    {
                                        this.SaveTimedStuff(32);
                                        this.SendMessage("Labor time saved", (byte)0, false);
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Labor"], (byte)0, (byte)17, (byte)1, (byte)3, (byte)1);
                                        Thread.Sleep(1000);
                                    }
                                }
                            }
                            if (this.Tab.vpraybutton && this.Tab.praytemple.Checked)
                            {
                                this.impingskill = true;
                                Npc npcByName = this.FindNpcByName<Npc>("Meaveen");
                                if (this.MapInfo.Number == 3015)
                                    npcByName = this.FindNpcByName<Npc>("Audny");
                                else if (this.MapInfo.Number == 3017)
                                    npcByName = this.FindNpcByName<Npc>("Vivianne");
                                else if (this.MapInfo.Number == 3019)
                                    npcByName = this.FindNpcByName<Npc>("Erika");
                                else if (this.MapInfo.Number == 3013)
                                    npcByName = this.FindNpcByName<Npc>("Camille");
                                else if (this.MapInfo.Number == 3009)
                                    npcByName = this.FindNpcByName<Npc>("Evania");
                                else if (this.MapInfo.Number == 3011)
                                    npcByName = this.FindNpcByName<Npc>("Gabriela");
                                else if (this.MapInfo.Number == 3018)
                                    npcByName = this.FindNpcByName<Npc>("Greim");
                                if (npcByName != null && !this.templeassistant && npcByName.IsOnScreen)
                                {
                                    this.templeassistant = true;
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["Glioca Prayer"]);
                                }
                                if (this.Currentnpctext.StartsWith("You have lost touch"))
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)245, (byte)0, (byte)0, (byte)1);
                                if (this.Currentnpctext.Contains("Alone"))
                                {
                                    if (this.Tab.useprayassistant.Checked && this.Tab.prayerassistant.Text != string.Empty)
                                    {
                                        this.assisted = false;
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)96, (byte)2, this.Tab.prayerassistant.Text, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (!this.assisted);
                                        if (this.Currentnpctext.Contains("Praise Another"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)4, (byte)1);
                                        if (this.Currentnpctext.StartsWith("You have lost touch"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)245, (byte)0, (byte)0, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.polishsuccess == 0);
                                        Thread.Sleep(200);
                                        this.polishsuccess = 0;
                                    }
                                    else
                                    {
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (!this.Currentnpctext.Contains("Praise Another"));
                                        if (this.Currentnpctext.Contains("Praise Another"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)4, (byte)1);
                                        if (this.Currentnpctext.StartsWith("You have lost touch"))
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)245, (byte)0, (byte)0, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.polishsuccess == 0);
                                        Thread.Sleep(200);
                                        this.polishsuccess = 0;
                                    }
                                }
                            }
                            if (this.Tab.vpraybutton && this.Tab.praynecklace.Checked)
                            {
                                this.impingskill = true;
                                if (this.Tab.prayhere.Checked)
                                {
                                    if (this.HasSpell(this.PrayerSpell, false) && !this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y].HasPrayerSpell)
                                        this.CastSpell(this.PrayerSpell, new uint?());
                                    if (this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y].SafeToDropNecklace)
                                    {
                                        if (this.HasItem(this.PrayerNeck))
                                            this.DropItems(this.PrayerNeck);
                                        else if (!this.HasItem(this.PrayerNeck))
                                            this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                                    }
                                }
                                else if (this.Tab.prayxy.Checked && this.Tab.prayxytext.Text.Contains(","))
                                {
                                    string[] strArray = this.Tab.prayxytext.Text.Split(',');
                                    int x = int.Parse(strArray[0]);
                                    int y = int.Parse(strArray[1]);
                                    if (this.ServerLocation.WithinSquare(new Location(x, y), 2))
                                    {
                                        if (this.HasItem(this.PrayerNeck))
                                        {
                                            foreach (Item obj in this.Inventory)
                                            {
                                                if (obj != null && obj.Name == this.PrayerNeck)
                                                {
                                                    this.Drop(x, y, obj.InventorySlot, 1);
                                                    break;
                                                }
                                            }
                                        }
                                        else if (!this.HasItem(this.PrayerNeck))
                                            this.Pickup(x, y);
                                    }
                                }
                                if (this.Currentnpctext.StartsWith("You have lost touch"))
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)245, (byte)0, (byte)0, (byte)1);
                                if (this.Currentnpctext.Contains("Alone"))
                                {
                                    if (this.Tab.useprayassistant.Checked && this.Tab.prayerassistant.Text != string.Empty)
                                    {
                                        this.assisted = false;
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)1, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.Currentpopuptype != 4);
                                        if (this.Currentpopuptype == 4)
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)96, (byte)2, this.Tab.prayerassistant.Text, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (!this.assisted);
                                        if (this.Currentnpctext.Contains("Praise Another"))
                                        {
                                            if ((int)this.prayscript == (int)Server.Dialogs["Deoch Prayer"])
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)252, (byte)1, (byte)4, (byte)1);
                                            else
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)4, (byte)1);
                                        }
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.polishsuccess == 0);
                                        Thread.Sleep(200);
                                        this.polishsuccess = 0;
                                    }
                                    else
                                    {
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)1);
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (!this.Currentnpctext.Contains("Praise Another"));
                                        if (this.Currentnpctext.Contains("Praise Another"))
                                        {
                                            if ((int)this.prayscript == (int)Server.Dialogs["Deoch Prayer"])
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)252, (byte)1, (byte)4, (byte)1);
                                            else
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)4, (byte)1);
                                        }
                                        do
                                        {
                                            Thread.Sleep(200);
                                        }
                                        while (this.polishsuccess == 0);
                                        Thread.Sleep(200);
                                        this.polishsuccess = 0;
                                    }
                                }
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Equals("Tailoring (cowl)"))
                            {
                                this.impingskill = true;
                                if (!this.Tab.ExternalChat.Visible)
                                    this.Tab.BeginInvoke((Action)(() =>
                                   {
                                       this.Tab.ExternalChat.Text = this.Name + "'s Chat";
                                       this.Tab.ExternalChat.Visible = true;
                                       Rect rectangle = new Rect();
                                       if (!User32.GetWindowRect(this.mainProc.MainWindowHandle, out rectangle))
                                           return;
                                       this.Tab.ExternalChat.Location = new System.Drawing.Point(rectangle.left + 85, rectangle.top + 360);
                                   }));
                                Npc npcByName = this.FindNpcByName<Npc>("Brody");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    if (!this.HasItem("Cowl"))
                                    {
                                        while (!this.InventoryIsFull())
                                        {
                                            if (this.Statistics.Gold < 500U)
                                            {
                                                this.SendMessage("Not enough gold!", "red", false);
                                                this.Tab.impskillbutton.Text = "Start";
                                            }
                                            if (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                            {
                                                this.DialogueRespond(new uint?(npcByName.ID), "Buy Cowl");
                                                if (this.tooheavy)
                                                {
                                                    this.tooheavy = false;
                                                    goto label_544;
                                                }
                                                else if (this.distracted)
                                                {
                                                    this.distracted = false;
                                                    goto label_544;
                                                }
                                                else
                                                {
                                                    Thread.Sleep(200);
                                                    this.tailornoarmors = false;
                                                }
                                            }
                                            else
                                                goto label_544;
                                        }
                                        this.tailornoarmors = false;
                                    }
                                    else if (this.tailornoarmors)
                                    {
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)166, (byte)1);
                                        this.DropItems("Cowl");
                                        this.tailornoarmors = false;
                                        Thread.Sleep(1000);
                                        goto label_544;
                                    }
                                    else
                                    {
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Male Tailoring"]);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)30, (byte)1, (byte)1, (byte)1);
                                        if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                        {
                                            this.assisted = false;
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)38, (byte)1, (byte)1, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)43, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                            int num = 0;
                                            while (!this.assisted)
                                            {
                                                ++num;
                                                if (num <= 20)
                                                {
                                                    if (this.distracted)
                                                    {
                                                        this.distracted = false;
                                                        goto label_544;
                                                    }
                                                    else if (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                                        Thread.Sleep(200);
                                                    else
                                                        goto label_544;
                                                }
                                                else
                                                    goto label_544;
                                            }
                                            Thread.Sleep(200);
                                        }
                                        else
                                        {
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)38, (byte)1, (byte)2, (byte)1);
                                            Thread.Sleep(200);
                                        }
                                        this.RequestGroupList();
                                        if (!this.SafeToWalkFast)
                                            Thread.Sleep(4000);
                                    }
                                }
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Equals("Tailoring"))
                            {
                                this.impingskill = true;
                                if (!this.Tab.ExternalChat.Visible)
                                    this.Tab.BeginInvoke((Action)(() =>
                                   {
                                       this.Tab.ExternalChat.Text = this.Name + "'s Chat";
                                       this.Tab.ExternalChat.Visible = true;
                                       Rect rectangle = new Rect();
                                       if (!User32.GetWindowRect(this.mainProc.MainWindowHandle, out rectangle))
                                           return;
                                       this.Tab.ExternalChat.Location = new System.Drawing.Point(rectangle.left + 85, rectangle.top + 360);
                                   }));
                                Npc npc = (Npc)null;
                                if (this.MapInfo.Number == 423)
                                    npc = this.FindNpcByName<Npc>("Huberto");
                                else if (this.MapInfo.Number == 130)
                                    npc = this.FindNpcByName<Npc>("Brody");
                                else if (this.MapInfo.Number == 183)
                                    npc = this.FindNpcByName<Npc>("Arnljot");
                                else if (this.MapInfo.Number == 164)
                                    npc = this.FindNpcByName<Npc>("Hali");
                                if (npc != null && npc.IsOnScreen)
                                {
                                    if (!this.HasArmors())
                                    {
                                        this.Tab.impskillbutton.Text = "Start";
                                        this.SendMessage("Get more armors", (byte)0, false);
                                    }
                                    else if (this.tailornoarmors)
                                    {
                                        this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)166, (byte)1);
                                        this.DropArmors();
                                        this.tailornoarmors = false;
                                        Thread.Sleep(1000);
                                        goto label_544;
                                    }
                                    else
                                    {
                                        if (this.HasMArmors())
                                        {
                                            this.DialogueRespond(npc.ID, Server.Dialogs["Male Tailoring"]);
                                            this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)30, (byte)1, (byte)1, (byte)1);
                                        }
                                        else if (this.HasFArmors())
                                        {
                                            this.DialogueRespond(npc.ID, Server.Dialogs["Female Tailoring"]);
                                            this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Female Tailoring"], (byte)0, (byte)30, (byte)1, (byte)1, (byte)1);
                                        }
                                        if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                        {
                                            this.assisted = false;
                                            if (this.HasMArmors())
                                            {
                                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)38, (byte)1, (byte)1, (byte)1);
                                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)43, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                            }
                                            else if (this.HasFArmors())
                                            {
                                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Female Tailoring"], (byte)0, (byte)38, (byte)1, (byte)1, (byte)1);
                                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Female Tailoring"], (byte)0, (byte)43, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                            }
                                            int num = 0;
                                            while (!this.assisted)
                                            {
                                                ++num;
                                                if (num <= 20)
                                                {
                                                    if (this.distracted)
                                                    {
                                                        this.distracted = false;
                                                        goto label_544;
                                                    }
                                                    else if (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                                        Thread.Sleep(200);
                                                    else
                                                        goto label_544;
                                                }
                                                else
                                                    goto label_544;
                                            }
                                            Thread.Sleep(200);
                                        }
                                        else
                                        {
                                            if (this.HasMArmors())
                                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Male Tailoring"], (byte)0, (byte)38, (byte)1, (byte)2, (byte)1);
                                            else if (this.HasFArmors())
                                                this.PopupRespond(new uint?(npc.ID), Server.Dialogs["Female Tailoring"], (byte)0, (byte)38, (byte)1, (byte)2, (byte)1);
                                            Thread.Sleep(200);
                                        }
                                        this.RequestGroupList();
                                        if (!this.SafeToWalkFast)
                                            Thread.Sleep(4000);
                                    }
                                }
                            }
                            if (this.Tab.buygems.Checked && this.OutOfGems())
                            {
                                if (!this.InventoryIsFull())
                                {
                                    if (this.MapInfo.Number == 505)
                                        this.WalkToExact(22, 18);
                                    if (this.MapInfo.Number == 424)
                                    {
                                        Npc npcByName = this.FindNpcByName<Npc>("Braz");
                                        if (npcByName != null)
                                        {
                                            this.DialogueRespond(npcByName.ID, Server.Dialogs["Buy Gem"]);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Gem"], (byte)0, (byte)6, (byte)1);
                                            while (!this.InventoryIsFull())
                                            {
                                                if (this.Tab.beryl.Checked)
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Gem"], (byte)0, (byte)15, (byte)1, (byte)1, (byte)1);
                                                else if (this.Tab.coral.Checked)
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Gem"], (byte)0, (byte)15, (byte)1, (byte)2, (byte)1);
                                                else if (this.Tab.ruby.Checked)
                                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Gem"], (byte)0, (byte)15, (byte)1, (byte)3, (byte)1);
                                                Thread.Sleep(50);
                                            }
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Buy Gem"], (byte)0, (byte)14, (byte)1);
                                        }
                                    }
                                }
                            }
                            else if (this.Tab.buygems.Checked && this.MapInfo.Number == 424)
                                this.WalkToExact(12, 6);
                            else if (this.Tab.buygems.Checked && this.MapInfo.Number == 505 && (this.ServerLocation.X != 24 || this.ServerLocation.Y != 17))
                            {
                                this.WalkToExact(24, 17);
                                this.Tab.impskillbutton.Text = "Stop";
                            }
                            else if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Equals("Gem Polishing"))
                            {
                                this.impingskill = true;
                                if (!this.GemPolish.ContainsKey(this.ServerLocation.X.ToString() + "," + (object)this.ServerLocation.Y) && this.HasSpell("Gem Polishing", false))
                                {
                                    this.CastSpell("Gem Polishing", new uint?());
                                    Thread.Sleep(1000);
                                }
                                else if (DateTime.UtcNow.Subtract(this.GemPolish[this.ServerLocation.X.ToString() + "," + (object)this.ServerLocation.Y]).TotalSeconds < 57.0)
                                {
                                    this.DropGold(this.ServerLocation.X, this.ServerLocation.Y, 1U);
                                    while (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                    {
                                        Thread.Sleep(200);
                                        if (!(this.Currentnpctext != "You don't have any gems that may be polished any more than they are.") || !(this.Currentnpctext != "You've done all you can for these four Temuairan days.") || this.Currentnpctext.Contains("Alone"))
                                        {
                                            if (this.Currentnpctext == "You don't have any gems that may be polished any more than they are.")
                                            {
                                                this.SendMessage("All of your gems are polished!", (byte)0, false);
                                                this.Tab.impskillbutton.Text = "Start";
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gem Polishing"], (byte)0, (byte)34, (byte)1);
                                                break;
                                            }
                                            if (this.Currentnpctext == "You've done all you can for these four Temuairan days.")
                                            {
                                                if (this.Tab.requestlabor.Checked && this.Tab.requestlabornametext.Text != string.Empty)
                                                    this.Whisper(this.Tab.requestlabornametext.Text, this.Tab.requestlabormessagetext.Text);
                                                else
                                                    this.SendMessage("You are out of labor!", (byte)0, false);
                                                this.waitingforlabor = true;
                                                this.Tab.impskillbutton.Text = "Start";
                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gem Polishing"], (byte)0, (byte)13, (byte)1);
                                                break;
                                            }
                                            if (this.Currentnpctext.Contains("Alone"))
                                            {
                                                if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                                {
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gem Polishing"], (byte)0, (byte)39, (byte)1, (byte)1, (byte)1);
                                                    while (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                                    {
                                                        Thread.Sleep(200);
                                                        if (this.Currentpopuptype == 4 || this.Currentpopuptype == 10)
                                                        {
                                                            if (this.Currentpopuptype == 10)
                                                            {
                                                                if (this.outoflabor)
                                                                {
                                                                    if (this.Tab.requestlabor.Checked && this.Tab.requestlabornametext.Text != string.Empty)
                                                                        this.Whisper(this.Tab.requestlabornametext.Text, this.Tab.requestlabormessagetext.Text);
                                                                    else
                                                                        this.SendMessage("You are out of labor!", (byte)0, false);
                                                                    this.waitingforlabor = true;
                                                                    this.Tab.impskillbutton.Text = "Start";
                                                                    break;
                                                                }
                                                                this.SendMessage("All of your gems are polished!", (byte)0, false);
                                                                this.Tab.impskillbutton.Text = "Start";
                                                                break;
                                                            }
                                                            if (this.Currentpopuptype == 4)
                                                                this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gem Polishing"], (byte)0, (byte)44, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                                            while (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                                            {
                                                                Thread.Sleep(200);
                                                                if (this.Currentpopuptype == 10)
                                                                {
                                                                    Thread.Sleep(200);
                                                                    goto label_315;
                                                                }
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                                if (!this.Tab.useskillassistant.Checked)
                                                {
                                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Gem Polishing"], (byte)0, (byte)39, (byte)1, (byte)2, (byte)1);
                                                    while (!this.pause && !(this.Tab.impskillbutton.Text == "Start"))
                                                    {
                                                        Thread.Sleep(200);
                                                        if (this.Currentpopuptype == 10 || this.polishsuccess != 0)
                                                        {
                                                            Thread.Sleep(200);
                                                            if (this.polishsuccess == 1)
                                                            {
                                                                do
                                                                {
                                                                    Thread.Sleep(200);
                                                                }
                                                                while (this.dropitemslot == 0);
                                                                this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.dropitemslot, 1);
                                                                this.dropitemslot = 0;
                                                            }
                                                            this.polishsuccess = 0;
                                                            goto label_315;
                                                        }
                                                    }
                                                    break;
                                                }
                                                label_315:
                                                goto label_318;
                                            }
                                            else
                                                goto label_318;
                                        }
                                    }
                                    goto label_544;
                                }
                                else if (DateTime.UtcNow.Subtract(this.GemPolish[this.ServerLocation.X.ToString() + "," + (object)this.ServerLocation.Y]).TotalSeconds > 60.0)
                                {
                                    this.CastSpell("Gem Polishing", new uint?());
                                    Thread.Sleep(1000);
                                }
                                label_318:;
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Contains("Blade Smith"))
                            {
                                this.impingskill = true;
                                if (this.bladesmithnoswords)
                                {
                                    this.DropItems("Dirk");
                                    this.DropItems("Eppe");
                                    this.SendMessage("Out of dirk/eppe", (byte)0, false);
                                    this.Tab.impskillbutton.Text = "Start";
                                    this.bladesmithnoswords = false;
                                }
                                else if (!this.waitingforlabor && ((this.HasItem("Dirk") || this.HasItem("Eppe")) && this.MapInfo.Number == 420))
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Marcelo");
                                    if (npcByName != null && npcByName.IsOnScreen)
                                    {
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Sword Smith"]);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Sword Smith"], (byte)0, (byte)74, (byte)1, (byte)1, (byte)1);
                                        if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                        {
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Sword Smith"], (byte)0, (byte)82, (byte)1, (byte)1, (byte)1);
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Sword Smith"], (byte)0, (byte)87, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                        }
                                        else
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Sword Smith"], (byte)0, (byte)82, (byte)1, (byte)2, (byte)1);
                                        Thread.Sleep(1000);
                                    }
                                }
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Contains("Herbalist"))
                            {
                                this.impingskill = true;
                                if (this.has25hydele)
                                {
                                    string str = string.Empty;
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (obj != null && obj.InventorySlot == 1)
                                            str = obj.Name;
                                    }
                                    if (this.HasSkill("Herbal Lore", false))
                                    {
                                        while (!this.HasItem("Hydele deum"))
                                        {
                                            this.SendMessage("Identifying...", (byte)18, false);
                                            if (this.CanSkill("Herbal Lore", false))
                                            {
                                                foreach (Item obj in this.Inventory)
                                                {
                                                    if (obj != null && obj.InventorySlot == 1 && obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 54)
                                                    {
                                                        this.blocklores = true;
                                                        if (this.CanSkill("Herbal Lore", false))
                                                            this.UseSkill("Herbal Lore", 0U);
                                                        do
                                                        {
                                                            Thread.Sleep(200);
                                                        }
                                                        while (this.blocklores);
                                                        break;
                                                    }
                                                    if (obj != null && obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 54)
                                                    {
                                                        this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                        Thread.Sleep(350);
                                                        break;
                                                    }
                                                }
                                            }
                                            Thread.Sleep(200);
                                        }
                                        while (this.HasItem("Hydele deum"))
                                        {
                                            if (this.HasItem("Hydele deum"))
                                            {
                                                foreach (Item obj in this.Inventory)
                                                {
                                                    if (obj != null && obj.Name == "Hydele deum")
                                                    {
                                                        this.Drop(this.ServerLocation.X, this.ServerLocation.Y, 1, 25);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (str != string.Empty)
                                        {
                                            foreach (Item obj in this.Inventory)
                                            {
                                                if (obj != null && obj.Name == str)
                                                {
                                                    this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                    Thread.Sleep(350);
                                                }
                                            }
                                        }
                                        this.SendMessage("", (byte)18, false);
                                        this.has25hydele = false;
                                    }
                                }
                                else if (this.has25betony)
                                {
                                    string str = string.Empty;
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (obj != null && obj.InventorySlot == 1)
                                            str = obj.Name;
                                    }
                                    if (this.HasSkill("Herbal Lore", false))
                                    {
                                        while (!this.HasItem("Betony deum"))
                                        {
                                            this.SendMessage("Identifying...", (byte)18, false);
                                            if (this.CanSkill("Herbal Lore", false))
                                            {
                                                foreach (Item obj in this.Inventory)
                                                {
                                                    if (obj != null && obj.InventorySlot == 1 && obj.Name == "Vanilla Potion")
                                                    {
                                                        this.blocklores = true;
                                                        if (this.CanSkill("Herbal Lore", false))
                                                            this.UseSkill("Herbal Lore", 0U);
                                                        do
                                                        {
                                                            Thread.Sleep(200);
                                                        }
                                                        while (this.blocklores);
                                                        break;
                                                    }
                                                    if (obj != null && obj.Name == "Vanilla Potion")
                                                    {
                                                        this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                        Thread.Sleep(350);
                                                        break;
                                                    }
                                                }
                                            }
                                            Thread.Sleep(200);
                                        }
                                        while (this.HasItem("Betony deum"))
                                        {
                                            if (this.HasItem("Betony deum"))
                                            {
                                                foreach (Item obj in this.Inventory)
                                                {
                                                    if (obj != null && obj.Name == "Betony deum")
                                                    {
                                                        this.Drop(this.ServerLocation.X, this.ServerLocation.Y, 1, 25);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (str != string.Empty)
                                        {
                                            foreach (Item obj in this.Inventory)
                                            {
                                                if (obj != null && obj.Name == str)
                                                {
                                                    this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                    Thread.Sleep(350);
                                                }
                                            }
                                        }
                                        this.SendMessage("", (byte)18, false);
                                        this.has25betony = false;
                                    }
                                }
                                else if (this.has25personaca)
                                {
                                    string str = string.Empty;
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (obj != null && obj.InventorySlot == 1)
                                            str = obj.Name;
                                    }
                                    if (this.HasSkill("Herbal Lore", false))
                                    {
                                        while (!this.HasItem("Personaca deum"))
                                        {
                                            this.SendMessage("Identifying...", (byte)18, false);
                                            if (this.CanSkill("Herbal Lore", false))
                                            {
                                                foreach (Item obj in this.Inventory)
                                                {
                                                    if (obj != null && obj.InventorySlot == 1 && obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 55)
                                                    {
                                                        this.blocklores = true;
                                                        if (this.CanSkill("Herbal Lore", false))
                                                            this.UseSkill("Herbal Lore", 0U);
                                                        do
                                                        {
                                                            Thread.Sleep(200);
                                                        }
                                                        while (this.blocklores);
                                                        break;
                                                    }
                                                    if (obj != null && obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 55)
                                                    {
                                                        this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                        Thread.Sleep(350);
                                                        break;
                                                    }
                                                }
                                            }
                                            Thread.Sleep(200);
                                        }
                                        while (this.HasItem("Personaca deum"))
                                        {
                                            if (this.HasItem("Personaca deum"))
                                            {
                                                foreach (Item obj in this.Inventory)
                                                {
                                                    if (obj != null && obj.Name == "Personaca deum")
                                                    {
                                                        this.Drop(this.ServerLocation.X, this.ServerLocation.Y, 1, 25);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (str != string.Empty)
                                        {
                                            foreach (Item obj in this.Inventory)
                                            {
                                                if (obj != null && obj.Name == str)
                                                {
                                                    this.SwitchSlots((byte)0, obj.InventorySlot, 1);
                                                    Thread.Sleep(350);
                                                }
                                            }
                                        }
                                        this.SendMessage("", (byte)18, false);
                                        this.has25personaca = false;
                                    }
                                }
                                else
                                {
                                    if (this.MapInfo.Number == 622 && this.ClosestHerbNode() != null)
                                    {
                                        if (this.herbnodewaittime != DateTime.MinValue && DateTime.UtcNow.Subtract(this.herbnodewaittime).TotalSeconds > 3.0)
                                        {
                                            if (Server.BetonyNodes.ContainsKey(this.ClosestHerbNode().X.ToString() + "," + (object)this.ClosestHerbNode().Y + ",622"))
                                                Server.BetonyNodes[this.ClosestHerbNode().X.ToString() + "," + (object)this.ClosestHerbNode().Y + ",622"].Active = false;
                                            if (Server.PersonacaNodes.ContainsKey(this.ClosestHerbNode().X.ToString() + "," + (object)this.ClosestHerbNode().Y + ",622"))
                                                Server.PersonacaNodes[this.ClosestHerbNode().X.ToString() + "," + (object)this.ClosestHerbNode().Y + ",622"].Active = false;
                                            if (Server.HydeleNodes.ContainsKey(this.ClosestHerbNode().X.ToString() + "," + (object)this.ClosestHerbNode().Y + ",622"))
                                                Server.HydeleNodes[this.ClosestHerbNode().X.ToString() + "," + (object)this.ClosestHerbNode().Y + ",622"].Active = false;
                                            this.herbnodewaittime = DateTime.MinValue;
                                        }
                                        else if (this.herbnodewaittime == DateTime.MinValue)
                                        {
                                            if (this.ServerLocation.X == this.ClosestHerbNode().X && this.ServerLocation.Y == this.ClosestHerbNode().Y)
                                            {
                                                this.Refresh();
                                                this.herbnodewaittime = DateTime.UtcNow;
                                            }
                                            else
                                                this.WalkToExact(this.ClosestHerbNode().X, this.ClosestHerbNode().Y);
                                        }
                                    }
                                    if (this.MapInfo.Number != 622 || this.ClosestHerbNode() != null)
                                        ;
                                    if (this.Currentnpctext.Contains("Alone") && this.Currentnpctext.Contains("Prepare"))
                                    {
                                        this.herbnodewaittime = DateTime.MinValue;
                                        if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                        {
                                            uint currentnpcpopupId = this.CurrentnpcpopupID;
                                            this.assisted = false;
                                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Ancusa"], (byte)0, (byte)84, (byte)1, (byte)1, (byte)1);
                                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Ancusa"], (byte)0, (byte)92, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                            while (!this.assisted)
                                            {
                                                Thread.Sleep(200);
                                                if (this.Tab.impskillbutton.Text == "Start" || this.pause || !this.Tab.useskillassistant.Checked)
                                                    break;
                                            }
                                            this.RequestGroupList();
                                        }
                                        else
                                        {
                                            this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Ancusa"], (byte)0, (byte)84, (byte)1, (byte)2, (byte)1);
                                            do
                                            {
                                                Thread.Sleep(200);
                                            }
                                            while (this.Currentpopuptype != 10);
                                            this.RequestGroupList();
                                        }
                                    }
                                    if (this.Currentnpctext.Contains(" cannot prepare more "))
                                    {
                                        this.herbnodewaittime = DateTime.MinValue;
                                        if (this.Tab.requestlabor.Checked && this.Tab.requestlabornametext.Text != string.Empty)
                                            this.Whisper(this.Tab.requestlabornametext.Text, this.Tab.requestlabormessagetext.Text);
                                        else
                                            this.SendMessage("You are out of labor!", (byte)0, false);
                                        this.waitingforlabor = true;
                                        this.outoflabor = true;
                                        this.Tab.impskillbutton.Text = "Start";
                                        this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Ancusa"], (byte)0, (byte)11, (byte)1);
                                    }
                                }
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Equals("Wizardry Researcher"))
                            {
                                this.impingskill = true;
                                if (this.Currentnpctext.StartsWith("Do you need help before"))
                                {
                                    this.wizresearchID = this.CurrentnpcpopupID;
                                    this.PopupRespond(new uint?(this.wizresearchID), Server.Dialogs["Wizardry Research"], (byte)0, (byte)20, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(this.wizresearchID), Server.Dialogs["Wizardry Research"], (byte)0, (byte)26, (byte)1, (byte)1, (byte)1);
                                    if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                    {
                                        this.assisted = false;
                                        this.PopupRespond(new uint?(this.wizresearchID), Server.Dialogs["Wizardry Research"], (byte)0, (byte)57, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(this.wizresearchID), Server.Dialogs["Wizardry Research"], (byte)0, (byte)62, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                        while (!this.assisted)
                                        {
                                            Thread.Sleep(200);
                                            if (this.Tab.impskillbutton.Text == "Start" || this.pause || !this.Tab.useskillassistant.Checked)
                                                break;
                                        }
                                        this.assisted = false;
                                        this.RequestGroupList();
                                    }
                                    else
                                    {
                                        this.PopupRespond(new uint?(this.wizresearchID), Server.Dialogs["Wizardry Research"], (byte)0, (byte)57, (byte)1, (byte)2, (byte)1);
                                        while (this.Currentpopuptype != 10)
                                            Thread.Sleep(200);
                                        this.RequestGroupList();
                                    }
                                }
                                else if (this.Currentnpctext.StartsWith("You have researched already"))
                                {
                                    if (this.Tab.requestlabor.Checked && this.Tab.requestlabornametext.Text != string.Empty)
                                        this.Whisper(this.Tab.requestlabornametext.Text, this.Tab.requestlabormessagetext.Text);
                                    else
                                        this.SendMessage("You are out of labor!", (byte)0, false);
                                    this.waitingforlabor = true;
                                    this.outoflabor = true;
                                    Thread.Sleep(200);
                                    this.PopupRespond(new uint?(this.CurrentnpcpopupID), Server.Dialogs["Wizardry Research"], (byte)0, (byte)13, (byte)1);
                                    this.Tab.impskillbutton.Text = "Start";
                                }
                                else if (!this.outoflabor && !this.assisted)
                                {
                                    this.Refresh();
                                    Thread.Sleep(1000);
                                }
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Equals("Elementalist"))
                            {
                                this.impingskill = true;
                                if (this.Currentnpctext.Contains("Do not touch the nadurra"))
                                {
                                    ushort dialog = Server.Dialogs["Nadurra Sal"];
                                    if (this.Currentnpctext.Contains("athar"))
                                        dialog = Server.Dialogs["Nadurra Athar"];
                                    else if (this.Currentnpctext.Contains("creag"))
                                        dialog = Server.Dialogs["Nadurra Creag"];
                                    else if (this.Currentnpctext.Contains("srad"))
                                        dialog = Server.Dialogs["Nadurra Srad"];
                                    uint currentnpcpopupId = this.CurrentnpcpopupID;
                                    if (this.Tab.useskillassistant.Checked && this.Tab.skillassistant.Text != string.Empty)
                                    {
                                        this.assisted = false;
                                        this.PopupRespond(new uint?(currentnpcpopupId), dialog, (byte)0, (byte)59, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(currentnpcpopupId), dialog, (byte)0, (byte)67, (byte)2, this.Tab.skillassistant.Text, (byte)1);
                                        while (!this.assisted)
                                        {
                                            Thread.Sleep(200);
                                            if (this.Tab.impskillbutton.Text == "Start" || this.pause || !this.Tab.useskillassistant.Checked)
                                                break;
                                        }
                                        this.assisted = false;
                                        this.RequestGroupList();
                                        this.Refresh();
                                    }
                                    else
                                    {
                                        this.polishsuccess = 0;
                                        this.PopupRespond(new uint?(currentnpcpopupId), dialog, (byte)0, (byte)59, (byte)1, (byte)2, (byte)1);
                                        while (this.polishsuccess == 0)
                                        {
                                            Thread.Sleep(200);
                                            if (this.Tab.impskillbutton.Text == "Start" || this.pause || !this.Tab.useskillassistant.Checked)
                                                break;
                                        }
                                        Thread.Sleep(700);
                                        this.polishsuccess = 0;
                                        this.RequestGroupList();
                                        this.Refresh();
                                    }
                                }
                            }
                            if (this.leavementor)
                            {
                                Npc npcByName = this.FindNpcByName<Npc>("Carlos");
                                if (npcByName != null && npcByName.IsOnScreen)
                                {
                                    this.DialogueRespond(npcByName.ID, Server.Dialogs["Mentor"]);
                                    if (Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)34, (byte)1, (byte)3, (byte)1);
                                    else
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)23, (byte)1, (byte)1, (byte)1);
                                    this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)218, (byte)1, (byte)2, (byte)1);
                                    this.leavementor = false;
                                    Thread.Sleep(10000);
                                }
                            }
                            if (this.Tab.vimpskillbutton && this.Tab.improveskill.Text.Equals("Mentor (rucesion)"))
                            {
                                Player[] playerArray = this.AnyPlayer();
                                if (this.checkingformentormarkname == string.Empty)
                                {
                                    foreach (Player player in playerArray)
                                    {
                                        if (player != null && Program.MainForm.labormulelist.Items[0].ToString().Contains(player.Name))
                                        {
                                            this.checkingformentormarkname = player.Name;
                                            this.checkingformentormarkid = player.ID;
                                            this.hidelegend = true;
                                            this.ClickEntity(player.ID);
                                        }
                                    }
                                }
                                if (this.hasamentor)
                                {
                                    if (DateTime.UtcNow.Subtract(this.Hasmentortimer).TotalSeconds > 2.0)
                                    {
                                        if (Server.Alts.ContainsKey(this.checkingformentormarkname.ToLower()) && !Server.Alts[this.checkingformentormarkname.ToLower()].leavementor)
                                            Server.Alts[this.checkingformentormarkname.ToLower()].leavementor = true;
                                        this.hidelegend = true;
                                        this.ClickEntity(this.checkingformentormarkid);
                                        this.Hasmentortimer = DateTime.UtcNow;
                                        this.hasamentor = false;
                                    }
                                }
                                else if (this.mentoraccept)
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Carlos");
                                    if (npcByName != null && npcByName.IsOnScreen)
                                    {
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Mentor"]);
                                        if (this.ihaveamentor)
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)34, (byte)1, (byte)1, (byte)1);
                                        else
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)28, (byte)1, (byte)1, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)41, (byte)2, this.checkingformentormarkname, (byte)1);
                                        this.mentoraccept = false;
                                        Thread.Sleep(10000);
                                    }
                                }
                                else if (this.rementor)
                                {
                                    Npc npcByName = this.FindNpcByName<Npc>("Carlos");
                                    if (npcByName != null && npcByName.IsOnScreen)
                                    {
                                        this.DialogueRespond(npcByName.ID, Server.Dialogs["Mentor"]);
                                        if (this.ihaveamentor)
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)34, (byte)1, (byte)2, (byte)1);
                                        else
                                            this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)28, (byte)1, (byte)2, (byte)1);
                                        this.PopupRespond(new uint?(npcByName.ID), Server.Dialogs["Mentor"], (byte)0, (byte)122, (byte)2, this.checkingformentormarkname, (byte)1);
                                        this.rementor = false;
                                        Thread.Sleep(10000);
                                    }
                                }
                            }
                            label_544:
                            this.CheckMob();
                            if (!this.Mobbed)
                                this.CheckLoot();
                            if (this.castonghosttimer != DateTime.MinValue && DateTime.UtcNow.Subtract(this.castonghosttimer).TotalSeconds > 7.0)
                            {
                                this.Refresh();
                                this.castonghosttimer = DateTime.MinValue;
                            }
                            this.InsectEventAssail();
                            if (!this.pausecast && !this.autowalkon && (this.Tab.useskillshidden.Checked ? (this.SpellBar.Contains((ushort)10) ? 1 : 0) : (!this.SpellBar.Contains((ushort)10) ? 1 : 0)) != 0)
                            {
                                this.SetMainTarget();
                                if (this.MainTarget != null && (this.Tab.equipweapon.Checked ? (this.BestWeapon() == string.Empty ? 1 : 0) : 1) != 0)
                                {
                                    this.ASRS();
                                    if ((this.Tab.asrs.Checked ? (!this.rsready && !this.asready || ((this.IgnoreHP(this.MainTarget.Image) ? (this.MainTarget.HpAmount <= 20.0 ? 1 : 0) : 0) != 0 || !this.MainTarget.Lured) ? 1 : (this.HasInfiniteMR(this.MainTarget.Image) ? 1 : 0)) : 1) != 0)
                                        this.AssailMonsters();
                                }
                            }
                            this.Heal();
                            if (this.restartloop)
                            {
                                this.restartloop = false;
                                goto label_1109;
                            }
                            else
                            {
                                this.AiteFas();
                                if (this.restartloop)
                                {
                                    this.restartloop = false;
                                    goto label_1109;
                                }
                                else
                                {
                                    this.BeagCradh();
                                    if (this.restartloop)
                                    {
                                        this.restartloop = false;
                                        goto label_1109;
                                    }
                                    else
                                    {
                                        this.OtherSpells();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            goto label_1109;
                                        }
                                        else
                                        {
                                            if (!this.pausecast)
                                            {
                                                if (this.Tab.lurewithspells.Checked && this.Tab.lurespells.SelectedItem != null || this.Tab.lurewithlamh.Checked)
                                                {
                                                    if ((uint)(((IEnumerable<Npc>)this.TargetArray()).Count<Npc>() - ((IEnumerable<Npc>)this.IgnoreLureArray()).Count<Npc>()) > 0U)
                                                    {
                                                        int num = 0;
                                                        foreach (Npc target in this.TargetArray())
                                                        {
                                                            if (target != null && target.IsOnScreen && target.Lured && !this.IgnoreLure(target.Image))
                                                                ++num;
                                                        }
                                                        if ((Decimal)num >= this.Tab.mobsize.Value)
                                                            this.luring = false;
                                                        else if ((long)num == (long)(uint)(((IEnumerable<Npc>)this.TargetArray()).Count<Npc>() - ((IEnumerable<Npc>)this.IgnoreLureArray()).Count<Npc>()))
                                                        {
                                                            this.luring = false;
                                                        }
                                                        else
                                                        {
                                                            foreach (Npc target in this.TargetArray())
                                                            {
                                                                if (target != null && target.IsOnScreen && !target.Lured && !this.IgnoreLure(target.Image))
                                                                {
                                                                    this.luring = true;
                                                                    if (this.Tab.lurewithlamh.Checked)
                                                                    {
                                                                        if (this.HasSpell("beag athar lamh", false))
                                                                            this.CastSpell("beag athar lamh", new uint?());
                                                                        else if (this.HasSpell("beag srad lamh", false))
                                                                            this.CastSpell("beag srad lamh", new uint?());
                                                                        else if (this.HasSpell("athar lamh", false))
                                                                            this.CastSpell("athar lamh", new uint?());
                                                                        else if (this.HasSpell("srad lamh", false))
                                                                            this.CastSpell("srad lamh", new uint?());
                                                                        else if (this.HasSpell("Howl", false))
                                                                            this.CastSpell("Howl", new uint?());
                                                                    }
                                                                    else if (this.Tab.lurespellwith != null && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.lurespellwith.Name].ManaCost)
                                                                    {
                                                                        if (this.Tab.onlylurewithmp.Checked && this.Tab.onlylurewithmpamount.Text != string.Empty)
                                                                        {
                                                                            if (this.Statistics.CurrentMP > uint.Parse(this.Tab.onlylurewithmpamount.Text) && this.HasSpell(this.Tab.lurespellwith.Name, false))
                                                                                this.CastSpell(this.Tab.lurespellwith.Name, new uint?(target.ID));
                                                                        }
                                                                        else if (this.HasSpell(this.Tab.lurespellwith.Name, false))
                                                                            this.CastSpell(this.Tab.lurespellwith.Name, new uint?(target.ID));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                        this.luring = false;
                                                }
                                                if (!this.Tab.lurewithspells.Checked || this.Tab.lurewithspells.Checked && !this.luring)
                                                {
                                                    this.SpellMonsters();
                                                    if (this.monsterloop)
                                                    {
                                                        this.monsterloop = false;
                                                        goto label_1109;
                                                    }
                                                }
                                            }
                                            if ((this.Tab.vaocurse || this.autowalkon && this.Tab.walkao.Checked) && !this.aocradhsbefore)
                                            {
                                                if (this.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                                    this.CastSpell("ao ard cradh", new uint?(this.PlayerID));
                                                if (this.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                                    this.CastSpell("ao mor cradh", new uint?(this.PlayerID));
                                                if (this.SpellBar.Contains((ushort)82) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                                    this.CastSpell("ao cradh", new uint?(this.PlayerID));
                                                if (this.SpellBar.Contains((ushort)5) && !this.Tab.vselfbc && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                                    this.CastSpell("ao beag cradh", new uint?(this.PlayerID));
                                            }
                                            if ((this.Tab.vaocurse || this.autowalkon && this.Tab.walkao.Checked) && (!this.aocradhsbefore && this.MapInfo.Number != 509 && (!this.SpellBar.Contains((ushort)89) && this.SpellBar.Contains((ushort)133))) && (this.Characters.ContainsKey(this.PlayerID) && !this.Characters[this.PlayerID].hasdarkerseal) && (DateTime.UtcNow.Subtract(this.grimescenttime).TotalSeconds > 11.0 && !this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                this.UseItem("Grime Scent");
                                                this.grimescenttime = DateTime.UtcNow;
                                            }
                                            if (this.Tab.vselfbc && !this.beagcradhbefore && (!this.SpellBar.Contains((ushort)5) && !this.SpellBar.Contains((ushort)84)) && (!this.SpellBar.Contains((ushort)83) && !this.SpellBar.Contains((ushort)82) && !this.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                            {
                                                this.CastSpell("beag cradh", new uint?(this.PlayerID));
                                                this.restartloop = true;
                                            }
                                            if (this.Tab.targetgroup != null)
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                                    {
                                                        if (this.Tab.targetgroup.aocursesgroup.Checked && !this.aocradhsbefore)
                                                        {
                                                            if (client.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                                                this.CastSpell("ao ard cradh", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                                                this.CastSpell("ao mor cradh", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)82) && !this.Tab.targetgroup.ignorebardogroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                                                this.CastSpell("ao cradh", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)5) && !this.Tab.targetgroup.beagcradhgroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                                                this.CastSpell("ao beag cradh", new uint?(client.PlayerID));
                                                        }
                                                        if (this.Tab.targetgroup.beagcradhgroup.Checked && !this.beagcradhbefore && (!client.SpellBar.Contains((ushort)5) && !client.SpellBar.Contains((ushort)84)) && (!client.SpellBar.Contains((ushort)83) && !client.SpellBar.Contains((ushort)82) && !client.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                                        {
                                                            this.CastSpell("beag cradh", new uint?(client.PlayerID));
                                                            this.restartloop = true;
                                                        }
                                                    }
                                                }
                                                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                {
                                                    if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen)
                                                    {
                                                        if (this.Tab.targetgroup.aocursesgroup.Checked && !this.aocradhsbefore)
                                                        {
                                                            if (Server.StaticCharacters[player.ID].hasardcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                                                this.CastSpell("ao ard cradh", new uint?(player.ID));
                                                            if (Server.StaticCharacters[player.ID].hasmorcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                                                this.CastSpell("ao mor cradh", new uint?(player.ID));
                                                            if (Server.StaticCharacters[player.ID].hascradh && !this.Tab.targetgroup.ignorebardogroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                                                this.CastSpell("ao cradh", new uint?(player.ID));
                                                            if (Server.StaticCharacters[player.ID].hasbeagcradh && !this.Tab.targetgroup.beagcradhgroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                                                this.CastSpell("ao beag cradh", new uint?(player.ID));
                                                        }
                                                        if (this.Tab.targetgroup.beagcradhgroup.Checked && !this.beagcradhbefore && (!Server.StaticCharacters[player.ID].hasbeagcradh && !Server.StaticCharacters[player.ID].hascradh) && (!Server.StaticCharacters[player.ID].hasmorcradh && !Server.StaticCharacters[player.ID].hasardcradh && (!Server.StaticCharacters[player.ID].hasdarkseal && !Server.StaticCharacters[player.ID].hasdarkerseal)) && (!Server.StaticCharacters[player.ID].hasdemise && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost))
                                                        {
                                                            this.CastSpell("beag cradh", new uint?(player.ID));
                                                            this.restartloop = true;
                                                        }
                                                    }
                                                }
                                            }
                                            if (this.Tab.allalts != null)
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen) && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                                    {
                                                        if (this.Tab.allalts.vaocurses && !this.aocradhsbefore)
                                                        {
                                                            if (client.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                                                this.CastSpell("ao ard cradh", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                                                this.CastSpell("ao mor cradh", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)82) && !this.Tab.allalts.vignorebardo && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                                                this.CastSpell("ao cradh", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)5) && !this.Tab.allalts.vbeagcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                                                this.CastSpell("ao beag cradh", new uint?(client.PlayerID));
                                                        }
                                                        if (this.Tab.allalts.vbeagcradh && !this.beagcradhbefore && (!client.SpellBar.Contains((ushort)5) && !client.SpellBar.Contains((ushort)84)) && (!client.SpellBar.Contains((ushort)83) && !client.SpellBar.Contains((ushort)82) && !client.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                                        {
                                                            this.CastSpell("beag cradh", new uint?(client.PlayerID));
                                                            this.restartloop = true;
                                                        }
                                                    }
                                                }
                                            }
                                            if (this.targetplayer.Count > 0)
                                            {
                                                foreach (targetPlayer targetPlayer in this.targetplayer)
                                                {
                                                    if (targetPlayer != null)
                                                    {
                                                        this.thename = targetPlayer.Text;
                                                        if (this.alts.Contains((object)this.thename.ToLower()))
                                                        {
                                                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                            {
                                                                if (client != null)
                                                                {
                                                                    this.c = string.Equals(this.thename, client.Name, StringComparison.OrdinalIgnoreCase);
                                                                    if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                                                    {
                                                                        if (targetPlayer.aocursesplayer.Checked && !this.aocradhsbefore)
                                                                        {
                                                                            if (client.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                                                                this.CastSpell("ao ard cradh", new uint?(client.PlayerID));
                                                                            if (client.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                                                                this.CastSpell("ao mor cradh", new uint?(client.PlayerID));
                                                                            if (client.SpellBar.Contains((ushort)82) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                                                                this.CastSpell("ao cradh", new uint?(client.PlayerID));
                                                                            if (client.SpellBar.Contains((ushort)5) && !targetPlayer.beagcradhplayer.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                                                                this.CastSpell("ao beag cradh", new uint?(client.PlayerID));
                                                                        }
                                                                        if (targetPlayer.beagcradhplayer.Checked && !this.beagcradhbefore && (!client.SpellBar.Contains((ushort)5) && !client.SpellBar.Contains((ushort)84)) && (!client.SpellBar.Contains((ushort)83) && !client.SpellBar.Contains((ushort)82) && !client.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                                                        {
                                                                            this.CastSpell("beag cradh", new uint?(client.PlayerID));
                                                                            this.restartloop = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                            {
                                                                if (player != null && player.Name.Equals(this.thename, StringComparison.OrdinalIgnoreCase) && player.IsOnScreen)
                                                                {
                                                                    if (targetPlayer.aocursesplayer.Checked && !this.aocradhsbefore)
                                                                    {
                                                                        if (Server.StaticCharacters[player.ID].hasardcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                                                            this.CastSpell("ao ard cradh", new uint?(player.ID));
                                                                        if (Server.StaticCharacters[player.ID].hasmorcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                                                            this.CastSpell("ao mor cradh", new uint?(player.ID));
                                                                        if (Server.StaticCharacters[player.ID].hascradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                                                            this.CastSpell("ao cradh", new uint?(player.ID));
                                                                        if (Server.StaticCharacters[player.ID].hasbeagcradh && !targetPlayer.beagcradhplayer.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                                                            this.CastSpell("ao beag cradh", new uint?(player.ID));
                                                                    }
                                                                    if (targetPlayer.beagcradhplayer.Checked && !this.beagcradhbefore && (!Server.StaticCharacters[player.ID].hasbeagcradh && !Server.StaticCharacters[player.ID].hascradh) && (!Server.StaticCharacters[player.ID].hasmorcradh && !Server.StaticCharacters[player.ID].hasardcradh && (!Server.StaticCharacters[player.ID].hasdarkseal && !Server.StaticCharacters[player.ID].hasdarkerseal)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                                                    {
                                                                        this.CastSpell("beag cradh", new uint?(player.ID));
                                                                        this.restartloop = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (this.Tab.vdisenchanter && !this.disbefore && (!this.disIsSummoned || DateTime.UtcNow.Subtract(this.distime).TotalSeconds > 361.0) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Disenchanter"].ManaCost)
                                            {
                                                this.disstopwalk = true;
                                                this.CastSpell("Disenchanter", new uint?());
                                            }
                                            if ((this.Tab.vselfaopuinsein || this.autowalkon && this.Tab.walkao.Checked) && (!this.aopuinseinbefore && !this.Tab.vfungusbeetleextract) && (this.SpellBar.Contains((ushort)35) || this.SpellBar.Contains((ushort)141) || this.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                            {
                                                this.CastSpell("ao puinsein", new uint?(this.PlayerID));
                                                if (this.SpellBar.Contains((ushort)35))
                                                    this.SpellBar.Remove((ushort)35);
                                                else if (this.SpellBar.Contains((ushort)1))
                                                    this.SpellBar.Remove((ushort)1);
                                                else if (this.SpellBar.Contains((ushort)141))
                                                    this.SpellBar.Remove((ushort)141);
                                            }
                                            if (this.Tab.vselfregen && !this.SpellBar.Contains((ushort)146) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Regeneration 5"].ManaCost)
                                            {
                                                foreach (Spell spell in this.SpellBook)
                                                {
                                                    if (spell != null && spell.Name.Contains("Regeneration"))
                                                    {
                                                        this.CastSpell(spell.Name, new uint?(this.PlayerID));
                                                        break;
                                                    }
                                                }
                                            }
                                            if (this.Tab.vselfregen && !this.SpellBar.Contains((ushort)181) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Increased Regeneration"].ManaCost)
                                                this.CastSpell("Increased Regeneration", new uint?(this.PlayerID));
                                            if (this.Tab.vselfca && !this.SpellBar.Contains((ushort)150) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Counter Attack 5"].ManaCost)
                                            {
                                                foreach (Spell spell in this.SpellBook)
                                                {
                                                    if (spell != null && spell.Name.Contains("Counter Attack"))
                                                    {
                                                        this.CastSpell(spell.Name, new uint?(this.PlayerID));
                                                        break;
                                                    }
                                                }
                                            }
                                            if (this.Tab.vdragonsscale && !this.SpellBar.Contains((ushort)94) && (this.Statistics.CurrentMP > 0U && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                if (!this.SpellBar.Contains((ushort)10))
                                                    this.UseItem("Dragon's Scale");
                                            }
                                            else if (this.Tab.vselfarm && !this.SpellBar.Contains((ushort)94) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["armachd"].ManaCost)
                                                this.CastSpell("armachd", new uint?(this.PlayerID));
                                            if (this.Tab.vnervestimulant && !this.SpellBar.Contains((ushort)16) && (this.Statistics.CurrentMP > 0U && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                if (!this.SpellBar.Contains((ushort)10))
                                                    this.UseItem("Nerve Stimulant");
                                            }
                                            else if (this.Tab.vselfbean && !this.SpellBar.Contains((ushort)16) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor beannaich"].ManaCost)
                                            {
                                                if (this.HasSpell("mor beannaich", false))
                                                    this.CastSpell("mor beannaich", new uint?(this.PlayerID));
                                                else
                                                    this.CastSpell("beannaich", new uint?(this.PlayerID));
                                            }
                                            if (this.Tab.vmusclestimulant && !this.SpellBar.Contains((ushort)52) && (this.Statistics.CurrentMP > 0U && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                if (!this.SpellBar.Contains((ushort)10))
                                                    this.UseItem("Muscle Stimulant");
                                            }
                                            else if (this.Tab.vselffasdeireas && !this.SpellBar.Contains((ushort)52) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["fas deireas"].ManaCost)
                                                this.CastSpell("fas deireas", new uint?(this.PlayerID));
                                            if (this.Tab.vselfcreagneart && !this.SpellBar.Contains((ushort)13) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["creag neart"].ManaCost)
                                                this.CastSpell("creag neart", new uint?(this.PlayerID));
                                            if (this.Tab.vdragonsfire && !this.SpellBar.Contains((ushort)98) && (this.Statistics.CurrentMP > 0U && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name] && !this.SpellBar.Contains((ushort)10))
                                                this.UseItem("Dragon's Fire");
                                            if (this.Tab.vselfmist && !this.SpellBar.Contains((ushort)55) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Mist"].ManaCost)
                                                this.CastSpell("Mist", new uint?());
                                            if (this.Tab.targetgroup != null)
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                                    {
                                                        if (this.Tab.targetgroup.aopuinseingroup.Checked && !this.aopuinseinbefore && !this.Tab.vfungusbeetleextract && (client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                                        {
                                                            this.CastSpell("ao puinsein", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)35))
                                                                client.SpellBar.Remove((ushort)35);
                                                            else if (client.SpellBar.Contains((ushort)1))
                                                                client.SpellBar.Remove((ushort)1);
                                                            else if (client.SpellBar.Contains((ushort)141))
                                                                client.SpellBar.Remove((ushort)141);
                                                        }
                                                        if (this.Tab.targetgroup.armachdgroup.Checked && !client.SpellBar.Contains((ushort)94) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["armachd"].ManaCost)
                                                            this.CastSpell("armachd", new uint?(client.PlayerID));
                                                        if (this.Tab.targetgroup.beanngroup.Checked && !client.SpellBar.Contains((ushort)16) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor beannaich"].ManaCost)
                                                        {
                                                            if (this.HasSpell("mor beannaich", false))
                                                                this.CastSpell("mor beannaich", new uint?(client.PlayerID));
                                                            else
                                                                this.CastSpell("beannaich", new uint?(client.PlayerID));
                                                        }
                                                        if (this.Tab.targetgroup.creagneartgroup.Checked && !client.SpellBar.Contains((ushort)13) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["creag neart"].ManaCost)
                                                            this.CastSpell("creag neart", new uint?(client.PlayerID));
                                                        if (this.Tab.targetgroup.fasdeireasgroup.Checked && !client.SpellBar.Contains((ushort)52) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["fas deireas"].ManaCost)
                                                            this.CastSpell("fas deireas", new uint?(client.PlayerID));
                                                    }
                                                }
                                                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                {
                                                    if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen)
                                                    {
                                                        if (this.Tab.targetgroup.aopuinseingroup.Checked && !this.aopuinseinbefore && !this.Tab.vfungusbeetleextract && (Server.StaticCharacters[player.ID].hasswirlpoison || Server.StaticCharacters[player.ID].hasbubblepoison) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                                            this.CastSpell("ao puinsein", new uint?(player.ID));
                                                        if (this.Tab.targetgroup.armachdgroup.Checked && !Server.StaticCharacters[player.ID].hasarmachd && (long)this.Statistics.CurrentMP > (long)Server.SpellList["armachd"].ManaCost)
                                                            this.CastSpell("armachd", new uint?(player.ID));
                                                        if (this.Tab.targetgroup.beanngroup.Checked && !Server.StaticCharacters[player.ID].hasbeann && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor beannaich"].ManaCost)
                                                        {
                                                            if (this.HasSpell("mor beannaich", false))
                                                                this.CastSpell("mor beannaich", new uint?(player.ID));
                                                            else
                                                                this.CastSpell("beannaich", new uint?(player.ID));
                                                        }
                                                        if (this.Tab.targetgroup.creagneartgroup.Checked && !Server.StaticCharacters[player.ID].hascreagneart && (long)this.Statistics.CurrentMP > (long)Server.SpellList["creag neart"].ManaCost)
                                                            this.CastSpell("creag neart", new uint?(player.ID));
                                                    }
                                                }
                                            }
                                            if (this.Tab.allalts != null)
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen) && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                                    {
                                                        if (this.Tab.allalts.vaopuinsein && !this.aopuinseinbefore && (client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                                        {
                                                            this.CastSpell("ao puinsein", new uint?(client.PlayerID));
                                                            if (client.SpellBar.Contains((ushort)35))
                                                                client.SpellBar.Remove((ushort)35);
                                                            else if (client.SpellBar.Contains((ushort)1))
                                                                client.SpellBar.Remove((ushort)1);
                                                            else if (client.SpellBar.Contains((ushort)141))
                                                                client.SpellBar.Remove((ushort)141);
                                                        }
                                                        if (this.Tab.allalts.vregen && !client.SpellBar.Contains((ushort)146) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Regeneration 1"].ManaCost)
                                                        {
                                                            foreach (Spell spell in this.SpellBook)
                                                            {
                                                                if (spell != null && spell.Name.Contains("Regeneration"))
                                                                {
                                                                    this.CastSpell(spell.Name, new uint?(client.PlayerID));
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        if (this.Tab.allalts.vregen && !client.SpellBar.Contains((ushort)181) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Increased Regeneration"].ManaCost)
                                                            this.CastSpell("Increased Regeneration", new uint?(client.PlayerID));
                                                        if (this.Tab.allalts.vca && !client.SpellBar.Contains((ushort)150) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Counter Attack 1"].ManaCost)
                                                        {
                                                            foreach (Spell spell in this.SpellBook)
                                                            {
                                                                if (spell != null && spell.Name.Contains("Counter Attack"))
                                                                {
                                                                    this.CastSpell(spell.Name, new uint?(client.PlayerID));
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        if (this.Tab.allalts.varmachd && !client.SpellBar.Contains((ushort)94) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["armachd"].ManaCost)
                                                            this.CastSpell("armachd", new uint?(client.PlayerID));
                                                        if (this.Tab.allalts.vbeann && !client.SpellBar.Contains((ushort)16) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor beannaich"].ManaCost)
                                                        {
                                                            if (this.HasSpell("mor beannaich", false))
                                                                this.CastSpell("mor beannaich", new uint?(client.PlayerID));
                                                            else
                                                                this.CastSpell("beannaich", new uint?(client.PlayerID));
                                                        }
                                                        if (this.Tab.allalts.vfasdeireas && !client.SpellBar.Contains((ushort)52) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["fas deireas"].ManaCost)
                                                            this.CastSpell("fas deireas", new uint?(client.PlayerID));
                                                        if (this.Tab.allalts.vcreagneart && !client.SpellBar.Contains((ushort)13) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["creag neart"].ManaCost)
                                                            this.CastSpell("creag neart", new uint?(client.PlayerID));
                                                    }
                                                }
                                            }
                                            if (this.targetplayer.Count > 0)
                                            {
                                                foreach (targetPlayer targetPlayer in this.targetplayer)
                                                {
                                                    if (targetPlayer != null)
                                                    {
                                                        this.thename = targetPlayer.Text;
                                                        if (this.alts.Contains((object)this.thename.ToLower()))
                                                        {
                                                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                            {
                                                                if (client != null)
                                                                {
                                                                    this.c = string.Equals(this.thename, client.Name, StringComparison.OrdinalIgnoreCase);
                                                                    if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                                                    {
                                                                        if (targetPlayer.aopuinseinplayer.Checked && !this.aopuinseinbefore && (client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                                                        {
                                                                            this.CastSpell("ao puinsein", new uint?(client.PlayerID));
                                                                            if (client.SpellBar.Contains((ushort)35))
                                                                                client.SpellBar.Remove((ushort)35);
                                                                            else if (client.SpellBar.Contains((ushort)1))
                                                                                client.SpellBar.Remove((ushort)1);
                                                                            else if (client.SpellBar.Contains((ushort)141))
                                                                                client.SpellBar.Remove((ushort)141);
                                                                        }
                                                                        if (targetPlayer.regenplayer.Checked && !client.SpellBar.Contains((ushort)146) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Regeneration 1"].ManaCost)
                                                                        {
                                                                            foreach (Spell spell in this.SpellBook)
                                                                            {
                                                                                if (spell != null && spell.Name.Contains("Regeneration"))
                                                                                {
                                                                                    this.CastSpell(spell.Name, new uint?(client.PlayerID));
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (targetPlayer.regenplayer.Checked && !client.SpellBar.Contains((ushort)181) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Increased Regeneration"].ManaCost)
                                                                            this.CastSpell("Increased Regeneration", new uint?(client.PlayerID));
                                                                        if (targetPlayer.caplayer.Checked && !client.SpellBar.Contains((ushort)150) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Counter Attack 1"].ManaCost)
                                                                        {
                                                                            foreach (Spell spell in this.SpellBook)
                                                                            {
                                                                                if (spell != null && spell.Name.Contains("Counter Attack"))
                                                                                {
                                                                                    this.CastSpell(spell.Name, new uint?(client.PlayerID));
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (targetPlayer.armachdplayer.Checked && !client.SpellBar.Contains((ushort)94) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["armachd"].ManaCost)
                                                                            this.CastSpell("armachd", new uint?(client.PlayerID));
                                                                        if (targetPlayer.beannplayer.Checked && !client.SpellBar.Contains((ushort)16) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor beannaich"].ManaCost)
                                                                        {
                                                                            if (this.HasSpell("mor beannaich", false))
                                                                                this.CastSpell("mor beannaich", new uint?(client.PlayerID));
                                                                            else
                                                                                this.CastSpell("beannaich", new uint?(client.PlayerID));
                                                                        }
                                                                        if (targetPlayer.fasdeireasplayer.Checked && !client.SpellBar.Contains((ushort)52) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["fas deireas"].ManaCost)
                                                                            this.CastSpell("fas deireas", new uint?(client.PlayerID));
                                                                        if (targetPlayer.creagneartplayer.Checked && !client.SpellBar.Contains((ushort)13) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["creag neart"].ManaCost)
                                                                            this.CastSpell("creag neart", new uint?(client.PlayerID));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                            {
                                                                if (player != null && player.Name.Equals(this.thename, StringComparison.OrdinalIgnoreCase) && player.IsOnScreen)
                                                                {
                                                                    if (targetPlayer.aopuinseinplayer.Checked && !this.aopuinseinbefore && (Server.StaticCharacters[player.ID].hasswirlpoison || Server.StaticCharacters[player.ID].hasbubblepoison) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                                                        this.CastSpell("ao puinsein", new uint?(player.ID));
                                                                    if (targetPlayer.regenplayer.Checked && !Server.StaticCharacters[player.ID].hasregen && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Regeneration 1"].ManaCost)
                                                                    {
                                                                        foreach (Spell spell in this.SpellBook)
                                                                        {
                                                                            if (spell != null && spell.Name.Contains("Regeneration"))
                                                                            {
                                                                                this.CastSpell(spell.Name, new uint?(player.ID));
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    if (targetPlayer.caplayer.Checked && !Server.StaticCharacters[player.ID].hasca && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Counter Attack 1"].ManaCost)
                                                                    {
                                                                        foreach (Spell spell in this.SpellBook)
                                                                        {
                                                                            if (spell != null && spell.Name.Contains("Counter Attack"))
                                                                            {
                                                                                this.CastSpell(spell.Name, new uint?(player.ID));
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    if (targetPlayer.armachdplayer.Checked && !Server.StaticCharacters[player.ID].hasarmachd && (long)this.Statistics.CurrentMP > (long)Server.SpellList["armachd"].ManaCost)
                                                                        this.CastSpell("armachd", new uint?(player.ID));
                                                                    if (targetPlayer.beannplayer.Checked && !Server.StaticCharacters[player.ID].hasbeann && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor beannaich"].ManaCost)
                                                                    {
                                                                        if (this.HasSpell("mor beannaich", false))
                                                                            this.CastSpell("mor beannaich", new uint?(player.ID));
                                                                        else
                                                                            this.CastSpell("beannaich", new uint?(player.ID));
                                                                    }
                                                                    if (targetPlayer.creagneartplayer.Checked && !Server.StaticCharacters[player.ID].hascreagneart && (long)this.Statistics.CurrentMP > (long)Server.SpellList["creag neart"].ManaCost)
                                                                        this.CastSpell("creag neart", new uint?(player.ID));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (this.Tab.HideTrinketOptions.vanishingelixir.Checked && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name] && (this.HasItem("Vanishing Elixir") && this.Statistics.CurrentMP > 0U))
                                            {
                                                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                {
                                                    if (player != null && (int)player.ID != (int)this.PlayerID && (this.GroupMembers.Contains(player.Name) && player.Body != (byte)0) && player.IsOnScreen && (this.Tab.HideTrinketOptions.namelist.Items.Contains((object)player.Name.ToLower()) || this.Tab.HideTrinketOptions.hideallgroup.Checked))
                                                    {
                                                        this.UseItem("Vanishing Elixir");
                                                        if (this.Tab.selfhide.Checked)
                                                            this.MacroCast("Hide", new uint?());
                                                    }
                                                }
                                            }
                                            if (this.Tab.vmantidscent && !this.SpellBar.Contains((ushort)113) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                                            {
                                                if (this.HasItem("Potent Mantid Scent"))
                                                {
                                                    if (this.mantidtimer == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mantidtimer).Seconds > 10)
                                                    {
                                                        this.UseItem("Potent Mantid Scent");
                                                        this.mantidtimer = DateTime.UtcNow;
                                                    }
                                                }
                                                else if (this.HasItem("Mantid Scent") && (this.mantidtimer == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mantidtimer).Seconds > 10))
                                                {
                                                    this.UseItem("Mantid Scent");
                                                    this.mantidtimer = DateTime.UtcNow;
                                                }
                                            }
                                            if (this.Tab.vmusclestimulant && this.HasItem("Muscle Stimulant") && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (!client.SpellBar.Contains((ushort)52) && this.Statistics.CurrentMP > 0U))
                                                        this.UseItem("Muscle Stimulant");
                                                }
                                            }
                                            if (this.Tab.vnervestimulant && this.HasItem("Nerve Stimulant") && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (!client.SpellBar.Contains((ushort)16) && this.Statistics.CurrentMP > 0U))
                                                        this.UseItem("Nerve Stimulant");
                                                }
                                            }
                                            if (this.Tab.vdragonsscale && this.HasItem("Dragon's Scale") && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (!client.SpellBar.Contains((ushort)94) && this.Statistics.CurrentMP > 0U))
                                                        this.UseItem("Dragon's Scale");
                                                }
                                            }
                                            if (this.Tab.vdragonsfire && this.HasItem("Dragon's Fire") && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (!client.SpellBar.Contains((ushort)98) && this.Statistics.CurrentMP > 0U))
                                                        this.UseItem("Dragon's Fire");
                                                }
                                            }
                                            if ((this.Tab.vwakescroll || this.autowalkon && this.Tab.walkao.Checked) && (this.HasItem("Wake Scroll") && !this.wakescrollbefore && (this.MapInfo.Number != 509 && !this.SpellBar.Contains((ushort)10))) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                                            {
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && ((client.SpellBar.Contains((ushort)90) || client.SpellBar.Contains((ushort)101)) && this.Statistics.CurrentMP > 1000U))
                                                    {
                                                        this.UseItem("Wake Scroll");
                                                        Thread.Sleep(200);
                                                    }
                                                }
                                                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                {
                                                    if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen && (Server.StaticCharacters[player.ID].haspramh || Server.StaticCharacters[player.ID].haswff) && this.Statistics.CurrentMP > 1000U)
                                                    {
                                                        this.UseItem("Wake Scroll");
                                                        Thread.Sleep(200);
                                                    }
                                                }
                                            }
                                            if ((this.Tab.vfungusbeetleextract || this.autowalkon && this.Tab.walkao.Checked) && (this.HasItem("Fungus Beetle Extract") && !this.aopuinseinbefore && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name))) && Server.DARegged[this.Name])
                                            {
                                                if ((this.SpellBar.Contains((ushort)35) || this.SpellBar.Contains((ushort)141) || this.SpellBar.Contains((ushort)1)) && this.Statistics.CurrentMP > 2U)
                                                    this.UseItem("Fungus Beetle Extract");
                                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                                {
                                                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && ((client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && this.Statistics.CurrentMP > 2U))
                                                        this.UseItem("Fungus Beetle Extract");
                                                }
                                                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                                {
                                                    if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen && (Server.StaticCharacters[player.ID].hasswirlpoison || Server.StaticCharacters[player.ID].hasbubblepoison || Server.StaticCharacters[player.ID].hasct) && this.Statistics.CurrentMP > 2U)
                                                        this.UseItem("Fungus Beetle Extract");
                                                }
                                            }
                                            if (this.loot && !this.lootbefore)
                                                this.LootItems();
                                            if (this.Tab.vdropitemson && !this.dropbefore && this.Tab.dropitemslist.Items.Count > 0)
                                            {
                                                foreach (object obj in this.Tab.dropitemslist.Items)
                                                {
                                                    if (obj != null)
                                                        this.DropItems(obj.ToString());
                                                }
                                            }
                                            if ((this.Tab.dojo.Checked ? (this.MapInfo.Name.Contains("Training Dojo") ? 1 : 0) : (!this.Tab.dojo.Checked ? 1 : 0)) != 0 && !this.autowalkon)
                                            {
                                                if (this.Tab.MacroOptions.macroassail.Checked && !this.castingoneline)
                                                {
                                                    this.Assail();
                                                    if (this.MainTarget != null && this.MainTarget != this.MonsterInFront() && (this.MainTarget.DistanceFrom(this.ServerLocation) == 1 && !this.ImFacingMonster) && !this.ImFacingAnything)
                                                        this.FaceTarget(this.MainTarget.Location);
                                                }
                                                if (this.Tab.MacroOptions.macrospell.Checked && this.Tab.MacroOptions.macrospellslistview.Items.Count > 0)
                                                {
                                                    ListViewItem listViewItem1 = this.Tab.MacroOptions.macrospellslistview.Items[0];
                                                    foreach (ListViewItem listViewItem2 in this.Tab.MacroOptions.macrospellslistview.Items)
                                                    {
                                                        if (listViewItem2 != null && listViewItem2.Text != string.Empty)
                                                        {
                                                            if (listViewItem2.Text.StartsWith("Regeneration "))
                                                            {
                                                                if (!this.SpellBar.Contains((ushort)146))
                                                                    this.MacroCast(listViewItem2.Text, new uint?(this.PlayerID));
                                                                foreach (Character character in (IEnumerable<Character>)this.Characters.Values.OrderBy<Character, int>((Func<Character, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
                                                                {
                                                                    if (character != null && character.IsOnScreen && (character is Player && (character as Player).Body != (byte)0 || character is Npc && (character as Npc).Type == Npc.NpcType.NormalMonster) && !character.hasregen)
                                                                        this.MacroCast(listViewItem2.Text, new uint?(character.ID));
                                                                }
                                                            }
                                                            if (listViewItem2.Text.StartsWith("Counter Attack "))
                                                            {
                                                                if (!this.SpellBar.Contains((ushort)150))
                                                                    this.MacroCast(listViewItem2.Text, new uint?(this.PlayerID));
                                                                foreach (Character character in (IEnumerable<Character>)this.Characters.Values.OrderBy<Character, int>((Func<Character, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
                                                                {
                                                                    if (character != null && character.IsOnScreen && (character is Player && (character as Player).Body != (byte)0) && !character.hasca)
                                                                        this.MacroCast(listViewItem2.Text, new uint?(character.ID));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    string text1 = listViewItem1.Text;
                                                    string text2 = listViewItem1.SubItems[3].Text;
                                                    if (this.HasSpell(text1, false) && !text1.StartsWith("Regeneration ") && !text1.StartsWith("Counter Attack "))
                                                    {
                                                        if (text1.Contains("puinneag spiorad"))
                                                        {
                                                            foreach (Character character in (IEnumerable<Character>)this.Characters.Values.OrderBy<Character, int>((Func<Character, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
                                                            {
                                                                if (character != null && character.IsOnScreen && character is Player && this.GroupMembers.Contains(character.Name))
                                                                {
                                                                    this.MacroCast(text1, new uint?(character.ID));
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        else if (text2 == "none")
                                                            this.MacroCast(text1, new uint?());
                                                        else if (text2 == "self")
                                                            this.MacroCast(text1, new uint?(this.PlayerID));
                                                        else if (text2 == "monster")
                                                        {
                                                            foreach (Character character in (IEnumerable<Character>)this.Characters.Values.OrderBy<Character, int>((Func<Character, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
                                                            {
                                                                if (character != null && character is Npc && ((character as Npc).Type == Npc.NpcType.NormalMonster || (character as Npc).Type == Npc.NpcType.PassableMonster) && character.IsOnScreen)
                                                                {
                                                                    this.MacroCast(text1, new uint?(character.ID));
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (this.Tab.reequiparmor.Checked && (DateTime.UtcNow.Subtract(this.removedarmordelay).TotalSeconds > 2.0 && this.removedarmor != string.Empty && (this.armornow == string.Empty && !this.manualremovedarmor)) && this.HasItem(this.removedarmor))
                                            {
                                                this.UseItem(this.removedarmor);
                                                this.removedarmordelay = DateTime.UtcNow;
                                            }
                                            if (this.Tab.equipweapon.Checked && ((this.Tab.assail.Checked || this.Tab.useskills.Checked || this.Tab.asrs.Checked) && !this.SpellBar.Contains((ushort)10) && ((IEnumerable<Npc>)this.NearbyNormalMonsters()).Count<Npc>() > 0) && (this.BestWeapon() != string.Empty && this.staffnow != this.BestWeapon() && (this.EquipWeaponDelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.EquipWeaponDelay).TotalMilliseconds > 2000.0)))
                                            {
                                                if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                                                    this.MacroCast(this.druidform.Name, new uint?());
                                                this.UseItem(this.BestWeapon());
                                                this.EquipWeaponDelay = DateTime.UtcNow;
                                            }
                                            if (this.Tab.openveltchest.Checked && this.HasItem("Treasure Chest") && (this.openveltchestdelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.openveltchestdelay).TotalMilliseconds > 3000.0) && !this.ItemStackFull(1476, 20U) && !this.InventoryIsFull() && ((IEnumerable<Npc>)this.NearbyNormalMonsters()).Count<Npc>() == 0)
                                            {
                                                this.UseItem("Treasure Chest");
                                                this.openveltchestdelay = DateTime.UtcNow;
                                            }
                                            this.stopwalk = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch
                {
                }
                label_1109:
                Thread.Sleep(200);
            }
        }

        private void SetMainTarget()
        {
            try
            {
                if (this.Tab.attackleaderstarget.Checked && this.Tab.followplayer.Checked && (!this.Tab.followtarget.Text.ToLower().Equals(this.Name.ToLower()) && Server.Alts.ContainsKey(this.Tab.followtarget.Text)) && (Server.Alts[this.Tab.followtarget.Text].MainTarget != null && this.Characters.ContainsKey(Server.Alts[this.Tab.followtarget.Text].MainTarget.ID)) && this.Characters[Server.Alts[this.Tab.followtarget.Text].MainTarget.ID].IsOnScreen)
                    this.MainTarget = this.Characters[Server.Alts[this.Tab.followtarget.Text].MainTarget.ID] as Npc;
                else if (this.Tab.pigwalk.Checked && this.ImOnAMonster() != null)
                    this.MainTarget = this.ImOnAMonster();
                else if (this.ImFacingMonster && this.MonsterInFront() != null && this.MonsterInFront().Image != 705)
                    this.MainTarget = this.MonsterInFront();
                else if (this.SurroundedCount > 0)
                    this.MainTarget = this.HighestHPBesideMe();
                else if (this.MainTarget == null)
                    this.MainTarget = this.NearestMonster();
                else if (this.MainTarget != null && !this.MainTarget.IsOnScreen)
                    this.MainTarget = (Npc)null;
                if (this.MainTarget == null)
                    this.follow_walk = 0;
                if (this.SomeoneElseIsCloserTo(this.MainTarget) || (this.SpellBar.Contains((ushort)10) || !this.Tab.switchneck.Checked))
                    return;
                this.SetNecklace();
            }
            catch
            {
            }
        }

        private void ParalyzeForce()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            if (!this.Tab.pf.Checked || !this.canpf || !((Decimal)npcArray.Length >= this.Tab.pfmonsters.Value) || this.Statistics.CurrentMP <= 1000U)
                return;
            if (this.ServerLocation.Direction == Direction.North)
            {
                if (this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1) || this.PlayerAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1))
                {
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
                else if (this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1) || this.PlayerAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1))
                {
                    this.FaceTarget(new Location(this.ServerLocation.X, this.ServerLocation.Y + 1));
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
            }
            else if (this.ServerLocation.Direction == Direction.South)
            {
                if (this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1) || this.PlayerAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1))
                {
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
                else if (this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1) || this.PlayerAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1))
                {
                    this.FaceTarget(new Location(this.ServerLocation.X, this.ServerLocation.Y - 1));
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
            }
            else if (this.ServerLocation.Direction == Direction.West)
            {
                if (this.MonsterAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y) || this.PlayerAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y))
                {
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
                else if (this.MonsterAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y) || this.PlayerAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y))
                {
                    this.FaceTarget(new Location(this.ServerLocation.X + 1, this.ServerLocation.Y));
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
            }
            else if (this.ServerLocation.Direction == Direction.East)
            {
                if (this.MonsterAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y) || this.PlayerAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y))
                {
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
                else if (this.MonsterAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y) || this.PlayerAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y))
                {
                    this.FaceTarget(new Location(this.ServerLocation.X - 1, this.ServerLocation.Y));
                    this.UseSkill("Paralyze Force", 0U);
                    this.UseSkill("Animal Roar", 0U);
                    this.UseSkill("Ground Stomp", 0U);
                }
            }
        }

        private void SpecialArrow()
        {
            if (!this.staffnow.Contains("Bow"))
                return;
            if (this.MainTarget.IsInRSRange(this.ServerLocation, 12))
                this.UseSkill("Special Arrow Attack", 0U);
            else if (this.MainTarget.DistanceFrom(this.ServerLocation) <= 12 && (this.MainTarget.Location.X == this.ServerLocation.X || this.MainTarget.Location.Y == this.ServerLocation.Y))
            {
                this.FaceTarget(this.MainTarget.Location);
            }
            else
            {
                foreach (Character target in this.TargetArray())
                {
                    if (target.IsInRSRange(this.ServerLocation, 12))
                    {
                        this.UseSkill("Special Arrow Attack", 0U);
                        break;
                    }
                }
            }
        }

        private void AssailMonsters()
        {
            if (!this.Tab.assail.Checked || this.ImCasting || (this.MainTarget == null || this.MainTarget.Image == 864 || this.MainTarget.Image == 865))
                return;
            if (this.MainTarget == this.MonsterInFront())
                this.Assail();
            else if (this.MainTarget.DistanceFrom(this.ServerLocation) == 1)
                this.FaceTarget(this.MainTarget.Location);
            if (this.HasSkill("Arrow Shot", true) && this.staffnow.Contains("Bow"))
            {
                if (this.MainTarget.IsInRSRange(this.ServerLocation, 9))
                    this.UseMedSkill("Arrow Shot");
                else if (this.MainTarget.DistanceFrom(this.ServerLocation) <= 9 && (this.MainTarget.Location.X == this.ServerLocation.X || this.MainTarget.Location.Y == this.ServerLocation.Y))
                {
                    this.FaceTarget(this.MainTarget.Location);
                }
                else
                {
                    foreach (Character target in this.TargetArray())
                    {
                        if (target.IsInRSRange(this.ServerLocation, 9))
                        {
                            this.UseMedSkill("Arrow Shot");
                            break;
                        }
                    }
                }
            }
        }

        private void InsectEventAssail()
        {
            if (!this.Tab.insectassail.Checked || DateTime.UtcNow.Subtract(this.bugtimer).TotalSeconds < 4.0)
                return;
            foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
            {
                if (nearbyNormalMonster != null && nearbyNormalMonster.IsOnScreen && nearbyNormalMonster.DistanceFrom(this.ServerLocation) <= 2)
                {
                    this.AssailTwo();
                    if (this.Tab.useskills.Checked)
                    {
                        if (this.CanSkill("Poison Punch", false))
                            this.UseSkill("Poison Punch", 0U);
                        if (this.CanSkill("Wolf Fang Fist", false))
                            this.UseSkill("Wolf Fang Fist", 0U);
                        if (this.CanSkill("Kelberoth Strike", false))
                            this.UseSkill("Kelberoth Strike", 0U);
                        if (this.CanSkill("Whirlwind Attack", false))
                            this.UseSkill("Whirlwind Attack", 0U);
                        if (this.CanSkill("Cyclone Blade", false))
                            this.UseSkill("Cyclone Blade", 0U);
                        if (this.CanSkill("Mind Hymn", false))
                            this.UseSkill("Mind Hymn", 0U);
                        if (this.CanSkill("Draco Tail Kick", false))
                            this.UseSkill("Draco Tail Kick", 0U);
                        if (this.CanSkill("Talon Kick", true))
                            this.UseMedSkill("Talon Kick");
                        if (this.CanSkill("Sneak Flight", true))
                            this.UseMedSkill("Sneak Flight");
                        if (this.CanSkill("Venom Attack", true))
                            this.UseMedSkill("Venom Attack");
                        if (this.CanSkill("Dune Swipe", true))
                            this.UseMedSkill("Dune Swipe");
                        if (this.CanSkill("Wheel Kick", true))
                            this.UseMedSkill("Wheel Kick");
                        if (this.CanSkill("Cyclone Kick", false))
                            this.UseSkill("Cyclone Kick", 0U);
                        if (this.CanSkill("Raging Attack", false))
                            this.UseSkill("Raging Attack", 0U);
                        if (this.CanSkill("Wind Blade", false))
                            this.UseSkill("Wind Blade", 0U);
                        if (this.CanSkill("Eagle Strike", false))
                            this.UseSkill("Eagle Strike", 0U);
                        if (this.CanSkill("Sever", false))
                            this.UseSkill("Sever", 0U);
                        if (this.CanSkill("Pounce", true))
                            this.UseMedSkill("Pounce");
                        if (this.CanSkill("Strikedown", true))
                            this.UseMedSkill("Strikedown");
                        if (this.CanSkill("Instrumental Attack", true))
                            this.UseMedSkill("Instrumental Attack");
                        break;
                    }
                    break;
                }
            }
        }

        private void AssailTwo()
        {
            if (this.HasSkill("Assail", false))
            {
                this.UseSkill("Assail", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Double Punch", false))
            {
                this.UseSkill("Double Punch", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Assault", false))
            {
                this.UseSkill("Assault", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Wallop", false))
            {
                this.UseSkill("Wallop", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Clobber", false))
            {
                this.UseSkill("Clobber", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Long Strike", false))
            {
                this.UseSkill("Long Strike", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Thrash", false))
            {
                this.UseSkill("Thrash", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Midnight Slash", false))
            {
                this.UseSkill("Midnight Slash", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Elemental Bless", true))
            {
                this.UseMedSkill("Elemental Bless");
                Thread.Sleep(100);
            }
            if (this.HasSkill("Instrumental 1", false))
            {
                this.UseSkill("Instrumental 1", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Instrumental 2", false))
            {
                this.UseSkill("Instrumental 2", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Instrumental 3", false))
            {
                this.UseSkill("Instrumental 3", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Instrumental 4", false))
            {
                this.UseSkill("Instrumental 4", 0U);
                Thread.Sleep(100);
            }
            if (this.HasSkill("Instrumental 5", false))
            {
                this.UseSkill("Instrumental 5", 0U);
                Thread.Sleep(100);
            }
            if (!this.HasSkill("Instrumental 6", false))
                return;
            this.UseSkill("Instrumental 6", 0U);
            Thread.Sleep(100);
        }

        private void WFF()
        {
            if (this.CanSkill("Lullaby Punch", false))
            {
                this.UseSkill("Lullaby Punch", 0U);
            }
            else
            {
                if (!this.CanSkill("Wolf Fang Fist", false))
                    return;
                this.UseSkill("Wolf Fang Fist", 0U);
            }
        }

        private void UseCrasher()
        {
            if (!this.Tab.usecrasher.Checked || !this.CanSkill("Crasher", false) && !this.CanSkill("Execute", false) && (!this.CanSkill("Animal Feast", false) && !this.CanItem("Damage Scroll")) || (!this.HasItem("Hemloch") && !this.CanSkill("Auto Hemloch", false) && (!this.CanSkill("Mad Soul", false) || !this.CanSkill("Sacrifice", false)) || (this.GroupMembers.Count <= 0 || !Server.StaticCharacters.ContainsKey(this.PlayerID))) || (!Server.StaticCharacters[this.PlayerID].hasdion || 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[this.PlayerID].SpellAnimationHistory[244]).TotalSeconds < 17) && (!Server.StaticCharacters[this.PlayerID].hasironskin || 19 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[this.PlayerID].SpellAnimationHistory[89]).TotalSeconds < 17) && (!Server.StaticCharacters[this.PlayerID].hasdioncomlha || 20 - (int)DateTime.UtcNow.Subtract(Server.StaticCharacters[this.PlayerID].SpellAnimationHistory[93]).TotalSeconds < 17) || (this.MainTarget == null || this.MainTarget.DistanceFrom(this.ServerLocation) != 1))
                return;
            if (!this.MainTarget.IsInFront(this.ServerLocation))
                this.FaceTarget(this.MainTarget.Location);
            if ((this.Tab.fasedonly.Checked ? (!Server.StaticCharacters.ContainsKey(this.MainTarget.ID) || Server.StaticCharacters[this.MainTarget.ID] == null ? 0 : (Server.StaticCharacters[this.MainTarget.ID].hasfas ? 1 : 0)) : (!this.Tab.fasedonly.Checked ? 1 : 0)) != 0 && (this.Tab.cursedonly.Checked ? (!this.HasInfiniteMR(this.MainTarget.Image) ? (!Server.StaticCharacters.ContainsKey(this.MainTarget.ID) || Server.StaticCharacters[this.MainTarget.ID] == null ? 0 : (Server.StaticCharacters[this.MainTarget.ID].hascurse ? 1 : 0)) : 1) : (!this.Tab.cursedonly.Checked ? 1 : 0)) != 0 && (this.Tab.attackinfinitemr.Checked || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 40.0 && (this.strongskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.strongskilldelay).TotalMilliseconds > 1000.0)))
            {
                if (this.CanSkill("Mad Soul", false) && this.CanSkill("Sacrifice", false))
                {
                    this.UseSkill("Mad Soul", 0U);
                    this.UseSkill("Sacrifice", 0U);
                }
                else if (this.CanSkill("Auto Hemloch", false))
                    this.UseSkill("Auto Hemloch", 0U);
                else
                    this.UseItem("Hemloch");
                this.WFF();
                if (this.CanSkill("Crasher", false))
                    this.UseSkill("Crasher", 0U);
                else if (this.CanItem("Damage Scroll"))
                    this.UseItem("Damage Scroll");
                else if (this.CanSkill("Animal Feast", false))
                    this.UseSkill("Animal Feast", 0U);
                else if (this.CanSkill("Execute", false))
                    this.UseSkill("Execute", 0U);
                this.strongskilldelay = DateTime.UtcNow;
            }
        }

        private void UseSkills()
        {
            if (this.Tab.skillgrouprange.Checked && this.GroupMembers.Count > 0 && !this.GroupIsInRange((int)this.Tab.skillgrouprangenum.Value))
                return;
            if (this.Tab.useskills.Checked && this.HasSkill("Special Arrow Attack", false) && this.staffnow.Contains(" Bow") && ((this.Tab.fasedonly.Checked ? (!Server.StaticCharacters.ContainsKey(this.MainTarget.ID) || Server.StaticCharacters[this.MainTarget.ID] == null ? 0 : (Server.StaticCharacters[this.MainTarget.ID].hasfas ? 1 : 0)) : (!this.Tab.fasedonly.Checked ? 1 : 0)) != 0 && (this.Tab.cursedonly.Checked ? (!this.HasInfiniteMR(this.MainTarget.Image) ? (!Server.StaticCharacters.ContainsKey(this.MainTarget.ID) || Server.StaticCharacters[this.MainTarget.ID] == null ? 0 : (Server.StaticCharacters[this.MainTarget.ID].hascurse ? 1 : 0)) : 1) : (!this.Tab.cursedonly.Checked ? 1 : 0)) != 0))
            {
                if (this.HasItem("Dual Crystal Arrows") && this.ItemSlot("Dual Crystal Arrows") == 1)
                {
                    if (DateTime.UtcNow.Subtract(this.dcarrowtimer).TotalSeconds > 10.0 || this.dcarrowtimer == DateTime.MinValue)
                    {
                        this.SpecialArrow();
                        this.dcarrowtimer = DateTime.UtcNow;
                    }
                    else if (DateTime.UtcNow.Subtract(this.arrowswitchdelay).TotalMilliseconds > 1000.0 || this.arrowswitchdelay == DateTime.MinValue)
                    {
                        if (this.HasItem("Dual Crystal Arrows1") && (DateTime.UtcNow.Subtract(this.dcarrow1timer).TotalSeconds > 9.0 || this.dcarrow1timer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Dual Crystal Arrows1"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Crystal Arrow") && (DateTime.UtcNow.Subtract(this.carrowtimer).TotalSeconds > 9.0 || this.carrowtimer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Crystal Arrow"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Crystal Arrow1") && (DateTime.UtcNow.Subtract(this.carrow1timer).TotalSeconds > 9.0 || this.carrow1timer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Crystal Arrow1"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                    }
                }
                else if (this.HasItem("Dual Crystal Arrows1") && this.ItemSlot("Dual Crystal Arrows1") == 1)
                {
                    if (DateTime.UtcNow.Subtract(this.dcarrow1timer).TotalSeconds > 10.0 || this.dcarrow1timer == DateTime.MinValue)
                    {
                        this.SpecialArrow();
                        this.dcarrow1timer = DateTime.UtcNow;
                    }
                    else if (DateTime.UtcNow.Subtract(this.arrowswitchdelay).TotalMilliseconds > 1000.0 || this.arrowswitchdelay == DateTime.MinValue)
                    {
                        if (this.HasItem("Dual Crystal Arrows") && (DateTime.UtcNow.Subtract(this.dcarrowtimer).TotalSeconds > 9.0 || this.dcarrowtimer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Dual Crystal Arrows"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Crystal Arrow1") && (DateTime.UtcNow.Subtract(this.carrow1timer).TotalSeconds > 9.0 || this.carrow1timer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Crystal Arrow1"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Crystal Arrow") && (DateTime.UtcNow.Subtract(this.carrowtimer).TotalSeconds > 9.0 || this.carrowtimer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Crystal Arrow"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                    }
                }
                else if (this.HasItem("Crystal Arrow") && this.ItemSlot("Crystal Arrow") == 1)
                {
                    if (DateTime.UtcNow.Subtract(this.carrowtimer).TotalSeconds > 10.0 || this.carrowtimer == DateTime.MinValue)
                    {
                        this.SpecialArrow();
                        this.carrowtimer = DateTime.UtcNow;
                    }
                    else if (DateTime.UtcNow.Subtract(this.arrowswitchdelay).TotalMilliseconds > 1000.0 || this.arrowswitchdelay == DateTime.MinValue)
                    {
                        if (this.HasItem("Dual Crystal Arrows1") && (DateTime.UtcNow.Subtract(this.dcarrow1timer).TotalSeconds > 9.0 || this.dcarrow1timer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Dual Crystal Arrows1"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Dual Crystal Arrows") && (DateTime.UtcNow.Subtract(this.dcarrowtimer).TotalSeconds > 9.0 || this.dcarrowtimer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Dual Crystal Arrows"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Crystal Arrow1") && (DateTime.UtcNow.Subtract(this.carrow1timer).TotalSeconds > 9.0 || this.carrow1timer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Crystal Arrow1"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                    }
                }
                else if (this.HasItem("Crystal Arrow1") && this.ItemSlot("Crystal Arrow1") == 1)
                {
                    if (DateTime.UtcNow.Subtract(this.carrow1timer).TotalSeconds > 10.0 || this.carrow1timer == DateTime.MinValue)
                    {
                        this.SpecialArrow();
                        this.carrow1timer = DateTime.UtcNow;
                    }
                    else if (DateTime.UtcNow.Subtract(this.arrowswitchdelay).TotalMilliseconds > 1000.0 || this.arrowswitchdelay == DateTime.MinValue)
                    {
                        if (this.HasItem("Dual Crystal Arrows") && (DateTime.UtcNow.Subtract(this.dcarrowtimer).TotalSeconds > 9.0 || this.dcarrowtimer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Dual Crystal Arrows"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Dual Crystal Arrows1") && (DateTime.UtcNow.Subtract(this.dcarrow1timer).TotalSeconds > 9.0 || this.dcarrow1timer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Dual Crystal Arrows1"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                        else if (this.HasItem("Crystal Arrow") && (DateTime.UtcNow.Subtract(this.carrowtimer).TotalSeconds > 9.0 || this.carrowtimer == DateTime.MinValue))
                        {
                            this.SwitchSlots((byte)0, this.ItemSlot("Crystal Arrow"), 1);
                            this.arrowswitchdelay = DateTime.UtcNow;
                        }
                    }
                }
            }
            if (this.Tab.useskills.Checked && !this.Tab.insectassail.Checked)
            {
                if (this.MainTarget != null && this.SurroundedCount > 0 && (Server.StaticCharacters.ContainsKey(this.MainTarget.ID) && Server.StaticCharacters[this.MainTarget.ID] != null) && !Server.StaticCharacters[this.MainTarget.ID].hasdion && !Server.StaticCharacters[this.MainTarget.ID].hasmonsterdion)
                {
                    if (!this.MainTarget.IsInFront(this.ServerLocation) && this.MainTarget.DistanceFrom(this.ServerLocation) == 1)
                        this.FaceTarget(this.MainTarget.Location);
                    if (this.MainTarget.IsInFront(this.ServerLocation) && this.Tab.usefrost.Checked && this.CanSkill("Frost Strike", false))
                        this.UseSkill("Frost Strike", 0U);
                    if (this.MapInfo.Name.StartsWith("Shinewood") && this.MainTarget.IsInFront(this.ServerLocation) && this.CanSkill("Throw", false))
                    {
                        foreach (Client client in Server.Clients.ToArray())
                        {
                            if (client != null && client.ServerLocation.X == this.MainTarget.Location.X && client.ServerLocation.Y == this.MainTarget.Location.Y)
                            {
                                this.UseSkill("Throw", client.PlayerID);
                                break;
                            }
                        }
                    }
                    if ((this.Tab.fasedonly.Checked ? (Server.StaticCharacters[this.MainTarget.ID].hasfas ? 1 : 0) : (!this.Tab.fasedonly.Checked ? 1 : 0)) != 0 && (this.Tab.cursedonly.Checked ? (!this.HasInfiniteMR(this.MainTarget.Image) ? (Server.StaticCharacters[this.MainTarget.ID].hascurse ? 1 : 0) : 1) : (!this.Tab.cursedonly.Checked ? 1 : 0)) != 0)
                    {
                        if (this.Tab.useambush.Checked && (this.SurroundedCount <= 1 && this.MainTarget.IsInRSRange(this.ServerLocation, 3) && (this.MainTarget.IsFacing(this.ServerLocation, 3) && Server.StaticCharacters[this.MainTarget.ID].hasbeagsuain) && DateTime.UtcNow.Subtract(this.ambushdelay).TotalMilliseconds > 3000.0))
                        {
                            if (this.CanSkill("Sneak Flight", true))
                            {
                                this.UseMedSkill("Sneak Flight");
                                this.ambushdelay = DateTime.UtcNow;
                            }
                            else if (this.CanSkill("Ambush", false))
                            {
                                this.UseSkill("Ambush", 0U);
                                this.ambushdelay = DateTime.UtcNow;
                            }
                        }
                        if (this.MainTarget.DistanceFrom(this.ServerLocation) == 1)
                        {
                            if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(this.MainTarget.Image) || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 40.0 && (this.strongskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.strongskilldelay).TotalMilliseconds > 3000.0))
                            {
                                if (this.CanSkill("Cyclone Kick", false))
                                {
                                    this.WFF();
                                    this.UseSkill("Cyclone Kick", 0U);
                                    this.strongskilldelay = DateTime.UtcNow;
                                }
                                else if (this.CanSkill("Wheel Kick", true))
                                {
                                    this.WFF();
                                    this.UseMedSkill("Wheel Kick");
                                    this.strongskilldelay = DateTime.UtcNow;
                                }
                                if (this.CanSkill("Raging Attack", false))
                                {
                                    this.WFF();
                                    this.UseSkill("Raging Attack", 0U);
                                    this.strongskilldelay = DateTime.UtcNow;
                                }
                            }
                            if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(this.MainTarget.Image) || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0))
                            {
                                if (this.CanSkill("Draco Tail Kick", false))
                                {
                                    this.UseSkill("Draco Tail Kick", 0U);
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                                if (this.CanSkill("Dune Swipe", true))
                                {
                                    this.UseMedSkill("Dune Swipe");
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                            }
                            if (this.CanSkill("Cyclone Blade", false))
                                this.UseSkill("Cyclone Blade", 0U);
                            if (this.CanSkill("Talon Kick", true))
                                this.UseMedSkill("Talon Kick");
                        }
                        if (this.MainTarget.IsInRSRange(this.ServerLocation, 6) && ((this.Tab.attackinfinitemr.Checked || this.IgnoreHP(this.MainTarget.Image) || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0)) && this.CanSkill("Pounce", true)))
                        {
                            this.UseMedSkill("Pounce");
                            this.mediumskilldelay = DateTime.UtcNow;
                        }
                        if (this.Tab.attackinfinitemr.Checked && this.MainTarget.IsInRSRange(this.ServerLocation, 5) && (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(this.MainTarget.Image) || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0)))
                        {
                            if (this.CanSkill("Charge", false))
                            {
                                this.UseSkill("Charge", 0U);
                                this.mediumskilldelay = DateTime.UtcNow;
                            }
                            if (this.CanItem("Sprint Potion"))
                            {
                                this.UseItem("Sprint Potion");
                                this.mediumskilldelay = DateTime.UtcNow;
                            }
                        }
                        if (this.MainTarget.IsInRSRange(this.ServerLocation, 4))
                        {
                            if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(this.MainTarget.Image) || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0))
                            {
                                if (this.CanSkill("Strikedown", true))
                                {
                                    this.UseMedSkill("Strikedown");
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                                else if (this.CanSkill("Sever", false))
                                {
                                    this.UseSkill("Sever", 0U);
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                            }
                            if (this.CanSkill("Eagle Strike", false))
                                this.UseSkill("Eagle Strike", 0U);
                            if (this.CanSkill("Wind Blade", false))
                                this.UseSkill("Wind Blade", 0U);
                        }
                        if (this.MainTarget.IsInFront(this.ServerLocation))
                        {
                            if (this.CanSkill("Kidney Shot", false))
                                this.UseSkill("Kidney Shot", 0U);
                            if (this.CanSkill("Stab and Twist", false))
                                this.UseSkill("Stab and Twist", 0U);
                            if (this.CanSkill("Stab Twice", false))
                                this.UseSkill("Stab Twice", 0U);
                            if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(this.MainTarget.Image) || Server.StaticCharacters[this.MainTarget.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0))
                            {
                                if (this.CanSkill("Furious Bash", false))
                                {
                                    this.UseMedSkill("Furious Bash");
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                                if (this.CanSkill("Venom Attack", true))
                                {
                                    this.UseMedSkill("Venom Attack");
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                                if (this.Tab.comboscroll.Checked)
                                {
                                    if (this.CanItem("Two Move Combo"))
                                        this.UseItem("Two Move Combo");
                                    if (this.CanItem("Three Move Combo"))
                                        this.UseItem("Three Move Combo");
                                }
                                if (this.Tab.comboscrollnoshield.Checked && !this.ShieldOn && (this.staffnow.Contains("Eagles Grasp") || this.staffnow.Contains("Yowien's Fist") || (this.staffnow.Contains("Yowien's Claw") || this.staffnow == "Obsidian") || (this.staffnow == "Nunchaku" || this.staffnow == "Wolf Claw") || this.staffnow == string.Empty))
                                {
                                    if (this.CanItem("Two Move Combo"))
                                        this.UseItem("Two Move Combo");
                                    if (this.CanItem("Three Move Combo"))
                                        this.UseItem("Three Move Combo");
                                }
                                if ((this.staffnow.Contains("Eagles Grasp") || this.staffnow.Contains("Yowien's Fist") || this.staffnow.Contains("Blackstar Night Claw") || this.staffnow.Contains("Yowien's Claw") || this.staffnow.Equals("Tilian Claw")) && this.CanSkill("Claw Slash", true))
                                {
                                    this.UseMedSkill("Claw Slash");
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                                if (!this.ShieldOn && (this.staffnow.Contains("Eagles Grasp") || this.staffnow.Contains("Blackstar Night Claw") || this.staffnow.Contains("Yowien's Fist") || (this.staffnow.Contains("Yowien's Claw") || this.staffnow == "Obsidian") || (this.staffnow == "Nunchaku" || this.staffnow == "Wolf Claw") || this.staffnow == string.Empty))
                                {
                                    if (this.CanSkill("Tail Sweep", true))
                                    {
                                        this.UseMedSkill("Tail Sweep");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.CanSkill("Mass Strike", true))
                                    {
                                        this.UseMedSkill("Mass Strike");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.CanSkill("Double Rake", true))
                                    {
                                        this.UseMedSkill("Double Rake");
                                        this.strongskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.CanSkill("Mantis Kick", false))
                                    {
                                        this.UseSkill("Mantis Kick", 0U);
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                }
                            }
                            if (!this.ShieldOn && (this.staffnow.Contains("Eagles Grasp") || this.staffnow.Contains("Yowien's Fist") || (this.staffnow.Contains("Yowien's Claw") || this.staffnow == "Obsidian") || (this.staffnow == "Nunchaku" || this.staffnow == "Wolf Claw") || this.staffnow == string.Empty))
                            {
                                if (this.CanSkill("Kick", false))
                                    this.UseSkill("Kick", 0U);
                                if (this.CanSkill("High Kick", false))
                                    this.UseSkill("High Kick", 0U);
                            }
                        }
                    }
                }
                foreach (Npc npc in ((IEnumerable<Npc>)this.NearbyNormalMonsters()).ToArray<Npc>())
                {
                    if (npc != null && Server.StaticCharacters.ContainsKey(npc.ID) && (Server.StaticCharacters[npc.ID] != null && !Server.StaticCharacters[npc.ID].hasdion) && !Server.StaticCharacters[npc.ID].hasmonsterdion)
                    {
                        if (npc.IsInFront(this.ServerLocation) && this.Tab.usefrost.Checked && this.CanSkill("Frost Strike", false))
                            this.UseSkill("Frost Strike", 0U);
                        if ((this.Tab.fasedonly.Checked ? (Server.StaticCharacters[npc.ID].hasfas ? 1 : 0) : (!this.Tab.fasedonly.Checked ? 1 : 0)) != 0 && (this.Tab.cursedonly.Checked ? (!this.HasInfiniteMR(npc.Image) ? (Server.StaticCharacters[npc.ID].hascurse ? 1 : 0) : 1) : (!this.Tab.cursedonly.Checked ? 1 : 0)) != 0)
                        {
                            if (npc.DistanceFrom(this.ServerLocation) == 1)
                            {
                                if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(npc.Image) || Server.StaticCharacters[npc.ID].HpAmount >= 40.0 && (this.strongskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.strongskilldelay).TotalMilliseconds > 3000.0))
                                {
                                    if (this.CanSkill("Cyclone Kick", false))
                                    {
                                        this.WFF();
                                        this.UseSkill("Cyclone Kick", 0U);
                                        this.strongskilldelay = DateTime.UtcNow;
                                    }
                                    else if (this.CanSkill("Wheel Kick", true))
                                    {
                                        this.WFF();
                                        this.UseMedSkill("Wheel Kick");
                                        this.strongskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.CanSkill("Raging Attack", false))
                                    {
                                        this.WFF();
                                        this.UseSkill("Raging Attack", 0U);
                                        this.strongskilldelay = DateTime.UtcNow;
                                    }
                                }
                                if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(npc.Image) || Server.StaticCharacters[npc.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0))
                                {
                                    if (this.CanSkill("Draco Tail Kick", false))
                                    {
                                        this.UseSkill("Draco Tail Kick", 0U);
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.CanSkill("Dune Swipe", true))
                                    {
                                        this.UseMedSkill("Dune Swipe");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                }
                                if (this.CanSkill("Cyclone Blade", false))
                                    this.UseSkill("Cyclone Blade", 0U);
                                if (this.CanSkill("Talon Kick", true))
                                    this.UseMedSkill("Talon Kick");
                            }
                            if (npc.IsInRSRange(this.ServerLocation, 6) && ((this.Tab.attackinfinitemr.Checked || this.IgnoreHP(npc.Image) || Server.StaticCharacters[npc.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0)) && this.CanSkill("Pounce", true)))
                            {
                                this.UseMedSkill("Pounce");
                                this.mediumskilldelay = DateTime.UtcNow;
                            }
                            if (this.Tab.attackinfinitemr.Checked && npc.IsInRSRange(this.ServerLocation, 5) && (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(npc.Image) || Server.StaticCharacters[npc.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0)))
                            {
                                if (this.CanSkill("Charge", false))
                                {
                                    this.UseSkill("Charge", 0U);
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                                if (this.CanItem("Sprint Potion"))
                                {
                                    this.UseItem("Sprint Potion");
                                    this.mediumskilldelay = DateTime.UtcNow;
                                }
                            }
                            if (npc.IsInRSRange(this.ServerLocation, 4))
                            {
                                if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(npc.Image) || Server.StaticCharacters[npc.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0))
                                {
                                    if (this.CanSkill("Strikedown", true))
                                    {
                                        this.UseMedSkill("Strikedown");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    else if (this.CanSkill("Sever", false))
                                    {
                                        this.UseSkill("Sever", 0U);
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                }
                                if (this.CanSkill("Eagle Strike", false))
                                    this.UseSkill("Eagle Strike", 0U);
                                if (this.CanSkill("Wind Blade", false))
                                    this.UseSkill("Wind Blade", 0U);
                            }
                            if (npc.IsInFront(this.ServerLocation))
                            {
                                if (this.CanSkill("Kidney Shot", false))
                                    this.UseSkill("Kidney Shot", 0U);
                                if (this.CanSkill("Stab and Twist", false))
                                    this.UseSkill("Stab and Twist", 0U);
                                if (this.CanSkill("Stab Twice", false))
                                    this.UseSkill("Stab Twice", 0U);
                                if (this.Tab.attackinfinitemr.Checked || this.IgnoreHP(npc.Image) || Server.StaticCharacters[npc.ID].HpAmount >= 20.0 && (this.mediumskilldelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.mediumskilldelay).TotalMilliseconds > 500.0))
                                {
                                    if (this.CanSkill("Furious Bash", false))
                                    {
                                        this.UseMedSkill("Furious Bash");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.CanSkill("Venom Attack", true))
                                    {
                                        this.UseMedSkill("Venom Attack");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    if (this.Tab.comboscroll.Checked)
                                    {
                                        if (this.CanItem("Two Move Combo"))
                                            this.UseItem("Two Move Combo");
                                        if (this.CanItem("Three Move Combo"))
                                            this.UseItem("Three Move Combo");
                                    }
                                    if (this.Tab.comboscrollnoshield.Checked && !this.ShieldOn && (this.staffnow.Contains("Yowien's Fist") || this.staffnow.Contains("Yowien's Claw") || (this.staffnow == "Obsidian" || this.staffnow == "Nunchaku") || this.staffnow == "Wolf Claw" || this.staffnow == string.Empty))
                                    {
                                        if (this.CanItem("Two Move Combo"))
                                            this.UseItem("Two Move Combo");
                                        if (this.CanItem("Three Move Combo"))
                                            this.UseItem("Three Move Combo");
                                    }
                                    if ((this.staffnow.Contains("Yowien's Fist") || this.staffnow.Contains("Yowien's Claw") || this.staffnow.Equals("Tilian Claw")) && this.CanSkill("Claw Slash", true))
                                    {
                                        this.UseMedSkill("Claw Slash");
                                        this.mediumskilldelay = DateTime.UtcNow;
                                    }
                                    if (!this.ShieldOn && (this.staffnow.Contains("Yowien's Fist") || this.staffnow.Contains("Yowien's Claw") || (this.staffnow == "Obsidian" || this.staffnow == "Nunchaku") || this.staffnow == "Wolf Claw" || this.staffnow == string.Empty))
                                    {
                                        if (this.CanSkill("Tail Sweep", true))
                                        {
                                            this.UseMedSkill("Tail Sweep");
                                            this.mediumskilldelay = DateTime.UtcNow;
                                        }
                                        if (this.CanSkill("Mass Strike", true))
                                        {
                                            this.UseMedSkill("Mass Strike");
                                            this.mediumskilldelay = DateTime.UtcNow;
                                        }
                                        if (this.CanSkill("Double Rake", true))
                                        {
                                            this.UseMedSkill("Double Rake");
                                            this.strongskilldelay = DateTime.UtcNow;
                                        }
                                        if (this.CanSkill("Mantis Kick", false))
                                        {
                                            this.UseSkill("Mantis Kick", 0U);
                                            this.mediumskilldelay = DateTime.UtcNow;
                                        }
                                    }
                                }
                                if (!this.ShieldOn && (this.staffnow.Contains("Yowien's Fist") || this.staffnow.Contains("Yowien's Claw") || (this.staffnow == "Obsidian" || this.staffnow == "Nunchaku") || this.staffnow == "Wolf Claw" || this.staffnow == string.Empty))
                                {
                                    if (this.CanSkill("Kick", false))
                                        this.UseSkill("Kick", 0U);
                                    if (this.CanSkill("High Kick", false))
                                        this.UseSkill("High Kick", 0U);
                                }
                            }
                        }
                    }
                }
            }
            this.UseCrasher();
        }

        private void ASRS()
        {
            if (this.Tab.skillgrouprange.Checked && this.GroupMembers.Count > 0 && !this.GroupIsInRange((int)this.Tab.skillgrouprangenum.Value) || (!this.Tab.asrs.Checked || this.MainTarget == null || ((!this.IgnoreHP(this.MainTarget.Image) ? (this.MainTarget.HpAmount > 20.0 ? 1 : 0) : 1) == 0 || !Server.StaticCharacters.ContainsKey(this.MainTarget.ID) || (Server.StaticCharacters[this.MainTarget.ID] == null || !this.MainTarget.IsOnScreen) || Server.StaticCharacters[this.MainTarget.ID].hasdion) || Server.StaticCharacters[this.MainTarget.ID].hasmonsterdion))
                return;
            if ((this.Tab.fasedonly.Checked ? (Server.StaticCharacters[this.MainTarget.ID].hasfas ? 1 : 0) : (!this.Tab.fasedonly.Checked ? 1 : 0)) != 0 && (this.Tab.cursedonly.Checked ? (!this.HasInfiniteMR(this.MainTarget.Image) ? (Server.StaticCharacters[this.MainTarget.ID].hascurse ? 1 : 0) : 1) : (!this.Tab.cursedonly.Checked ? 1 : 0)) != 0)
            {
                if (this.rsready && (int)this.MainTarget.LastHitByID != (int)this.PlayerID && (this.MainTarget.asrsdelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.MainTarget.asrsdelay).TotalMilliseconds >= 1000.0))
                {
                    if (this.MainTarget.IsInRSRange(this.ServerLocation, 6))
                    {
                        this.UseMedSkill("Rear Strike");
                        this.MainTarget.asrsdelay = DateTime.UtcNow;
                    }
                    else if (this.MainTarget.DistanceFrom(this.ServerLocation) <= 6 && (this.MainTarget.Location.X == this.ServerLocation.X || this.MainTarget.Location.Y == this.ServerLocation.Y))
                        this.FaceTarget(this.MainTarget.Location);
                }
                else if (this.asready && (int)this.MainTarget.LastHitByID != (int)this.PlayerID && (this.MainTarget.asrsdelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.MainTarget.asrsdelay).TotalMilliseconds >= 1000.0))
                {
                    if (!this.MainTarget.IsInFront(this.ServerLocation) && this.MainTarget.DistanceFrom(this.ServerLocation) == 1)
                        this.FaceTarget(this.MainTarget.Location);
                    else if (this.MainTarget.IsInFront(this.ServerLocation))
                    {
                        this.UseSkill("Assassin Strike", 0U);
                        this.MainTarget.asrsdelay = DateTime.UtcNow;
                    }
                }
                else if (this.Tab.castbries.Checked && (this.asready || this.rsready) && (!this.HasInfiniteMR(this.MainTarget.Image) && (int)this.MainTarget.LastHitByID == (int)this.PlayerID) && (this.MainTarget.asrsdelay == DateTime.MinValue || DateTime.UtcNow.Subtract(this.MainTarget.asrsdelay).TotalMilliseconds >= 1000.0) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["breisleich"].ManaCost)
                {
                    if (this.MainTarget.IsInRSRange(this.ServerLocation, 6) || this.MainTarget.IsInFront(this.ServerLocation))
                    {
                        if (this.HasSpell("mor breisleich", false))
                            this.CastSpell("mor breisleich", new uint?(this.MainTarget.ID));
                        else if (this.HasSpell("breisleich", false))
                            this.CastSpell("breisleich", new uint?(this.MainTarget.ID));
                        else if (this.HasSpell("beag breisleich", false))
                            this.CastSpell("beag breisleich", new uint?(this.MainTarget.ID));
                    }
                    else if (this.MainTarget.DistanceFrom(this.ServerLocation) == 1)
                        this.FaceTarget(this.MainTarget.Location);
                }
            }
            if ((this.asready || this.rsready) && ((int)this.MainTarget.LastHitByID == (int)this.PlayerID && this.MainTarget.DistanceFrom(this.ServerLocation) > 1) && (this.MainTarget.IsInRSRange(this.ServerLocation, 4) && !this.staffnow.StartsWith("Staff of ")) && this.CanSkill("Amnesia", false))
                this.UseSkill("Amnesia", 0U);
        }

        private void SetNecklace()
        {
            if (!(this.switchneckdelay == DateTime.MinValue) && DateTime.UtcNow.Subtract(this.switchneckdelay).TotalMilliseconds <= 1200.0 || (!this.Tab.assail.Checked && !this.Tab.useskills.Checked && !this.Tab.asrs.Checked || this.MainTarget == null))
                return;
            if (this.MapInfo.Name.Contains("Yowien"))
            {
                if (this.MainTarget.Image == 874 || this.MainTarget.Image == 875 || (this.MainTarget.Image == 873 || this.MainTarget.Image == 864) || (this.MainTarget.Image == 865 || this.MainTarget.Image == 664 || this.MainTarget.Image == 856) || this.MainTarget.Image == 583)
                    this.BestWindNeck();
                else if (this.MainTarget.Image == 859 || this.MainTarget.Image == 651 || (this.MainTarget.Image == 860 || this.MainTarget.Image == 661) || (this.MainTarget.Image == 662 || this.MainTarget.Image == 663 || this.MainTarget.Image == 668) || this.MainTarget.Image == 666)
                    this.BestEarthNeck();
                else if (this.MainTarget.Image == 634)
                    this.BestEleNeck();
                else if (this.MainTarget.Image == 635 || this.MainTarget.Image == 852)
                    this.BestLightNeck();
                else
                    this.BestDarkNeck();
            }
            else if (this.MapInfo.Name.Contains("Shinewood"))
            {
                if (this.MainTarget.Image == 266 || this.MainTarget.Image == 272 || this.MainTarget.Image == 87)
                    this.BestLightNeck();
                else
                    this.BestDarkNeck();
            }
            else if (this.MapInfo.Name.Contains("Lost Ruins") || this.MapInfo.Name.Contains("Assassin Dungeon") || this.MapInfo.Name.Contains("Dung Field"))
            {
                if (this.MainTarget.Image == 404)
                    this.BestLightNeck();
                else
                    this.BestWindNeck();
            }
        }

        private void BestWindNeck()
        {
            if (this.Statistics.AttackElement == Statistics.Elements.Wind || this.Statistics.AttackElement == Statistics.Elements.Undead)
                return;
            if (this.HasItem("Blackstar Wind Necklace"))
            {
                this.UseItem("Blackstar Wind Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Thief's Wind Necklace"))
            { this.UseItem("Thief's Wind Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Yowien Necklace of Wind"))
            {
                this.UseItem("Yowien Necklace of Wind");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Omni Elemental Necklace"))
            {
                this.UseItem("Omni Elemental Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Veltain Nature Necklace"))
            {
                this.UseItem("Veltain Nature Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Veltain Wind Necklace"))
            {
                this.UseItem("Veltain Wind Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else
            {
                bool flag = true;
                foreach (Item obj in this.Inventory)
                {
                    if (obj != null && obj.Name.Contains("Wind") && obj.Name.Contains("Necklace"))
                    {
                        flag = false;
                        if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                            this.MacroCast(this.druidform.Name, new uint?());
                        this.UseItem(obj.InventorySlot);
                        this.switchneckdelay = DateTime.UtcNow;
                        break;
                    }
                }
                if (flag)
                    this.BestDarkNeck();
            }
        }

        private void BestEarthNeck()
        {
            if (this.Statistics.AttackElement == Statistics.Elements.Earth)
                return;
            if (this.HasItem("Blackstar Earth Necklace"))
            {
                this.UseItem("Blackstar Earth Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Yowien Necklace of Earth"))
            {
                this.UseItem("Yowien Necklace of Earth");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Ancient Necklace of Earth"))
            {
                this.UseItem("Ancient Necklace of Earth");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else if (this.HasItem("Veltain Earth Necklace"))
            {
                this.UseItem("Veltain Earth Necklace");
                this.switchneckdelay = DateTime.UtcNow;
            }
            else
            {
                bool flag = true;
                foreach (Item obj in this.Inventory)
                {
                    if (obj != null && obj.Name.Contains("Earth") && obj.Name.Contains("Necklace"))
                    {
                        flag = false;
                        if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                            this.MacroCast(this.druidform.Name, new uint?());
                        this.UseItem(obj.InventorySlot);
                        this.switchneckdelay = DateTime.UtcNow;
                        break;
                    }
                }
                if (flag)
                    this.BestDarkNeck();
            }
        }

        private void BestEleNeck()
        {
            if (this.Statistics.AttackElement != Statistics.Elements.Dark)
                return;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.Name.Contains("Necklace") && !obj.Name.Contains("Dark") && !obj.Name.Contains("Prayer"))
                {
                    if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                        this.MacroCast(this.druidform.Name, new uint?());
                    this.UseItem(obj.InventorySlot);
                    this.switchneckdelay = DateTime.UtcNow;
                    break;
                }
            }
        }

        private void BestDarkNeck()
        {
            if (this.Statistics.AttackElement == Statistics.Elements.Dark)
                return;
            bool flag = false;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.Name.Contains("Necklace") && obj.Name.Contains("Dark"))
                {
                    flag = true;
                    if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                        this.MacroCast(this.druidform.Name, new uint?());
                    this.UseItem(obj.InventorySlot);
                    this.switchneckdelay = DateTime.UtcNow;
                    break;
                }
            }
            if (!flag)
            {
                foreach (Item obj in this.Inventory)
                {
                    if (obj != null && (obj.Name.Equals("Amber Necklace") || obj.Name.Equals("Gold Jade Necklace")))
                    {
                        this.UseItem(obj.InventorySlot);
                        this.switchneckdelay = DateTime.UtcNow;
                        break;
                    }
                }
            }
        }

        private void BestLightNeck()
        {
            if (this.Statistics.AttackElement == Statistics.Elements.Light)
                return;
            bool flag = true;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (obj.Name.Equals("Light Necklace") || obj.Name.Equals("Lumen Amulet")))
                {
                    flag = false;
                    if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                        this.MacroCast(this.druidform.Name, new uint?());
                    this.UseItem(obj.InventorySlot);
                    this.switchneckdelay = DateTime.UtcNow;
                    break;
                }
            }
            if (flag)
                this.BestEleNeck();
        }

        public void Heal()
        {
            if (this.Statistics.CurrentHP != 0U && !this.IsSkulled)
            {
                TimeSpan timeSpan;
                if (this.Statistics.CurrentMP > 0U)
                {
                    if (this.Tab.useexpgem.Checked && this.ascendexp && this.Statistics.Experience > 4000000000U)
                    {
                        int num;
                        if (!(this.expgemtimer == DateTime.MinValue))
                        {
                            timeSpan = DateTime.UtcNow.Subtract(this.expgemtimer);
                            num = timeSpan.TotalSeconds <= 10.0 ? 1 : 0;
                        }
                        else
                            num = 0;
                        if (num == 0 && (this.HasItem("Experience Gem") && this.CanItem("Experience Gem")))
                        {
                            this.UseItem("Experience Gem");
                            this.expgemtimer = DateTime.UtcNow;
                            Thread.Sleep(5000);
                        }
                    }
                    if (this.Tab.expapbonus.Checked && !this.SpellBar.Contains((ushort)8) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                    {
                        if (this.HasItem("VDay Bonus Exp-Ap"))
                        {
                            if (this.CanItem("VDay Bonus Exp-Ap"))
                                this.UseItem("VDay Bonus Exp-Ap");
                        }
                        else if (this.HasItem("XMas Double Exp-Ap"))
                        {
                            if (this.CanItem("XMas Double Exp-Ap"))
                                this.UseItem("XMas Double Exp-Ap");
                        }
                        else if (this.HasItem("Double Bonus Exp-Ap"))
                        {
                            if (this.CanItem("Double Bonus Exp-Ap"))
                                this.UseItem("Double Bonus Exp-Ap");
                        }
                        else if (this.HasItem("XMas Bonus Exp-Ap"))
                        {
                            if (this.CanItem("XMas Bonus Exp-Ap"))
                                this.UseItem("XMas Bonus Exp-Ap");
                        }
                        else if (this.HasItem("Christmas Double Exp-Ap") && this.CanItem("Christmas Double Exp-Ap"))
                            this.UseItem("Christmas Double Exp-Ap");
                    }
                    if (this.Tab.xpshroom.Checked && !this.SpellBar.Contains((ushort)148))
                    {
                        if (this.HasItem("Greatest Experience Mushroom"))
                        {
                            if (this.CanItem("Greatest Experience Mushroom"))
                                this.UseItem("Greatest Experience Mushroom");
                        }
                        else if (this.HasItem("Greater Experience Mushroom"))
                        {
                            if (this.CanItem("Greater Experience Mushroom"))
                                this.UseItem("Greater Experience Mushroom");
                        }
                        else if (this.HasItem("Great Experience Mushroom"))
                        {
                            if (this.CanItem("Great Experience Mushroom"))
                                this.UseItem("Great Experience Mushroom");
                        }
                        else if (this.HasItem("Experience Mushroom") && this.CanItem("Experience Mushroom"))
                            this.UseItem("Experience Mushroom");
                    }
                    if (this.Tab.abrune.Checked && !this.SpellBar.Contains((ushort)147))
                    {
                        if (this.HasItem("Greatest Ability Rune"))
                        {
                            if (this.CanItem("Greatest Ability Rune"))
                                this.UseItem("Greatest Ability Rune");
                        }
                        else if (this.HasItem("Greater Ability Rune"))
                        {
                            if (this.CanItem("Greater Ability Rune"))
                                this.UseItem("Greater Ability Rune");
                        }
                        else if (this.HasItem("Great Ability Rune"))
                        {
                            if (this.CanItem("Great Ability Rune"))
                                this.UseItem("Great Ability Rune");
                        }
                        else if (this.HasItem("Ability Rune") && this.CanItem("Ability Rune"))
                            this.UseItem("Ability Rune");
                    }
                    else if (this.Tab.useskillbonus.Checked && !this.SpellBar.Contains((ushort)147))
                    {
                        if (this.HasItem("Skill/Spell Leveling Bonus"))
                        {
                            if (this.CanItem("Skill/Spell Leveling Bonus"))
                                this.UseItem("Skill/Spell Leveling Bonus");
                        }
                        else if (this.HasItem("Skill/Spell Triple Bonus") && this.CanItem("Skill/Spell Triple Bonus"))
                            this.UseItem("Skill/Spell Triple Bonus");
                    }
                }
                if (this.Tab.vredaislings)
                {
                    bool flag = false;
                    foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                    {
                        if (player != null && (int)player.ID != (int)this.PlayerID && (Server.StaticCharacters[player.ID].isskulled || Server.StaticCharacters[player.ID].IsSkulled) && (this.GroupMembers.Contains(player.Name) || Server.Alts.ContainsKey(player.Name.ToLower()) || Server.friendlist != null && Server.friendlist.Contains(player.Name.ToLower())) && player.IsOnScreen && ((!Server.Alts.ContainsKey(player.Name.ToLower()) || Server.Alts[player.Name.ToLower()].IsSkulled) && this.HasItem("Komadium")) && (this.ClientLocation.DistanceFrom(player.Location) == 1 || this.ServerLocation.DistanceFrom(player.Location) == 1))
                        {
                            flag = true;
                            this.reddingsomeone = true;
                            this.FaceTarget(player.Location);
                            int num;
                            if (player.IsInFront(this.ServerLocation))
                            {
                                if (!(this.reddelay == DateTime.MinValue))
                                {
                                    timeSpan = DateTime.UtcNow.Subtract(this.reddelay);
                                    num = timeSpan.TotalSeconds < 1.0 ? 1 : 0;
                                }
                                else
                                    num = 0;
                            }
                            else
                                num = 1;
                            if (num == 0)
                            {
                                this.UseItem("Komadium");
                                this.UseSkill("TransferBlood", 0U);
                                this.reddelay = DateTime.UtcNow;
                            }
                            if (this.ClientLocation.DistanceFrom(player.Location) != 1 || this.ServerLocation.DistanceFrom(player.Location) != 1)
                            {
                                this.Refresh();
                                Thread.Sleep(1200);
                                break;
                            }
                            break;
                        }
                    }
                    if (!flag)
                        this.reddingsomeone = false;
                }
                if ((this.Tab.vselfaosuain || this.autowalkon && this.Tab.walkao.Checked) && this.IsSuained && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao suain"].ManaCost)
                {
                    if (!this.SafeToWalkFast && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 > 20.0)
                    {
                        int num;
                        if (this.aosuaindelayedreaction == DateTime.MinValue)
                        {
                            timeSpan = DateTime.UtcNow.Subtract(this.lastaosuain);
                            num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                        }
                        else
                            num = 1;
                        if (num == 0)
                        {
                            this.aosuaindelayedreaction = DateTime.UtcNow;
                        }
                        else
                        {
                            timeSpan = DateTime.UtcNow.Subtract(this.aosuaindelayedreaction);
                            if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                            {
                                if (this.HasSpell("Leafhopper Chirp", false))
                                    this.CastSpell("Leafhopper Chirp", new uint?());
                                else
                                    this.CastSpell("ao suain", new uint?(this.PlayerID));
                                this.aosuaindelayedreaction = DateTime.MinValue;
                                this.lastaosuain = DateTime.UtcNow;
                            }
                        }
                    }
                    else
                    {
                        if (this.HasSpell("Leafhopper Chirp", false))
                            this.CastSpell("Leafhopper Chirp", new uint?());
                        else
                            this.CastSpell("ao suain", new uint?(this.PlayerID));
                        this.aosuaindelayedreaction = DateTime.MinValue;
                        this.lastaosuain = DateTime.UtcNow;
                    }
                }
                if (this.Tab.destroytonics.Checked)
                {
                    if (this.HasItem("Red Tonic"))
                        this.UseItem("Red Tonic");
                    if (this.HasItem("Red Hitonic"))
                        this.UseItem("Red Hitonic");
                    if (this.HasItem("Red Extonic"))
                        this.UseItem("Red Extonic");
                    if (this.HasItem("Green Tonic"))
                        this.UseItem("Green Tonic");
                    if (this.HasItem("Green Hitonic"))
                        this.UseItem("Green Hitonic");
                    if (this.HasItem("Green Extonic"))
                        this.UseItem("Green Extonic");
                    if (this.HasItem("Blue Tonic"))
                        this.UseItem("Blue Tonic");
                    if (this.HasItem("Blue Hitonic"))
                        this.UseItem("Blue Hitonic");
                    if (this.HasItem("Blue Extonic"))
                        this.UseItem("Blue Extonic");
                }
                if (this.Tab.vicebottle && !this.SpellBar.Contains((ushort)19) && (this.MapInfo.Number == 10262 || this.MapInfo.Number == 10261))
                    this.UseItem("Ice Bottle");
                if (this.Tab.vfs && this.Statistics.CurrentMP < uint.Parse(this.Tab.vfscond))
                {
                    this.Dion();
                    this.Vineyard();
                    if (this.Tab.targetgroup != null && this.Tab.targetgroup.vinebeforespiorad.Checked && this.CanSpell("Lyliac Vineyard", false) && this.Statistics.CurrentMP > 0U)
                        this.CastSpell("Lyliac Vineyard", new uint?());
                    this.CastSpell("fas spiorad", new uint?());
                    this.restartloop = true;
                }
                else if (this.Tab.allMonsters != null && this.Tab.allMonsters.attack1.Checked && (this.Tab.allMonsters.attack1type.Text == "mor strioch pian gar" && this.Tab.fs.Checked) && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                {
                    this.Dion();
                    this.Vineyard();
                    if (this.Tab.targetgroup != null && this.Tab.targetgroup.vinebeforespiorad.Checked && this.CanSpell("Lyliac Vineyard", false) && this.Statistics.CurrentMP > 0U)
                        this.CastSpell("Lyliac Vineyard", new uint?());
                    this.CastSpell("fas spiorad", new uint?());
                }
                else
                {
                    if (this.Tab.vpotion && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 <= (double)this.Tab.vpotioncond)
                    {
                        if (this.HasItem("Hydele deum"))
                            this.UseItem("Hydele deum");
                        else if (this.HasItem("Brown Potion"))
                            this.UseItem("Brown Potion");
                        else if (this.HasItem("Exkuranum"))
                            this.UseItem("Exkuranum");
                        else if (this.HasItem("Rambutan"))
                            this.UseItem("Rambutan");
                        else if (this.HasItem("Red Tonic"))
                            this.UseItem("Red Tonic");
                    }
                    if ((this.Tab.viocself || this.autowalkon && this.Tab.walkheal.Checked) && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26) && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 <= (double)this.Tab.viocselfcond) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.vioctype].ManaCost)
                    {
                        if (!this.SafeToWalkFast && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 > 20.0)
                        {
                            int num;
                            if (this.healdelayedreaction == DateTime.MinValue)
                            {
                                timeSpan = DateTime.UtcNow.Subtract(this.lastheal);
                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                            }
                            else
                                num = 1;
                            if (num == 0)
                            {
                                this.healdelayedreaction = DateTime.UtcNow;
                            }
                            else
                            {
                                timeSpan = DateTime.UtcNow.Subtract(this.healdelayedreaction);
                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                {
                                    if (this.autowalkon && this.Tab.walkao.Checked && this.Tab.vioctype == "nuadhaich")
                                        this.CastSpell("ard ioc", new uint?(this.PlayerID));
                                    else if (this.Tab.vioctype == "Cold Blood")
                                        this.CastSpell(this.Tab.vioctype, new uint?());
                                    else
                                        this.CastSpell(this.Tab.vioctype, new uint?(this.PlayerID));
                                    this.healdelayedreaction = DateTime.MinValue;
                                    this.lastheal = DateTime.UtcNow;
                                }
                            }
                        }
                        else
                        {
                            if (this.autowalkon && this.Tab.walkao.Checked && this.Tab.vioctype == "nuadhaich")
                                this.CastSpell("ard ioc", new uint?(this.PlayerID));
                            else if (this.Tab.vioctype == "Cold Blood")
                                this.CastSpell(this.Tab.vioctype, new uint?());
                            else
                                this.CastSpell(this.Tab.vioctype, new uint?(this.PlayerID));
                            this.healdelayedreaction = DateTime.MinValue;
                            this.lastheal = DateTime.UtcNow;
                        }
                    }
                    if (this.Tab.targetgroup != null)
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                            {
                                if (this.Tab.targetgroup.aosuaingroup.Checked && client.IsSuained && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao suain"].ManaCost)
                                {
                                    if (!this.SafeToWalkFast)
                                    {
                                        if (!Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1)
                                        {
                                            int num;
                                            if (this.Characters[client.PlayerID].aosuaindelayedreaction == DateTime.MinValue)
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].lastaosuain);
                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                            }
                                            else
                                                num = 1;
                                            if (num == 0)
                                            {
                                                this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.UtcNow;
                                            }
                                            else
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].aosuaindelayedreaction);
                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                {
                                                    this.CastSpell("ao suain", new uint?(client.PlayerID));
                                                    this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.MinValue;
                                                    this.Characters[client.PlayerID].lastaosuain = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                        else
                                            continue;
                                    }
                                    else
                                    {
                                        this.CastSpell("ao suain", new uint?(client.PlayerID));
                                        this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.MinValue;
                                        this.Characters[client.PlayerID].lastaosuain = DateTime.UtcNow;
                                    }
                                }
                                if (this.Tab.targetgroup.iocgroup.Checked && (this.Tab.targetgroup.backupmic.Checked ? (!this.GroupMembers.Contains<string>(this.Tab.targetgroup.backupmicname.Text, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) ? 1 : 0) : 1) != 0 && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26) && (double)client.Statistics.CurrentHP / (double)client.Statistics.MaximumHP * 100.0 <= (double)this.Tab.targetgroup.iocgroupcond.Value) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.targetgroup.ioctype.Text].ManaCost)
                                {
                                    if (!this.SafeToWalkFast && (double)client.Statistics.CurrentHP / (double)client.Statistics.MaximumHP * 100.0 > 20.0)
                                    {
                                        if (!Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1)
                                        {
                                            int num;
                                            if (this.Characters[client.PlayerID].healdelayedreaction == DateTime.MinValue)
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].lastheal);
                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                            }
                                            else
                                                num = 1;
                                            if (num == 0)
                                            {
                                                this.Characters[client.PlayerID].healdelayedreaction = DateTime.UtcNow;
                                            }
                                            else
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].healdelayedreaction);
                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                {
                                                    this.CastSpell(this.Tab.targetgroup.ioctype.Text, new uint?(client.PlayerID));
                                                    this.restartloop = true;
                                                    this.Characters[client.PlayerID].healdelayedreaction = DateTime.MinValue;
                                                    this.Characters[client.PlayerID].lastheal = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.CastSpell(this.Tab.targetgroup.ioctype.Text, new uint?(client.PlayerID));
                                        this.restartloop = true;
                                        this.Characters[client.PlayerID].healdelayedreaction = DateTime.MinValue;
                                        this.Characters[client.PlayerID].lastheal = DateTime.UtcNow;
                                    }
                                }
                            }
                        }
                        foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                        {
                            if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen)
                            {
                                if (this.Tab.targetgroup.aosuaingroup.Checked && Server.StaticCharacters[player.ID].hassuain && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao suain"].ManaCost)
                                {
                                    if (!this.SafeToWalkFast)
                                    {
                                        if (!Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1)
                                        {
                                            int num;
                                            if (this.Characters[player.ID].aosuaindelayedreaction == DateTime.MinValue)
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].lastaosuain);
                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                            }
                                            else
                                                num = 1;
                                            if (num == 0)
                                            {
                                                this.Characters[player.ID].aosuaindelayedreaction = DateTime.UtcNow;
                                            }
                                            else
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].aosuaindelayedreaction);
                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                {
                                                    this.CastSpell("ao suain", new uint?(player.ID));
                                                    this.Characters[player.ID].aosuaindelayedreaction = DateTime.MinValue;
                                                    this.Characters[player.ID].lastaosuain = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                        else
                                            continue;
                                    }
                                    else
                                    {
                                        this.CastSpell("ao suain", new uint?(player.ID));
                                        this.Characters[player.ID].aosuaindelayedreaction = DateTime.MinValue;
                                        this.Characters[player.ID].lastaosuain = DateTime.UtcNow;
                                    }
                                }
                                if (this.Tab.targetgroup.iocgroup.Checked && (this.Tab.targetgroup.backupmic.Checked ? (!this.GroupMembers.Contains<string>(this.Tab.targetgroup.backupmicname.Text, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) ? 1 : 0) : 1) != 0 && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26) && (this.Tab.targetgroup.healanim.Checked ? (Server.StaticCharacters[player.ID].justramattack || Server.StaticCharacters[player.ID].justsquidattack || (Server.StaticCharacters[player.ID].justeyeattack || Server.StaticCharacters[player.ID].justfright) || (Server.StaticCharacters[player.ID].justfaeattack || Server.StaticCharacters[player.ID].justhpcupped || (Server.StaticCharacters[player.ID].justspioraded || Server.StaticCharacters[player.ID].justcrashered)) || (Server.StaticCharacters[player.ID].justmadsouled || Server.StaticCharacters[player.ID].justkelbed) ? 1 : (Server.StaticCharacters[player.ID].HpAmount < (double)this.Tab.targetgroup.iocgroupcond.Value ? 1 : 0)) : (Server.StaticCharacters[player.ID].HpAmount <= (double)this.Tab.targetgroup.iocgroupcond.Value ? 1 : 0)) != 0) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.targetgroup.ioctype.Text].ManaCost)
                                {
                                    if (!this.SafeToWalkFast && player.HpAmount > 20.0)
                                    {
                                        if (!Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1)
                                        {
                                            int num;
                                            if (this.Characters[player.ID].healdelayedreaction == DateTime.MinValue)
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].lastheal);
                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                            }
                                            else
                                                num = 1;
                                            if (num == 0)
                                            {
                                                this.Characters[player.ID].healdelayedreaction = DateTime.UtcNow;
                                            }
                                            else
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].healdelayedreaction);
                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                {
                                                    this.CastSpell(this.Tab.targetgroup.ioctype.Text, new uint?(player.ID));
                                                    this.restartloop = true;
                                                    this.Characters[player.ID].healdelayedreaction = DateTime.MinValue;
                                                    this.Characters[player.ID].lastheal = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                        else
                                            continue;
                                    }
                                    else
                                    {
                                        this.CastSpell(this.Tab.targetgroup.ioctype.Text, new uint?(player.ID));
                                        this.restartloop = true;
                                        this.Characters[player.ID].healdelayedreaction = DateTime.MinValue;
                                        this.Characters[player.ID].lastheal = DateTime.UtcNow;
                                    }
                                    this.CastSpell(this.Tab.targetgroup.ioctype.Text, new uint?(player.ID));
                                    this.restartloop = true;
                                }
                            }
                        }
                        int num1;
                        if (this.Tab.targetgroup.micgroup.Checked)
                        {
                            timeSpan = DateTime.UtcNow.Subtract(this.mictime);
                            if (timeSpan.TotalMilliseconds > double.Parse(this.Tab.targetgroup.micgroupdelay.Text) && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26)))
                            {
                                num1 = (long)this.Statistics.CurrentMP <= (long)Server.SpellList["mor ioc comlha"].ManaCost ? 1 : 0;
                                goto label_226;
                            }
                        }
                        num1 = 1;
                        label_226:
                        if (num1 == 0)
                        {
                            this.CastSpell("mor ioc comlha", new uint?());
                            this.mictime = DateTime.UtcNow;
                        }
                    }
                    if (this.Tab.allalts != null)
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen) && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                            {
                                if (this.Tab.allalts.vaosuain && client.IsSuained && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao suain"].ManaCost)
                                {
                                    if (!this.SafeToWalkFast)
                                    {
                                        if (!Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1)
                                        {
                                            int num;
                                            if (this.Characters[client.PlayerID].aosuaindelayedreaction == DateTime.MinValue)
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].lastaosuain);
                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                            }
                                            else
                                                num = 1;
                                            if (num == 0)
                                            {
                                                this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.UtcNow;
                                            }
                                            else
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].aosuaindelayedreaction);
                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                {
                                                    this.CastSpell("ao suain", new uint?(client.PlayerID));
                                                    this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.MinValue;
                                                    this.Characters[client.PlayerID].lastaosuain = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                        else
                                            continue;
                                    }
                                    else
                                    {
                                        this.CastSpell("ao suain", new uint?(client.PlayerID));
                                        this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.MinValue;
                                        this.Characters[client.PlayerID].lastaosuain = DateTime.UtcNow;
                                    }
                                }
                                if (this.Tab.allalts.vioc && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26) && (double)client.Statistics.CurrentHP / (double)client.Statistics.MaximumHP * 100.0 <= (double)this.Tab.allalts.vioccond) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allalts.vioctype].ManaCost)
                                {
                                    if (!this.SafeToWalkFast && (double)client.Statistics.CurrentHP / (double)client.Statistics.MaximumHP * 100.0 > 20.0)
                                    {
                                        if (!Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1)
                                        {
                                            int num;
                                            if (this.Characters[client.PlayerID].healdelayedreaction == DateTime.MinValue)
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].lastheal);
                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                            }
                                            else
                                                num = 1;
                                            if (num == 0)
                                            {
                                                this.Characters[client.PlayerID].healdelayedreaction = DateTime.UtcNow;
                                            }
                                            else
                                            {
                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].healdelayedreaction);
                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                {
                                                    this.CastSpell(this.Tab.allalts.vioctype, new uint?(client.PlayerID));
                                                    this.restartloop = true;
                                                    this.Characters[client.PlayerID].healdelayedreaction = DateTime.MinValue;
                                                    this.Characters[client.PlayerID].lastheal = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.CastSpell(this.Tab.allalts.vioctype, new uint?(client.PlayerID));
                                        this.restartloop = true;
                                        this.Characters[client.PlayerID].healdelayedreaction = DateTime.MinValue;
                                        this.Characters[client.PlayerID].lastheal = DateTime.UtcNow;
                                    }
                                }
                            }
                        }
                    }
                    if (this.targetplayer.Count > 0)
                    {
                        foreach (targetPlayer targetPlayer in this.targetplayer)
                        {
                            if (targetPlayer != null)
                            {
                                this.thename = targetPlayer.Text;
                                if (this.alts.Contains((object)this.thename.ToLower()))
                                {
                                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                    {
                                        if (client != null)
                                        {
                                            this.c = string.Equals(this.thename, client.Name, StringComparison.OrdinalIgnoreCase);
                                            if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12)
                                            {
                                                if (targetPlayer.aosuainplayer.Checked && client.IsSuained && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao suain"].ManaCost)
                                                {
                                                    if (!this.SafeToWalkFast)
                                                    {
                                                        if (!Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1)
                                                        {
                                                            int num;
                                                            if (this.Characters[client.PlayerID].aosuaindelayedreaction == DateTime.MinValue)
                                                            {
                                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].lastaosuain);
                                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                                            }
                                                            else
                                                                num = 1;
                                                            if (num == 0)
                                                            {
                                                                this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.UtcNow;
                                                            }
                                                            else
                                                            {
                                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].aosuaindelayedreaction);
                                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                                {
                                                                    this.CastSpell("ao suain", new uint?(client.PlayerID));
                                                                    this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.MinValue;
                                                                    this.Characters[client.PlayerID].lastaosuain = DateTime.UtcNow;
                                                                }
                                                            }
                                                        }
                                                        else
                                                            continue;
                                                    }
                                                    else
                                                    {
                                                        this.CastSpell("ao suain", new uint?(client.PlayerID));
                                                        this.Characters[client.PlayerID].aosuaindelayedreaction = DateTime.MinValue;
                                                        this.Characters[client.PlayerID].lastaosuain = DateTime.UtcNow;
                                                    }
                                                }
                                                if (targetPlayer.iocplayer.Checked && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26) && (double)client.Statistics.CurrentHP / (double)client.Statistics.MaximumHP * 100.0 <= (double)targetPlayer.iocplayercond.Value) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetPlayer.ioctype.Text].ManaCost)
                                                {
                                                    if (!this.SafeToWalkFast && (double)client.Statistics.CurrentHP / (double)client.Statistics.MaximumHP * 100.0 > 20.0)
                                                    {
                                                        if (!Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1)
                                                        {
                                                            int num;
                                                            if (this.Characters[client.PlayerID].healdelayedreaction == DateTime.MinValue)
                                                            {
                                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].lastheal);
                                                                num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                                            }
                                                            else
                                                                num = 1;
                                                            if (num == 0)
                                                            {
                                                                this.Characters[client.PlayerID].healdelayedreaction = DateTime.UtcNow;
                                                            }
                                                            else
                                                            {
                                                                timeSpan = DateTime.UtcNow.Subtract(this.Characters[client.PlayerID].healdelayedreaction);
                                                                if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                                {
                                                                    this.CastSpell(targetPlayer.ioctype.Text, new uint?(client.PlayerID));
                                                                    this.restartloop = true;
                                                                    this.Characters[client.PlayerID].healdelayedreaction = DateTime.MinValue;
                                                                    this.Characters[client.PlayerID].lastheal = DateTime.UtcNow;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        this.CastSpell(targetPlayer.ioctype.Text, new uint?(client.PlayerID));
                                                        this.restartloop = true;
                                                        this.Characters[client.PlayerID].healdelayedreaction = DateTime.MinValue;
                                                        this.Characters[client.PlayerID].lastheal = DateTime.UtcNow;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                    {
                                        if (player != null && player.Name.Equals(this.thename, StringComparison.OrdinalIgnoreCase) && player.IsOnScreen)
                                        {
                                            if (targetPlayer.aosuainplayer.Checked && Server.StaticCharacters[player.ID].hassuain && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao suain"].ManaCost)
                                            {
                                                if (!this.SafeToWalkFast)
                                                {
                                                    if (!Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1)
                                                    {
                                                        int num;
                                                        if (this.Characters[player.ID].aosuaindelayedreaction == DateTime.MinValue)
                                                        {
                                                            timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].lastaosuain);
                                                            num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                                        }
                                                        else
                                                            num = 1;
                                                        if (num == 0)
                                                        {
                                                            this.Characters[player.ID].aosuaindelayedreaction = DateTime.UtcNow;
                                                        }
                                                        else
                                                        {
                                                            timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].aosuaindelayedreaction);
                                                            if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                            {
                                                                this.CastSpell("ao suain", new uint?(player.ID));
                                                                this.Characters[player.ID].aosuaindelayedreaction = DateTime.MinValue;
                                                                this.Characters[player.ID].lastaosuain = DateTime.UtcNow;
                                                            }
                                                        }
                                                    }
                                                    else
                                                        continue;
                                                }
                                                else
                                                {
                                                    this.CastSpell("ao suain", new uint?(player.ID));
                                                    this.Characters[player.ID].aosuaindelayedreaction = DateTime.MinValue;
                                                    this.Characters[player.ID].lastaosuain = DateTime.UtcNow;
                                                }
                                            }
                                            if (targetPlayer.iocplayer.Checked && ((this.SpellBar.Contains((ushort)40) ? (!this.MapInfo.Name.Contains("Pyramid") ? 1 : 0) : 1) != 0 && !this.SpellBar.Contains((ushort)26) && (Server.StaticCharacters[player.ID].justramattack || Server.StaticCharacters[player.ID].justsquidattack || (Server.StaticCharacters[player.ID].justeyeattack || Server.StaticCharacters[player.ID].justfright) || (Server.StaticCharacters[player.ID].justfaeattack || Server.StaticCharacters[player.ID].justhpcupped || (Server.StaticCharacters[player.ID].justspioraded || Server.StaticCharacters[player.ID].justcrashered)) || (Server.StaticCharacters[player.ID].justmadsouled || Server.StaticCharacters[player.ID].justkelbed || Server.StaticCharacters[player.ID].HpAmount <= (double)targetPlayer.iocplayercond.Value))) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetPlayer.ioctype.Text].ManaCost)
                                            {
                                                if (!this.SafeToWalkFast && player.HpAmount > 20.0)
                                                {
                                                    if (!Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1)
                                                    {
                                                        int num;
                                                        if (this.Characters[player.ID].healdelayedreaction == DateTime.MinValue)
                                                        {
                                                            timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].lastheal);
                                                            num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                                        }
                                                        else
                                                            num = 1;
                                                        if (num == 0)
                                                        {
                                                            this.Characters[player.ID].healdelayedreaction = DateTime.UtcNow;
                                                        }
                                                        else
                                                        {
                                                            timeSpan = DateTime.UtcNow.Subtract(this.Characters[player.ID].healdelayedreaction);
                                                            if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                            {
                                                                this.CastSpell(targetPlayer.ioctype.Text, new uint?(player.ID));
                                                                this.restartloop = true;
                                                                this.Characters[player.ID].healdelayedreaction = DateTime.MinValue;
                                                                this.Characters[player.ID].lastheal = DateTime.UtcNow;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    this.CastSpell(targetPlayer.ioctype.Text, new uint?(player.ID));
                                                    this.restartloop = true;
                                                    this.Characters[player.ID].healdelayedreaction = DateTime.MinValue;
                                                    this.Characters[player.ID].lastheal = DateTime.UtcNow;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.Tab.vwakescroll && this.HasItem("Wake Scroll") && (this.wakescrollbefore && this.MapInfo.Number != 509) && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && ((client.SpellBar.Contains((ushort)90) || client.SpellBar.Contains((ushort)101)) && this.Statistics.CurrentMP > 1000U))
                            {
                                this.UseItem("Wake Scroll");
                                Thread.Sleep(200);
                            }
                        }
                        foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                        {
                            if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen && (Server.StaticCharacters[player.ID].haspramh || Server.StaticCharacters[player.ID].haswff) && this.Statistics.CurrentMP > 1000U)
                            {
                                this.UseItem("Wake Scroll");
                                Thread.Sleep(200);
                            }
                        }
                    }
                    this.Dion();
                    this.Bubble();
                    if (this.Tab.targetgroup != null && this.Tab.targetgroup.reflection.Checked && this.CanSpell("Reflection", false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Reflection"].ManaCost)
                        this.CastSpell("Reflection", new uint?());
                    if (this.Tab.velemusmount && this.HasItem("Elemus Mount") && ((int)this.ClientForm - 16384 != 658 && (int)this.ClientForm - 16384 != 659) && !this.SpellBar.Contains((ushort)10))
                    {
                        this.UseItem("Elemus Mount");
                        Thread.Sleep(800);
                    }
                }
            }
            Thread.Sleep(1);
        }

        public void Bubble()
        {
            if (this.Statistics.CurrentHP == 0U || this.IsSkulled)
                return;
            if (this.Tab.bubblenorajo.Checked && this.CanSpell("Bubble Block", false) && !this.NorajoBesideMe && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Bubble Block"].ManaCost)
            {
                foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)this.NearbyNormalMonsters()).OrderByDescending<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                {
                    int num1;
                    if (npc != null && npc.IsOnScreen && npc.Name == "Norajo")
                    {
                        DateTime utcNow = DateTime.UtcNow;
                        TimeSpan timeSpan = utcNow.Subtract(npc.CreateTime);
                        if (timeSpan.TotalMilliseconds > 1000.0)
                        {
                            int num2;
                            if (this.SafeToWalkFast)
                            {
                                num2 = 1;
                            }
                            else
                            {
                                utcNow = DateTime.UtcNow;
                                timeSpan = utcNow.Subtract(npc.CreateTime);
                                num2 = timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0;
                            }
                            num1 = num2 == 0 ? 1 : 0;
                            goto label_11;
                        }
                    }
                    num1 = 1;
                    label_11:
                    if (num1 == 0)
                    {
                        this.CastSpell("Bubble Block", new uint?());
                        break;
                    }
                }
            }
            if (this.Tab.bubblenorajo.Checked && this.Tab.actonlyinmobs.Checked && this.Mobbed && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Bubble Block"].ManaCost)
                this.CastSpell("Bubble Block", new uint?());
        }

        public void Dion()
        {
            string text = this.Tab.diontype.Text;
            Npc[] npcArray = this.DionFilter();
            if (npcArray.Length > 0)
            {
                if (this.Tab.pd.Checked && this.CanSkill("Perfect Defense", false) && this.Statistics.CurrentMP > 500U)
                    this.UseSkill("Perfect Defense", 0U);
                if (this.Tab.dion_enemiesnext.Checked && (Decimal)this.SurroundedCount >= this.Tab.dion_enemiesnextcount.Value && !this.SpellBar.Contains((ushort)53))
                {
                    if (text.Equals("Glowing Stone") && this.HasItem(text) && (this.Statistics.CurrentMP > 1000U && !this.SpellBar.Contains((ushort)10)) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                    {
                        this.UseItem("Glowing Stone");
                        this.restartloop = true;
                        goto label_30;
                    }
                    else if (!text.Equals("Glowing Stone") && this.HasSpell(text, false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[text].ManaCost)
                    {
                        this.CastSpell(text, new uint?());
                        this.restartloop = true;
                        goto label_30;
                    }
                }
                if (this.Tab.dion_enemiesonscreen.Checked && (Decimal)npcArray.Length >= this.Tab.dion_enemiesonscreenvalue.Value && !this.SpellBar.Contains((ushort)53))
                {
                    if (text.Equals("Glowing Stone") && this.HasItem(text) && (this.Statistics.CurrentMP > 1000U && !this.SpellBar.Contains((ushort)10)) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                    {
                        this.UseItem("Glowing Stone");
                        this.restartloop = true;
                        goto label_30;
                    }
                    else if (!text.Equals("Glowing Stone") && this.HasSpell(text, false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[text].ManaCost)
                    {
                        this.CastSpell(text, new uint?());
                        this.restartloop = true;
                        goto label_30;
                    }
                }
                if (this.Tab.dion_aosith.Checked && (!this.SpellBar.Contains((ushort)11) || !this.SpellBar.Contains((ushort)119)) && !this.SpellBar.Contains((ushort)53))
                {
                    if (text.Equals("Glowing Stone") && this.HasItem(text) && (this.Statistics.CurrentMP > 1000U && !this.SpellBar.Contains((ushort)10)) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                    {
                        this.UseItem("Glowing Stone");
                        this.restartloop = true;
                        goto label_30;
                    }
                    else if (!text.Equals("Glowing Stone") && this.HasSpell(text, false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[text].ManaCost)
                    {
                        this.CastSpell(text, new uint?());
                        this.restartloop = true;
                        goto label_30;
                    }
                }
                if (this.Tab.asgallmonsters.Checked && !this.hasasgall && (long)this.Statistics.CurrentMP > (long)Server.SpellList["asgall faileas"].ManaCost)
                    this.CastSpell("asgall faileas", new uint?());
                if (this.Tab.dfmonsters.Checked && !this.hasdf && (long)this.Statistics.CurrentMP > (long)Server.SpellList["deireas faileas"].ManaCost)
                    this.CastSpell("deireas faileas", new uint?());
            }
            if (this.Tab.dion_lowhp.Checked && (double)this.Statistics.CurrentHP / (double)this.Statistics.MaximumHP * 100.0 <= (double)this.Tab.dion_hpcond.Value && !this.SpellBar.Contains((ushort)53))
            {
                if (text.Equals("Glowing Stone") && this.HasItem(text) && (this.Statistics.CurrentMP > 1000U && !this.SpellBar.Contains((ushort)10)) && Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name])
                {
                    this.UseItem("Glowing Stone");
                    this.restartloop = true;
                    goto label_30;
                }
                else if (!text.Equals("Glowing Stone") && this.HasSpell(text, false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[text].ManaCost)
                {
                    this.CastSpell(text, new uint?());
                    this.restartloop = true;
                    goto label_30;
                }
            }
            if (this.Tab.vaegissphere && this.HasSpell("Aegis Sphere", false) && (this.useaegis && !this.SpellBar.Contains((ushort)94)) && this.Statistics.CurrentMP >= 5000U && this.Statistics.CurrentHP / this.Statistics.MaximumHP * 100U > 50U)
            {
                this.CastSpell("Aegis Sphere", new uint?());
                this.useaegis = false;
                this.AegisTimer.Start();
            }
            label_30:
            Thread.Sleep(1);
        }

        public void AiteFas()
        {
            if (this.Statistics.CurrentHP == 0U || this.IsSkulled)
                return;
            if (this.Tab.vselfaite && !this.SpellBar.Contains((ushort)11) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.vselfaitetype].ManaCost)
            {
                this.CastSpell(this.Tab.vselfaitetype, new uint?(this.PlayerID));
                this.restartloop = true;
            }
            if (this.Tab.vselffas && !this.SpellBar.Contains((ushort)119) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.vselffastype].ManaCost)
            {
                this.CastSpell(this.Tab.vselffastype, new uint?(this.PlayerID));
                this.restartloop = true;
            }
            if (this.Tab.vdisenchanter && this.disbefore && (!this.disIsSummoned || DateTime.UtcNow.Subtract(this.distime).TotalSeconds > 361.0) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Disenchanter"].ManaCost)
            {
                this.disstopwalk = true;
                this.CastSpell("Disenchanter", new uint?());
                this.restartloop = true;
            }
            if (this.disstopwalk && this.discasttime != DateTime.MinValue && DateTime.UtcNow.Subtract(this.discasttime).TotalSeconds > 2.0)
            {
                this.disstopwalk = false;
                this.discasttime = DateTime.MinValue;
            }
            if (this.Tab.targetgroup != null)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                {
                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                    {
                        if (!this.pause)
                        {
                            if (this.Tab.targetgroup.aitegroup.Checked && !client.SpellBar.Contains((ushort)11) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.targetgroup.aitetype.Text].ManaCost)
                            {
                                this.CastSpell(this.Tab.targetgroup.aitetype.Text, new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (this.Tab.targetgroup.fasplayergroup.Checked && !client.SpellBar.Contains((ushort)119) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.targetgroup.fastype.Text].ManaCost)
                            {
                                this.CastSpell(this.Tab.targetgroup.fastype.Text, new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                        }
                        else
                            break;
                    }
                }
                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                {
                    if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1))
                    {
                        if (!this.pause)
                        {
                            if (this.Tab.targetgroup.aitegroup.Checked && Server.StaticCharacters[player.ID] != null && !Server.StaticCharacters[player.ID].hasaite && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.targetgroup.aitetype.Text].ManaCost)
                            {
                                this.CastSpell(this.Tab.targetgroup.aitetype.Text, new uint?(player.ID));
                                this.restartloop = true;
                            }
                            if (this.Tab.targetgroup.fasplayergroup.Checked && Server.StaticCharacters[player.ID] != null && !Server.StaticCharacters[player.ID].hasfas && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.targetgroup.fastype.Text].ManaCost)
                            {
                                this.CastSpell(this.Tab.targetgroup.fastype.Text, new uint?(player.ID));
                                this.restartloop = true;
                            }
                        }
                        else
                            break;
                    }
                }
            }
            if (this.Tab.allalts != null)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                {
                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen) && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                    {
                        if (!this.pause)
                        {
                            if (this.Tab.allalts.vaite && !client.SpellBar.Contains((ushort)11) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allalts.vaitetype].ManaCost)
                            {
                                this.CastSpell(this.Tab.allalts.vaitetype, new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (this.Tab.allalts.vfasplayer && !client.SpellBar.Contains((ushort)119) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allalts.vfastype].ManaCost)
                            {
                                this.CastSpell(this.Tab.allalts.vfastype, new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                        }
                        else
                            break;
                    }
                }
            }
            if (this.targetplayer.Count > 0)
            {
                foreach (targetPlayer targetPlayer in this.targetplayer)
                {
                    if (targetPlayer != null)
                    {
                        this.thename = targetPlayer.Text;
                        if (this.alts.Contains((object)this.thename.ToLower()))
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client != null)
                                {
                                    if (!this.pause)
                                    {
                                        this.c = string.Equals(this.thename, client.Name, StringComparison.CurrentCultureIgnoreCase);
                                        if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                                        {
                                            if (targetPlayer.aiteplayer.Checked && !client.SpellBar.Contains((ushort)11) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetPlayer.aitetype.Text].ManaCost)
                                            {
                                                this.CastSpell(targetPlayer.aitetype.Text, new uint?(client.PlayerID));
                                                this.restartloop = true;
                                            }
                                            if (targetPlayer.fasplayer.Checked && !client.SpellBar.Contains((ushort)119) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetPlayer.fastype.Text].ManaCost)
                                            {
                                                this.CastSpell(targetPlayer.fastype.Text, new uint?(client.PlayerID));
                                                this.restartloop = true;
                                            }
                                        }
                                    }
                                    else
                                        break;
                                }
                            }
                        }
                        else
                        {
                            foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                            {
                                if (player != null && player.Name.Equals(this.thename, StringComparison.CurrentCultureIgnoreCase) && player.IsOnScreen && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1))
                                {
                                    if (!this.pause)
                                    {
                                        if (targetPlayer.aiteplayer.Checked && Server.StaticCharacters[player.ID] != null && !Server.StaticCharacters[player.ID].hasaite && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetPlayer.aitetype.Text].ManaCost)
                                        {
                                            this.CastSpell(targetPlayer.aitetype.Text, new uint?(player.ID));
                                            this.restartloop = true;
                                        }
                                        if (targetPlayer.fasplayer.Checked && Server.StaticCharacters[player.ID] != null && !Server.StaticCharacters[player.ID].hasfas && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetPlayer.fastype.Text].ManaCost)
                                        {
                                            this.CastSpell(targetPlayer.fastype.Text, new uint?(player.ID));
                                            this.restartloop = true;
                                        }
                                    }
                                    else
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }

        public void BeagCradh()
        {
            if (this.Statistics.CurrentHP == 0U || this.IsSkulled)
                return;
            if (this.Tab.aocurse.Visible && (this.Tab.vaocurse || this.autowalkon && this.Tab.walkao.Checked) && this.aocradhsbefore)
            {
                if (this.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                {
                    this.CastSpell("ao ard cradh", new uint?(this.PlayerID));
                    this.restartloop = true;
                }
                if (this.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                {
                    this.CastSpell("ao mor cradh", new uint?(this.PlayerID));
                    this.restartloop = true;
                }
                if (this.SpellBar.Contains((ushort)82) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                {
                    this.CastSpell("ao cradh", new uint?(this.PlayerID));
                    this.restartloop = true;
                }
                if (this.SpellBar.Contains((ushort)5) && !this.Tab.vselfbc && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                {
                    this.CastSpell("ao beag cradh", new uint?(this.PlayerID));
                    this.restartloop = true;
                }
            }
            if ((this.Tab.vaocurse || this.autowalkon && this.Tab.walkao.Checked) && (this.aocradhsbefore && this.MapInfo.Number != 509 && (!this.SpellBar.Contains((ushort)89) && this.SpellBar.Contains((ushort)133))) && (this.Characters.ContainsKey(this.PlayerID) && !this.Characters[this.PlayerID].hasdarkerseal) && (DateTime.UtcNow.Subtract(this.grimescenttime).TotalSeconds > 11.0 && !this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name)) && Server.DARegged[this.Name])
            {
                this.UseItem("Grime Scent");
                this.grimescenttime = DateTime.UtcNow;
                this.restartloop = true;
            }
            if (this.Tab.vselfbc && this.beagcradhbefore && (!this.SpellBar.Contains((ushort)5) && !this.SpellBar.Contains((ushort)84)) && (!this.SpellBar.Contains((ushort)83) && !this.SpellBar.Contains((ushort)82) && !this.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
            {
                this.CastSpell("beag cradh", new uint?(this.PlayerID));
                this.restartloop = true;
            }
            if (this.Tab.targetgroup != null)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                {
                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                    {
                        if (this.Tab.targetgroup.aocursesgroup.Checked && this.aocradhsbefore)
                        {
                            if (client.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                            {
                                this.CastSpell("ao ard cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (client.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                            {
                                this.CastSpell("ao mor cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (client.SpellBar.Contains((ushort)82) && !this.Tab.targetgroup.ignorebardogroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                            {
                                this.CastSpell("ao cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (client.SpellBar.Contains((ushort)5) && !this.Tab.targetgroup.beagcradhgroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                            {
                                this.CastSpell("ao beag cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                        }
                        if (this.Tab.targetgroup.beagcradhgroup.Checked && this.beagcradhbefore && (!client.SpellBar.Contains((ushort)5) && !client.SpellBar.Contains((ushort)84)) && (!client.SpellBar.Contains((ushort)83) && !client.SpellBar.Contains((ushort)82) && !client.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                        {
                            this.CastSpell("beag cradh", new uint?(client.PlayerID));
                            this.restartloop = true;
                        }
                    }
                }
                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                {
                    if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1))
                    {
                        if (this.Tab.targetgroup.aocursesgroup.Checked && this.aocradhsbefore)
                        {
                            if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hasardcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                            {
                                this.CastSpell("ao ard cradh", new uint?(player.ID));
                                this.restartloop = true;
                            }
                            if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hasmorcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                            {
                                this.CastSpell("ao mor cradh", new uint?(player.ID));
                                this.restartloop = true;
                            }
                            if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hascradh && !this.Tab.targetgroup.ignorebardogroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                            {
                                this.CastSpell("ao cradh", new uint?(player.ID));
                                this.restartloop = true;
                            }
                            if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hasbeagcradh && !this.Tab.targetgroup.beagcradhgroup.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                            {
                                this.CastSpell("ao beag cradh", new uint?(player.ID));
                                this.restartloop = true;
                            }
                        }
                        if (this.Tab.targetgroup.beagcradhgroup.Checked && this.beagcradhbefore && (Server.StaticCharacters[player.ID] != null && !Server.StaticCharacters[player.ID].hasbeagcradh) && (!Server.StaticCharacters[player.ID].hascradh && !Server.StaticCharacters[player.ID].hasmorcradh && (!Server.StaticCharacters[player.ID].hasardcradh && !Server.StaticCharacters[player.ID].hasdarkseal)) && !Server.StaticCharacters[player.ID].hasdarkerseal && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                        {
                            this.CastSpell("beag cradh", new uint?(player.ID));
                            this.restartloop = true;
                        }
                    }
                }
            }
            if (this.Tab.allalts != null)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                {
                    if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen) && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                    {
                        if (this.Tab.allalts.vaocurses && this.aocradhsbefore)
                        {
                            if (client.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                            {
                                this.CastSpell("ao ard cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (client.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                            {
                                this.CastSpell("ao mor cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (client.SpellBar.Contains((ushort)82) && !this.Tab.allalts.vignorebardo && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                            {
                                this.CastSpell("ao cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                            if (client.SpellBar.Contains((ushort)5) && !this.Tab.allalts.vbeagcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                            {
                                this.CastSpell("ao beag cradh", new uint?(client.PlayerID));
                                this.restartloop = true;
                            }
                        }
                        if (this.Tab.allalts.vbeagcradh && this.beagcradhbefore && (!client.SpellBar.Contains((ushort)5) && !client.SpellBar.Contains((ushort)84)) && (!client.SpellBar.Contains((ushort)83) && !client.SpellBar.Contains((ushort)82) && !client.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                        {
                            this.CastSpell("beag cradh", new uint?(client.PlayerID));
                            this.restartloop = true;
                        }
                    }
                }
            }
            if (this.targetplayer.Count > 0)
            {
                foreach (targetPlayer targetPlayer in this.targetplayer)
                {
                    if (targetPlayer != null)
                    {
                        this.thename = targetPlayer.Text;
                        if (this.alts.Contains((object)this.thename.ToLower()))
                        {
                            foreach (Client client in Server.Alts.Values.ToArray<Client>())
                            {
                                if (client != null)
                                {
                                    this.c = string.Equals(this.thename, client.Name, StringComparison.OrdinalIgnoreCase);
                                    if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                                    {
                                        if (targetPlayer.aocursesplayer.Checked && this.aocradhsbefore)
                                        {
                                            if (client.SpellBar.Contains((ushort)84) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                            {
                                                this.CastSpell("ao ard cradh", new uint?(client.PlayerID));
                                                this.restartloop = true;
                                            }
                                            if (client.SpellBar.Contains((ushort)83) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                            {
                                                this.CastSpell("ao mor cradh", new uint?(client.PlayerID));
                                                this.restartloop = true;
                                            }
                                            if (client.SpellBar.Contains((ushort)82) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                            {
                                                this.CastSpell("ao cradh", new uint?(client.PlayerID));
                                                this.restartloop = true;
                                            }
                                            if (client.SpellBar.Contains((ushort)5) && !targetPlayer.beagcradhplayer.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                            {
                                                this.CastSpell("ao beag cradh", new uint?(client.PlayerID));
                                                this.restartloop = true;
                                            }
                                        }
                                        if (targetPlayer.beagcradhplayer.Checked && this.beagcradhbefore && (!client.SpellBar.Contains((ushort)5) && !client.SpellBar.Contains((ushort)84)) && (!client.SpellBar.Contains((ushort)83) && !client.SpellBar.Contains((ushort)82) && !client.SpellBar.Contains((ushort)133)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                        {
                                            this.CastSpell("beag cradh", new uint?(client.PlayerID));
                                            this.restartloop = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                            {
                                if (player != null && player.Name.Equals(this.thename, StringComparison.OrdinalIgnoreCase) && player.IsOnScreen && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1))
                                {
                                    if (targetPlayer.aocursesplayer.Checked && this.aocradhsbefore)
                                    {
                                        if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hasardcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao ard cradh"].ManaCost)
                                        {
                                            this.CastSpell("ao ard cradh", new uint?(player.ID));
                                            this.restartloop = true;
                                        }
                                        if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hasmorcradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao mor cradh"].ManaCost)
                                        {
                                            this.CastSpell("ao mor cradh", new uint?(player.ID));
                                            this.restartloop = true;
                                        }
                                        if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hascradh && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao cradh"].ManaCost)
                                        {
                                            this.CastSpell("ao cradh", new uint?(player.ID));
                                            this.restartloop = true;
                                        }
                                        if (Server.StaticCharacters[player.ID] != null && Server.StaticCharacters[player.ID].hasbeagcradh && !targetPlayer.beagcradhplayer.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao beag cradh"].ManaCost)
                                        {
                                            this.CastSpell("ao beag cradh", new uint?(player.ID));
                                            this.restartloop = true;
                                        }
                                    }
                                    if (targetPlayer.beagcradhplayer.Checked && this.beagcradhbefore && (Server.StaticCharacters[player.ID] != null && !Server.StaticCharacters[player.ID].hasbeagcradh) && (!Server.StaticCharacters[player.ID].hascradh && !Server.StaticCharacters[player.ID].hasmorcradh && (!Server.StaticCharacters[player.ID].hasardcradh && !Server.StaticCharacters[player.ID].hasdarkseal)) && !Server.StaticCharacters[player.ID].hasdarkerseal && (long)this.Statistics.CurrentMP > (long)Server.SpellList["beag cradh"].ManaCost)
                                    {
                                        this.CastSpell("beag cradh", new uint?(player.ID));
                                        this.restartloop = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public void Vineyard()
        {
            if (this.Tab.targetgroup != null && (this.Tab.targetgroup.vineyard.Checked && this.CanSpell("Lyliac Vineyard", false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Vineyard"].ManaCost))
            {
                this.CastSpell("Lyliac Vineyard", new uint?());
                this.restartloop = true;
            }
            if (this.Tab.allalts != null)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                {
                    if (this.Tab.allalts.vvineyard && this.CanSpell("Lyliac Vineyard", false) && (this.GroupMembers.Contains(client.Name) && client.LoggedOn) && client.Statistics.CurrentMP < uint.Parse(this.Tab.allalts.vvineyardcond) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Vineyard"].ManaCost)
                    {
                        this.CastSpell("Lyliac Vineyard", new uint?(client.PlayerID));
                        this.restartloop = true;
                    }
                }
            }
            if (this.targetplayer.Count <= 0)
                return;
            foreach (targetPlayer targetPlayer in this.targetplayer)
            {
                if (targetPlayer != null)
                {
                    this.thename = targetPlayer.Text;
                    if (this.alts.Contains((object)this.thename.ToLower()))
                    {
                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                        {
                            if (client != null && client.LoggedOn)
                            {
                                this.c = string.Equals(this.thename, client.Name, StringComparison.OrdinalIgnoreCase);
                                if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (targetPlayer.vineyard.Checked && this.CanSpell("Lyliac Vineyard", false) && (this.GroupMembers.Contains(client.Name) && client.Statistics.CurrentMP < uint.Parse(targetPlayer.vineyardcond.Text)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Vineyard"].ManaCost))
                                {
                                    this.CastSpell("Lyliac Vineyard", new uint?(client.PlayerID));
                                    this.restartloop = true;
                                }
                            }
                        }
                    }
                }
            }
        }

        public void OtherSpells()
        {
            if (this.Statistics.CurrentHP != 0U && !this.IsSkulled)
            {
                if (this.Tab.aodall.Checked && this.ImBlind && this.GMsNearby && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao dall"].ManaCost)
                {
                    this.CastSpell("ao dall", new uint?(this.PlayerID));
                    this.ImBlind = false;
                }
                DateTime utcNow;
                if ((this.Tab.vselfaopuinsein || this.autowalkon && this.Tab.walkao.Checked) && (this.aopuinseinbefore && !this.Tab.vfungusbeetleextract) && (this.SpellBar.Contains((ushort)35) || this.SpellBar.Contains((ushort)141) || this.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                {
                    utcNow = DateTime.UtcNow;
                    if (utcNow.Subtract(this.lastaopoison).TotalMilliseconds > 1000.0)
                    {
                        this.CastSpell("ao puinsein", new uint?(this.PlayerID));
                        this.lastaopoison = DateTime.UtcNow;
                    }
                }
                if (this.Tab.vdruidform && (!this.SpellBar.Contains((ushort)183) && !this.SpellBar.Contains((ushort)184) && !this.SpellBar.Contains((ushort)185)))
                    this.CastSpell(this.druidform.Name, new uint?());
                if (this.Tab.vselfhide && (!this.hashide || !this.SpellBar.Contains((ushort)10)) && ((long)this.Statistics.CurrentMP > (long)Server.SpellList["Hide"].ManaCost && this.cancast) && this.spellmap)
                {
                    this.hidetime = DateTime.UtcNow;
                    if (this.SpellBar.Contains((ushort)10))
                    {
                        this.MacroCast("Hide", new uint?());
                        this.MacroCast("White Bat Stance", new uint?());
                        if (this.CanSkill("Claw Fist", false))
                            this.UseSkill("Claw Fist", 0U);
                        else if (this.CanSkill("ao beag suain", false))
                            this.UseSkill("ao beag suain", 0U);
                        else
                            this.UseSkill("Assail", 0U);
                    }
                    this.MacroCast("Hide", new uint?());
                    this.MacroCast("White Bat Stance", new uint?());
                }
                if (this.Tab.targetgroup != null)
                {
                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                    {
                        if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                        {
                            if (this.Tab.targetgroup.aopuinseingroup.Checked && this.aopuinseinbefore && !this.Tab.vfungusbeetleextract && (client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                            {
                                TimeSpan timeSpan;
                                int num;
                                if (this.Characters[client.PlayerID].aopoisondelayedreaction == DateTime.MinValue)
                                {
                                    utcNow = DateTime.UtcNow;
                                    timeSpan = utcNow.Subtract(this.Characters[client.PlayerID].lastaopoison);
                                    num = timeSpan.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                }
                                else
                                    num = 1;
                                if (num == 0)
                                {
                                    this.Characters[client.PlayerID].aopoisondelayedreaction = DateTime.UtcNow;
                                }
                                else
                                {
                                    utcNow = DateTime.UtcNow;
                                    timeSpan = utcNow.Subtract(this.Characters[client.PlayerID].aopoisondelayedreaction);
                                    if (timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                    {
                                        utcNow = DateTime.UtcNow;
                                        timeSpan = utcNow.Subtract(this.Characters[client.PlayerID].lastaopoison);
                                        if (timeSpan.TotalMilliseconds > 1000.0)
                                        {
                                            this.CastSpell("ao puinsein", new uint?(client.PlayerID));
                                            this.Characters[client.PlayerID].aopoisondelayedreaction = DateTime.MinValue;
                                            this.Characters[client.PlayerID].lastaopoison = DateTime.UtcNow;
                                        }
                                    }
                                }
                            }
                            if (this.Tab.targetgroup.mdcperfect.Checked && !client.SpellBar.Contains((ushort)53) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost)
                            {
                                this.CastSpell("mor dion comlha", new uint?());
                                this.restartloop = true;
                                goto label_167;
                            }
                        }
                    }
                    foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                    {
                        if (player != null && this.GroupMembers.Contains(player.Name) && player.IsOnScreen && Server.StaticCharacters[player.ID] != null && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1))
                        {
                            if (this.Tab.targetgroup.aopuinseingroup.Checked && this.aopuinseinbefore && !this.Tab.vfungusbeetleextract && (Server.StaticCharacters[player.ID].hasswirlpoison || Server.StaticCharacters[player.ID].hasbubblepoison || Server.StaticCharacters[player.ID].hasct) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                this.CastSpell("ao puinsein", new uint?(player.ID));
                            if (this.Tab.targetgroup.mdcperfect.Checked && !Server.StaticCharacters[player.ID].hasdion && (!Server.StaticCharacters[player.ID].hasdioncomlha && !Server.StaticCharacters[player.ID].hasironskin) && !Server.StaticCharacters[player.ID].haswingsofprot && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost)
                            {
                                this.CastSpell("mor dion comlha", new uint?());
                                this.restartloop = true;
                                goto label_167;
                            }
                        }
                    }
                    if (this.Tab.targetgroup.vineyard.Checked && this.CanSpell("Lyliac Vineyard", false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Vineyard"].ManaCost)
                    {
                        this.CastSpell("Lyliac Vineyard", new uint?());
                        this.restartloop = true;
                    }
                    if (this.Tab.targetgroup.mdcspam.Checked && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost)
                        this.CastSpell("mor dion comlha", new uint?());
                }
                TimeSpan timeSpan1;
                if (this.Tab.allalts != null)
                {
                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                    {
                        if (this.altsneedflowered.Contains(client.Name) && this.Tab.allalts.vlyliacplayer && this.altsneedflowered.Contains(client.Name) && (client != null && client.Name != this.Name && this.Characters.ContainsKey(client.PlayerID) && (client.Statistics.CurrentMP > uint.Parse(this.Tab.allalts.vlyliacplayercond) || !client.Loaded || !client.LoggedOn || !this.Characters[client.PlayerID].IsOnScreen)))
                            this.altsneedflowered.Remove(client.Name);
                        if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen) && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                        {
                            if (this.Tab.allalts.vaopuinsein && this.aopuinseinbefore && (client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                            {
                                int num1;
                                if (this.Characters[client.PlayerID].aopoisondelayedreaction == DateTime.MinValue)
                                {
                                    utcNow = DateTime.UtcNow;
                                    timeSpan1 = utcNow.Subtract(this.Characters[client.PlayerID].lastaopoison);
                                    num1 = timeSpan1.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                }
                                else
                                    num1 = 1;
                                if (num1 == 0)
                                {
                                    this.Characters[client.PlayerID].aopoisondelayedreaction = DateTime.UtcNow;
                                }
                                else
                                {
                                    int num2;
                                    if (this.Characters[client.PlayerID].aopoisondelayedreaction != DateTime.MinValue)
                                    {
                                        utcNow = DateTime.UtcNow;
                                        timeSpan1 = utcNow.Subtract(this.Characters[client.PlayerID].aopoisondelayedreaction);
                                        num2 = timeSpan1.TotalMilliseconds <= (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value) ? 1 : 0;
                                    }
                                    else
                                        num2 = 1;
                                    if (num2 == 0)
                                    {
                                        utcNow = DateTime.UtcNow;
                                        timeSpan1 = utcNow.Subtract(this.Characters[client.PlayerID].lastaopoison);
                                        if (timeSpan1.TotalMilliseconds > 1000.0)
                                        {
                                            this.CastSpell("ao puinsein", new uint?(client.PlayerID));
                                            this.Characters[client.PlayerID].aopoisondelayedreaction = DateTime.MinValue;
                                            this.Characters[client.PlayerID].lastaopoison = DateTime.UtcNow;
                                        }
                                    }
                                }
                            }
                            if (this.Tab.allalts.vdion && this.GroupMembers.Contains(client.Name) && !client.SpellBar.Contains((ushort)53) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost)
                            {
                                this.CastSpell("mor dion comlha", new uint?());
                                this.restartloop = true;
                                goto label_167;
                            }
                            else
                            {
                                if (this.Tab.allalts.vvineyard && this.CanSpell("Lyliac Vineyard", false) && (this.GroupMembers.Contains(client.Name) && client.LoggedOn) && client.Statistics.CurrentMP < uint.Parse(this.Tab.allalts.vvineyardcond) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Vineyard"].ManaCost)
                                {
                                    this.CastSpell("Lyliac Vineyard", new uint?(client.PlayerID));
                                    this.restartloop = true;
                                }
                                if (this.Tab.allalts.vlyliacplayer && client.Loaded && (client.LoggedOn && client.Statistics.CurrentHP != 0U) && client.Statistics.CurrentMP < uint.Parse(this.Tab.allalts.vlyliacplayercond) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Plant"].ManaCost)
                                {
                                    if (!this.altsneedflowered.Contains(client.Name))
                                        this.altsneedflowered.Add(client.Name);
                                    if (this.altsneedflowered.Count > 0 && this.altsneedflowered[0] == client.Name)
                                    {
                                        this.CastSpell("Lyliac Plant", new uint?(client.PlayerID));
                                        this.restartloop = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (this.targetplayer.Count > 0)
                {
                    foreach (targetPlayer targetPlayer in this.targetplayer)
                    {
                        if (targetPlayer != null)
                        {
                            this.thename = targetPlayer.Text;
                            if (this.alts.Contains((object)this.thename.ToLower()))
                            {
                                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                {
                                    if (client != null && client.LoggedOn)
                                    {
                                        this.c = string.Equals(this.thename, client.Name, StringComparison.OrdinalIgnoreCase);
                                        if (this.c && this.altsneedflowered.Contains(client.Name) && (this.Characters.ContainsKey(client.PlayerID) && targetPlayer.lyliacplayer.Checked) && this.altsneedflowered.Contains(client.Name) && (client.Statistics.CurrentMP > uint.Parse(targetPlayer.lyliacplayercond.Text) || !client.Loaded || !client.LoggedOn || !this.Characters[client.PlayerID].IsOnScreen))
                                            this.altsneedflowered.Remove(client.Name);
                                        if (this.c && this.Characters.ContainsKey(client.PlayerID) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(client.PlayerID) || !(Server.StaticCharacters[client.PlayerID] is Player) || (Server.StaticCharacters[client.PlayerID] as Player).Head != (ushort)0 && (Server.StaticCharacters[client.PlayerID] as Player).HideBool != (byte)1))
                                        {
                                            if (targetPlayer.aopuinseinplayer.Checked && this.aopuinseinbefore && (client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                            {
                                                int num;
                                                if (this.Characters[client.PlayerID].aopoisondelayedreaction == DateTime.MinValue)
                                                {
                                                    utcNow = DateTime.UtcNow;
                                                    timeSpan1 = utcNow.Subtract(this.Characters[client.PlayerID].lastaopoison);
                                                    num = timeSpan1.TotalMilliseconds <= 1000.0 ? 1 : 0;
                                                }
                                                else
                                                    num = 1;
                                                if (num == 0)
                                                {
                                                    this.Characters[client.PlayerID].aopoisondelayedreaction = DateTime.UtcNow;
                                                }
                                                else
                                                {
                                                    utcNow = DateTime.UtcNow;
                                                    timeSpan1 = utcNow.Subtract(this.Characters[client.PlayerID].aopoisondelayedreaction);
                                                    if (timeSpan1.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.reactdelaya.Value, (int)this.Tab.reactdelayb.Value))
                                                    {
                                                        utcNow = DateTime.UtcNow;
                                                        timeSpan1 = utcNow.Subtract(this.Characters[client.PlayerID].lastaopoison);
                                                        if (timeSpan1.TotalMilliseconds > 1000.0)
                                                        {
                                                            this.CastSpell("ao puinsein", new uint?(client.PlayerID));
                                                            this.Characters[client.PlayerID].aopoisondelayedreaction = DateTime.MinValue;
                                                            this.Characters[client.PlayerID].lastaopoison = DateTime.UtcNow;
                                                        }
                                                    }
                                                }
                                            }
                                            if (targetPlayer.dionplayer.Checked && this.GroupMembers.Contains(client.Name) && !client.SpellBar.Contains((ushort)53) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost)
                                            {
                                                this.CastSpell("mor dion comlha", new uint?());
                                                this.restartloop = true;
                                                goto label_167;
                                            }
                                            else if (targetPlayer.mdclowmp.Checked && this.GroupMembers.Contains(client.Name) && (!client.SpellBar.Contains((ushort)53) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost) && client.Statistics.CurrentMP < uint.Parse(targetPlayer.mdclowmpNum.Text))
                                            {
                                                this.CastSpell("mor dion comlha", new uint?());
                                                this.restartloop = true;
                                                goto label_167;
                                            }
                                            else
                                            {
                                                if (targetPlayer.vineyard.Checked && this.CanSpell("Lyliac Vineyard", false) && (this.GroupMembers.Contains(client.Name) && client.Statistics.CurrentMP < uint.Parse(targetPlayer.vineyardcond.Text)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Vineyard"].ManaCost)
                                                {
                                                    this.CastSpell("Lyliac Vineyard", new uint?(client.PlayerID));
                                                    this.restartloop = true;
                                                }
                                                if (targetPlayer.lyliacplayer.Checked && client.Loaded && (client.LoggedOn && client.Statistics.CurrentHP != 0U) && client.Statistics.CurrentMP < uint.Parse(targetPlayer.lyliacplayercond.Text) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["Lyliac Plant"].ManaCost)
                                                {
                                                    if (!this.altsneedflowered.Contains(client.Name))
                                                        this.altsneedflowered.Add(client.Name);
                                                    if (this.altsneedflowered.Count > 0 && this.altsneedflowered[0] == client.Name)
                                                    {
                                                        this.CastSpell("Lyliac Plant", new uint?(client.PlayerID));
                                                        this.restartloop = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyPlayer()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                                {
                                    if (player != null && player.Name.Equals(this.thename, StringComparison.OrdinalIgnoreCase) && player.IsOnScreen && Server.StaticCharacters[player.ID] != null && (this.SafeToWalkFast || !Server.StaticCharacters.ContainsKey(player.ID) || !(Server.StaticCharacters[player.ID] is Player) || (Server.StaticCharacters[player.ID] as Player).Head != (ushort)0 && (Server.StaticCharacters[player.ID] as Player).HideBool != (byte)1))
                                    {
                                        if (targetPlayer.aopuinseinplayer.Checked && this.aopuinseinbefore && (Server.StaticCharacters[player.ID].hasswirlpoison || Server.StaticCharacters[player.ID].hasbubblepoison || Server.StaticCharacters[player.ID].hasct) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["ao puinsein"].ManaCost)
                                            this.CastSpell("ao puinsein", new uint?(player.ID));
                                        if (targetPlayer.dionplayer.Checked && this.GroupMembers.Contains(Server.StaticCharacters[player.ID].Name) && (!Server.StaticCharacters[player.ID].hasdion && !Server.StaticCharacters[player.ID].hasdioncomlha) && (!Server.StaticCharacters[player.ID].hasironskin && !Server.StaticCharacters[player.ID].haswingsofprot) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["mor dion comlha"].ManaCost)
                                        {
                                            this.CastSpell("mor dion comlha", new uint?());
                                            this.restartloop = true;
                                            goto label_167;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.LyliacTargets()).OrderBy<Player, int>((Func<Player, int>)(e => e.LyliacTime.Millisecond)))
                {
                    if (player != null && player.IsOnScreen && Server.StaticCharacters[player.ID] != null)
                    {
                        do
                        {
                            this.CastSpell("Lyliac Plant", new uint?(player.ID));
                            this.CastSpell("fas spiorad", new uint?());
                            if (player.IsOnScreen && !this.pause)
                                Thread.Sleep(200);
                            else
                                break;
                        }
                        while (!Server.StaticCharacters[player.ID].justgotflowered);
                        player.LyliacTime = DateTime.UtcNow;
                    }
                }
                if ((this.Tab.vfungusbeetleextract || this.autowalkon && this.Tab.walkao.Checked) && (this.HasItem("Fungus Beetle Extract") && this.aopuinseinbefore && (!this.SpellBar.Contains((ushort)10) && Server.DARegged.ContainsKey(this.Name))) && Server.DARegged[this.Name])
                {
                    if ((this.SpellBar.Contains((ushort)35) || this.SpellBar.Contains((ushort)141) || this.SpellBar.Contains((ushort)1)) && this.Statistics.CurrentMP > 2U)
                        this.UseItem("Fungus Beetle Extract");
                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                    {
                        if (client != null && client.Name != this.Name && (this.Characters.ContainsKey(client.PlayerID) && this.GroupMembers.Contains(client.Name)) && this.Characters[client.PlayerID].IsOnScreen && this.ServerLocation.DistanceFrom(this.Characters[client.PlayerID].Location) <= 12 && ((client.SpellBar.Contains((ushort)35) || client.SpellBar.Contains((ushort)141) || client.SpellBar.Contains((ushort)1)) && this.Statistics.CurrentMP > 2U))
                            this.UseItem("Fungus Beetle Extract");
                    }
                    foreach (Player player in (IEnumerable<Player>)((IEnumerable<Player>)this.NearbyNonAlts()).OrderBy<Player, int>((Func<Player, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
                    {
                        if (player != null && this.GroupMembers.Contains(player.Name) && (player.IsOnScreen && Server.StaticCharacters[player.ID] != null) && (Server.StaticCharacters[player.ID].hasswirlpoison || Server.StaticCharacters[player.ID].hasbubblepoison || Server.StaticCharacters[player.ID].hasct) && this.Statistics.CurrentMP > 2U)
                            this.UseItem("Fungus Beetle Extract");
                    }
                }
            }
            label_167:
            Thread.Sleep(1);
        }

        public void SpellMonsters()
        {
            if (this.Statistics.CurrentHP == 0U || this.IsSkulled)
                return;
            Npc[] R1 = this.NearestMonsters();
            if (this.Tab.allMonsters != null && this.MapInfo != null && this.MapInfo.IsLoaded)
            {
                if (this.Tab.openmedchest.Checked)
                {
                    R1 = this.Asilon();
                }
                else
                {
                    R1 = !this.Tab.allMonsters.targettype.Text.Equals("Highest Hp") ? (!this.Tab.allMonsters.targettype.Text.Equals("Lowest Hp") ? (!this.Tab.allMonsters.targettype.Text.Equals("Farthest") ? this.NearestMonsters() : this.farthestMonsters()) : this.LowestHPMonster()) : this.HighestHPMonster();
                    if (this.MapInfo.Name.Contains("Chaos"))
                        R1 = this.ChaosAI(R1);
                    else if (this.MapInfo.Name.Contains("Mount Giragan"))
                        R1 = this.MTGAI(R1);
                    else if (this.MapInfo.Name.Contains("Shinewood Forest 2") && this.MapInfo.Name != "Shinewood Forest 2" || this.MapInfo.Name.Contains("Shinewood Forest 3") && this.MapInfo.Name != "Shinewood Forest 3" || this.MapInfo.Name.Contains("Shinewood Forest 4") && this.MapInfo.Name != "Shinewood Forest 4")
                        R1 = this.SWAI(R1);
                    else if (this.MapInfo.Name.Contains("Oren Ruins"))
                        R1 = this.NobisAI(R1);
                    else if (this.MapInfo.Name.Contains("Chadul"))
                        R1 = this.ChadulAI(R1);
                    else if (this.MapInfo.Name.Contains("Andor"))
                        R1 = this.AndorAI(R1);
                    else if (this.MapInfo.Name.Contains("Desert Dunes"))
                        R1 = this.DesertDunesAI(R1);
                    else if (this.MapInfo.Name.Contains("Water"))
                        R1 = this.WaterDungeonAI(R1);
                    else if (this.MapInfo.Name.Contains("Macabre Grave Yard"))
                        R1 = this.ZombieEventAI();
                    else if (this.MapInfo.Name.Contains("Lost Ruin"))
                        R1 = this.LRAI(R1);
                    else if (this.MapInfo.Name.Contains("Dung Field"))
                        R1 = this.DungAI(R1);
                    else if (this.MapInfo.Name.Contains("Assassin Dungeon"))
                        R1 = this.AssDungAI(R1);
                    else if (this.MapInfo.Name.Contains("Preserved Vault"))
                        R1 = this.VaultAI(R1);
                    else if (this.MapInfo.Name.Contains("Yowien"))
                        R1 = this.YowienAI(R1);
                    else if (this.MapInfo.Name.Contains("Sacred Forest"))
                        R1 = this.TavalyAI(R1);
                    else if (this.MapInfo.Name.Contains("Low Tides"))
                        R1 = (this.LowTideAI(R1));
                }
            }
            if (this.Tab.briescantattack.Checked && (this.HasSpell("beag breisleich", false) || this.HasSpell("breisleich", false) || this.HasSpell("mor breisleich", false)))
            {
                foreach (Character character in Server.StaticCharacters.Values.ToArray<Character>())
                {
                    if (character != null && character.IsOnScreen && character.DistanceFrom(this.ServerLocation) <= 12 && character.CantAttack)
                    {
                        if (this.HasSpell("mor breisleich", false))
                            this.CastSpell("mor breisleich", new uint?(character.ID));
                        else if (this.HasSpell("breisleich", false))
                            this.CastSpell("breisleich", new uint?(character.ID));
                        else if (this.HasSpell("beag breisleich", false))
                            this.CastSpell("beag breisleich", new uint?(character.ID));
                    }
                }
            }
            if (this.Tab.allMonsters != null && this.Tab.allMonsters.attack1.Checked && this.Tab.allMonsters.attack1type.Text == "mor strioch pian gar" && (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U))
            {
                this.CastSpell("fas spiorad", new uint?());
                this.monsterloop = true;
            }
            else
            {
                if (this.Tab.allMonsters != null && (this.Tab.allMonsters.attack2.Checked && this.Tab.allMonsters.attack2type.Text == "Cursed Tune" && DateTime.UtcNow.Subtract(this.cttime).TotalSeconds > 10.0))
                {
                    foreach (Npc npc in R1)
                    {
                        if (npc != null)
                        {
                            if (!this.pause && (this.Tab.allMonsters.attack2.Checked && !(this.Tab.allMonsters.attack2type.Text != "Cursed Tune") && DateTime.UtcNow.Subtract(this.cttime).TotalSeconds > 10.0))
                            {
                                if (!this.HasInfiniteMR(npc.Image) && (this.MapInfo.Name.StartsWith("Crypt ") ? 1 : (npc.Image != 46 ? 1 : 0)) != 0 && ((this.MapInfo.Name.Contains("Manor") ? 1 : (npc.Image != 321 ? 1 : 0)) != 0 && npc.Image != 452 && npc.IsOnScreen) && !Server.StaticCharacters[npc.ID].hasct)
                                {
                                    this.CastSpell(this.Tab.allMonsters.secattackwith.Name, new uint?(npc.ID));
                                    this.monsterloop = true;
                                    goto label_860;
                                }
                            }
                            else
                                break;
                        }
                    }
                }
                if (this.Tab.Monsters != null)
                {
                    foreach (TargetMonster targetMonster in this.targetmonster)
                    {
                        if (targetMonster != null)
                        {
                            Npc[] npcArray = this.NearbyMonstersByImage(targetMonster.Text);
                            if (targetMonster.pramh.Checked && targetMonster.attackafterpramh.Checked)
                            {
                                foreach (Npc npc in npcArray)
                                {
                                    if (npc != null)
                                    {
                                        if (targetMonster.pramh.Checked && !this.pause && (!(targetMonster.fascursetargettype.Text == "Spell 1 only") || ((int)this.LastMonsterId != (int)npc.ID ? (this.LastMonsterId != 0U ? 1 : 0) : ((int)this.LastMonsterId != (int)npc.ID ? 1 : 0)) == 0))
                                        {
                                            if (targetMonster.pramhwith.Name.Contains("pramh") && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].haspramh ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                            else if (targetMonster.pramhwith.Name == "suain" && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hassuain ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                            else if (targetMonster.pramhwith.Name == "dall" && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hasdall ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                            else if (targetMonster.pramhwith.Name == "Mesmerize" && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hasmes ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                }
                                foreach (Npc npc in npcArray)
                                {
                                    if (npc != null && targetMonster.pramhwith.Name.Contains("pramh") && !Server.StaticCharacters[npc.ID].haspramh)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                    else if (npc != null && targetMonster.pramhwith.Name == "suain" && !Server.StaticCharacters[npc.ID].hassuain)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                    else if (npc != null && targetMonster.pramhwith.Name == "dall" && !Server.StaticCharacters[npc.ID].hasdall)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                    else if (npc != null && targetMonster.pramhwith.Name == "Mesmerize" && !Server.StaticCharacters[npc.ID].hasmes)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                }
                            }
                        }
                    }
                }
                if (this.Tab.allMonsters != null)
                {
                    if (this.Tab.allMonsters.pramhbasherstarget.Checked)
                    {
                        foreach (Client client in Server.Clients.ToArray())
                        {
                            Client c = client;
                            if (c != null && c.MapInfo.Number == this.MapInfo.Number && (c.Tab.assail.Checked && c.Tab.useskills.Checked) && c.MainTarget != null)
                            {
                                if ((int)c.MainTarget.LastHitByID != (int)c.PlayerID && !Server.StaticCharacters[c.MainTarget.ID].haspramh && !Server.StaticCharacters[c.MainTarget.ID].hasmes && c.MainTarget.DistanceFrom(this.ServerLocation) <= 11)
                                {
                                    if (this.HasSpell("Mesmerize", false))
                                    {
                                        this.CastSpell("Mesmerize", new uint?(c.MainTarget.ID));
                                        break;
                                    }
                                    if (this.HasSpell("pramh", false))
                                    {
                                        this.CastSpell("pramh", new uint?(c.MainTarget.ID));
                                        break;
                                    }
                                    if (this.HasSpell("beag pramh", false))
                                    {
                                        this.CastSpell("beag pramh", new uint?(c.MainTarget.ID));
                                        break;
                                    }
                                    break;
                                }
                                int num = 0;
                                foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)R1).OrderBy<Npc, int>((Func<Npc, int>)(e => e.DistanceFrom(c.ServerLocation))))
                                {
                                    if (npc != null && npc.DistanceFrom(c.ServerLocation) <= 8 && (int)npc.LastHitByID != (int)c.PlayerID && (Server.StaticCharacters[npc.ID].haspramh || Server.StaticCharacters[npc.ID].hasmes))
                                        ++num;
                                }
                                if (num <= 2)
                                {
                                    foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)R1).OrderBy<Npc, int>((Func<Npc, int>)(e => e.DistanceFrom(c.ServerLocation))))
                                    {
                                        if (npc != null && npc.DistanceFrom(c.ServerLocation) <= 8 && ((int)npc.LastHitByID != (int)c.PlayerID && !Server.StaticCharacters[npc.ID].haspramh) && !Server.StaticCharacters[npc.ID].hasmes && ((Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasardcradh || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo || Server.StaticCharacters[npc.ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked) && (Server.StaticCharacters[npc.ID].hasfas && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked) && c.MainTarget.DistanceFrom(this.ServerLocation) <= 11 && num <= 2)
                                        {
                                            if (this.HasSpell("Mesmerize", false))
                                                this.CastSpell("Mesmerize", new uint?(npc.ID));
                                            else if (this.HasSpell("pramh", false))
                                                this.CastSpell("pramh", new uint?(npc.ID));
                                            else if (this.HasSpell("beag pramh", false))
                                                this.CastSpell("beag pramh", new uint?(npc.ID));
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                    if (this.Tab.allMonsters.pramh.Checked && this.Tab.allMonsters.attackafterpramh.Checked)
                    {
                        if (this.Tab.allMonsters.spelllargestgroup.Checked)
                            R1 = this.BestTargets((int)this.Tab.allMonsters.spelllargestgroupnumber.Value, R1);
                        foreach (Npc npc in R1)
                        {
                            if (npc != null)
                            {
                                if (this.Tab.allMonsters.pramh.Checked && !this.pause)
                                {
                                    if (this.Tab.allMonsters.pndlowhp.Checked && Convert.ToInt16(Server.StaticCharacters[npc.ID].HpAmount) <= (short)20 && npc.IsOnScreen && this.Statistics.CurrentMP > 3000U)
                                    {
                                        if (this.HasSpell("mor pian na dion", false))
                                            this.CastSpell("mor pian na dion", new uint?(npc.ID));
                                        else
                                            this.CastSpell("pian na dion", new uint?(npc.ID));
                                    }
                                    else if (!(this.Tab.allMonsters.fascursetargettype.Text == "Spell 1 only") || ((int)this.LastMonsterId != (int)npc.ID ? (this.LastMonsterId != 0U ? 1 : 0) : ((int)this.LastMonsterId != (int)npc.ID ? 1 : 0)) == 0)
                                    {
                                        if ((this.Tab.allMonsters.pramhwith.Name.Contains("pramh") || (!this.MapInfo.Name.Contains("Andor") ? (this.Tab.allMonsters.pramhwith.Name == "Mesmerize" ? 1 : 0) : 0) != 0) && (!this.HasInfiniteMR(npc.Image) && ((!this.Tab.allMonsters.spampramh.Checked ? (Server.StaticCharacters[npc.ID].haspramh ? 0 : (!Server.StaticCharacters[npc.ID].hasmes ? 1 : 0)) : 1) != 0 && npc.IsOnScreen)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        else if (this.Tab.allMonsters.pramhwith.Name == "suain" && !this.HasInfiniteMR(npc.Image) && (!Server.StaticCharacters[npc.ID].hassuain && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        else if (this.Tab.allMonsters.pramhwith.Name == "dall" && !this.HasInfiniteMR(npc.Image) && (!Server.StaticCharacters[npc.ID].hasdall && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        else if (this.MapInfo.Name.Contains("Andor") && !Server.StaticCharacters[npc.ID].haspramh && (!Server.StaticCharacters[npc.ID].hasmes && npc.Image != 538) && (npc.Image != 537 && npc.Image != 540 && (npc.Image != 541 && npc.Image != 552)) && (npc.Image != 555 && npc.Image != 554 && (!this.HasInfiniteMR(npc.Image) && npc.IsOnScreen)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                    }
                                    else
                                        break;
                                    this.Heal();
                                    if (this.restartloop)
                                    {
                                        this.restartloop = false;
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                    else
                                    {
                                        this.AiteFas();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.BeagCradh();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.OtherSpells();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        foreach (Npc npc in R1)
                        {
                            if (npc != null && this.Tab.allMonsters.pramhwith.Name.Contains("pramh") && !Server.StaticCharacters[npc.ID].haspramh)
                            {
                                this.monsterloop = true;
                                goto label_860;
                            }
                            else if (npc != null && this.Tab.allMonsters.pramhwith.Name == "suain" && !Server.StaticCharacters[npc.ID].hassuain)
                            {
                                this.monsterloop = true;
                                goto label_860;
                            }
                            else if (npc != null && this.Tab.allMonsters.pramhwith.Name == "dall" && !Server.StaticCharacters[npc.ID].hasdall)
                            {
                                this.monsterloop = true;
                                goto label_860;
                            }
                            else if (npc != null && this.Tab.allMonsters.pramhwith.Name == "Mesmerize" && !Server.StaticCharacters[npc.ID].hasmes)
                            {
                                this.monsterloop = true;
                                goto label_860;
                            }
                        }
                    }
                }
                if (this.Tab.allMonsters != null && ((this.Tab.allMonsters.cradh.Checked || this.Tab.allMonsters.fas.Checked) && this.Tab.allMonsters.fascursetargettype.Text == "Spell 1 only"))
                {
                    foreach (Npc npc in R1)
                    {
                        if (!this.pause)
                        {
                            if (this.Tab.allMonsters.cradh.Checked && ((this.LastMonsterId != 0U ? ((int)this.LastMonsterId == (int)npc.ID ? 1 : 0) : (this.LastMonsterId == 0U ? 1 : 0)) != 0 && !this.HasInfiniteMR(npc.Image) && (npc.Image != 411 && npc.IsOnScreen)) && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.cursewith.ManaCost && (npc != null && !Server.StaticCharacters[npc.ID].hasdarkerseal && (!Server.StaticCharacters[npc.ID].hasdarkseal && !Server.StaticCharacters[npc.ID].hasardcradh) && ((!Server.StaticCharacters[npc.ID].hasmorcradh || !(this.Tab.allMonsters.cursewith.Name == "mor cradh")) && (!Server.StaticCharacters[npc.ID].hascradh || !(this.Tab.allMonsters.cursewith.Name == "cradh"))) && (!Server.StaticCharacters[npc.ID].hasbeagcradh || !(this.Tab.allMonsters.cursewith.Name == "beag cradh")) && npc != null))
                            {
                                this.CastSpell(this.Tab.allMonsters.cursewith.Name, new uint?(npc.ID));
                                this.monsterloop = true;
                                goto label_860;
                            }
                            else if (npc != null && this.Tab.allMonsters.fas.Checked && (!this.IgnoreFas(npc.Image) && !Server.StaticCharacters[npc.ID].hasfas) && ((this.LastMonsterId != 0U ? ((int)this.LastMonsterId == (int)npc.ID ? 1 : 0) : (this.LastMonsterId == 0U ? 1 : 0)) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.faswith.ManaCost)
                            {
                                if (this.Tab.allMonsters.fasamancrystals.Checked)
                                {
                                    this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                    this.monsterloop = true;
                                    goto label_860;
                                }
                                else if (!this.Tab.allMonsters.fasamancrystals.Checked && !this.HasInfiniteMR(npc.Image))
                                {
                                    this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                    this.monsterloop = true;
                                    goto label_860;
                                }
                            }
                        }
                        else
                            break;
                    }
                }
                if (this.Tab.allMonsters != null && ((this.Tab.allMonsters.cradh.Checked || this.Tab.allMonsters.fas.Checked) && this.Tab.allMonsters.fascursetargettype.Text == "Fas/curse 1, then the next"))
                {
                    if (this.Tab.allMonsters.spelllargestgroup.Checked)
                        R1 = this.BestTargets((int)this.Tab.allMonsters.spelllargestgroupnumber.Value, R1);
                    foreach (Npc npc in R1)
                    {
                        if (!this.pause)
                        {
                            if (this.Tab.allMonsters.cradh.Checked && !this.HasInfiniteMR(npc.Image) && (npc.Image != 411 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.cursewith.ManaCost && (npc != null && !Server.StaticCharacters[npc.ID].hasdarkerseal && (!Server.StaticCharacters[npc.ID].hasdarkseal && !Server.StaticCharacters[npc.ID].hasardcradh) && ((!Server.StaticCharacters[npc.ID].hasmorcradh || !(this.Tab.allMonsters.cursewith.Name == "mor cradh")) && (!Server.StaticCharacters[npc.ID].hascradh || !(this.Tab.allMonsters.cursewith.Name == "cradh"))) && (!Server.StaticCharacters[npc.ID].hasbeagcradh || !(this.Tab.allMonsters.cursewith.Name == "beag cradh")) && npc != null))
                            {
                                this.CastSpell(this.Tab.allMonsters.cursewith.Name, new uint?(npc.ID));
                                this.monsterloop = true;
                                goto label_860;
                            }
                            else if (npc != null && this.Tab.allMonsters.fas.Checked && (!this.IgnoreFas(npc.Image) && !Server.StaticCharacters[npc.ID].hasfas) && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.faswith.ManaCost)
                            {
                                if (this.Tab.allMonsters.fasamancrystals.Checked)
                                {
                                    this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                    this.monsterloop = true;
                                    goto label_860;
                                }
                                else if (!this.Tab.allMonsters.fasamancrystals.Checked && !this.HasInfiniteMR(npc.Image))
                                {
                                    this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                    this.monsterloop = true;
                                    goto label_860;
                                }
                            }
                        }
                        else
                            break;
                    }
                }
                if (this.Tab.Monsters != null)
                {
                    foreach (TargetMonster targetMonster in this.targetmonster)
                    {
                        if (targetMonster != null)
                        {
                            Npc[] R2 = this.NearbyMonstersByImage(targetMonster.Text);
                            if ((targetMonster.cradh.Checked || targetMonster.fas.Checked) && targetMonster.fascursetargettype.Text == "Fas all, then curse all")
                            {
                                if (targetMonster.fas.Checked)
                                {
                                    foreach (Npc npc in R2)
                                    {
                                        if (!this.pause)
                                        {
                                            if (npc != null && targetMonster.fas.Checked && (!Server.StaticCharacters[npc.ID].hasfas && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)targetMonster.faswith.ManaCost)
                                            {
                                                this.CastSpell(targetMonster.faswith.Name, new uint?(npc.ID));
                                                this.Heal();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.AiteFas();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.BeagCradh();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                        else
                                                        {
                                                            this.OtherSpells();
                                                            if (this.restartloop)
                                                            {
                                                                this.restartloop = false;
                                                                this.monsterloop = true;
                                                                goto label_860;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                    if (this.FasCount(R2) != R2.Length)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                }
                                if (targetMonster.cradh.Checked)
                                {
                                    foreach (Npc npc in R2)
                                    {
                                        if (!this.pause)
                                        {
                                            if (npc != null && targetMonster.cradh.Checked && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)targetMonster.cursewith.ManaCost && (!targetMonster.spamfascurse.Checked ? (npc == null || Server.StaticCharacters[npc.ID].hasdarkerseal || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasardcradh) || (Server.StaticCharacters[npc.ID].hasmorcradh && targetMonster.cursewith.Name.Equals("mor cradh") || Server.StaticCharacters[npc.ID].hascradh && targetMonster.cursewith.Name.Equals("cradh")) ? 1 : (!Server.StaticCharacters[npc.ID].hasbeagcradh ? 0 : (targetMonster.cursewith.Name.Equals("beag cradh") ? 1 : 0))) : 0) == 0)
                                            {
                                                this.CastSpell(targetMonster.cursewith.Name, new uint?(npc.ID));
                                                this.Heal();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.AiteFas();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.BeagCradh();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                        else
                                                        {
                                                            this.OtherSpells();
                                                            if (this.restartloop)
                                                            {
                                                                this.restartloop = false;
                                                                this.monsterloop = true;
                                                                goto label_860;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                    if (this.CradhCount(R2) != R2.Length)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                }
                            }
                        }
                    }
                }
                if (this.Tab.allMonsters != null && ((this.Tab.allMonsters.cradh.Checked || this.Tab.allMonsters.fas.Checked) && this.Tab.allMonsters.fascursetargettype.Text == "Fas all, then curse all"))
                {
                    if (this.Tab.allMonsters.spelllargestgroup.Checked)
                        R1 = this.BestTargets((int)this.Tab.allMonsters.spelllargestgroupnumber.Value, R1);
                    if (this.Tab.allMonsters.fas.Checked)
                    {
                        bool flag1 = false;
                        bool flag2 = false;
                        bool flag3 = false;
                        if (this.Tab.allMonsters.ignoredistant.Checked)
                        {
                            foreach (Npc npc in R1)
                            {
                                bool flag4 = false;
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.fas.Checked && (!this.IgnoreFas(npc.Image) && npc.IsOnScreen) && (!this.Tab.allMonsters.spamfascurse.Checked ? (!Server.StaticCharacters[npc.ID].hasfas ? 1 : 0) : 1) != 0)
                                    {
                                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                        {
                                            if (npc.WithinSquare(client.ServerLocation, 1) && client.MainTarget != null && (int)client.MainTarget.ID == (int)npc.ID && (client.Tab.useskills.Checked || client.Tab.assail.Checked))
                                                flag4 = true;
                                        }
                                        if (flag4)
                                        {
                                            flag1 = true;
                                            this.CurrentTarget = npc.ID;
                                            if (this.Tab.allMonsters.fasamancrystals.Checked)
                                                this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                            else if (!this.Tab.allMonsters.fasamancrystals.Checked && !this.HasInfiniteMR(npc.Image))
                                                this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if (!flag1)
                        {
                            foreach (Npc npc in R1)
                            {
                                bool flag4 = false;
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.fas.Checked && (!this.IgnoreFas(npc.Image) && npc.IsOnScreen) && (!this.Tab.allMonsters.spamfascurse.Checked ? (!Server.StaticCharacters[npc.ID].hasfas ? 1 : 0) : 1) != 0)
                                    {
                                        if (npc.WithinSquare(this.ServerLocation, 1))
                                            flag4 = true;
                                        foreach (Character character in this.Characters.Values.ToArray<Character>())
                                        {
                                            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 1))
                                                flag4 = true;
                                        }
                                        if (flag4)
                                        {
                                            flag2 = true;
                                            this.CurrentTarget = npc.ID;
                                            if (this.Tab.allMonsters.fasamancrystals.Checked)
                                                this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                            else if (!this.Tab.allMonsters.fasamancrystals.Checked && !this.HasInfiniteMR(npc.Image))
                                                this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if (!flag2 && !flag1)
                        {
                            foreach (Npc npc in R1)
                            {
                                bool flag4 = false;
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.fas.Checked && (!this.IgnoreFas(npc.Image) && npc.IsOnScreen) && (!this.Tab.allMonsters.spamfascurse.Checked ? (!Server.StaticCharacters[npc.ID].hasfas ? 1 : 0) : 1) != 0)
                                    {
                                        if (npc.WithinSquare(this.ServerLocation, 3))
                                            flag4 = true;
                                        foreach (Character character in this.Characters.Values.ToArray<Character>())
                                        {
                                            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 3))
                                                flag4 = true;
                                        }
                                        if (flag4)
                                        {
                                            flag3 = true;
                                            this.CurrentTarget = npc.ID;
                                            if (this.Tab.allMonsters.fasamancrystals.Checked)
                                                this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                            else if (!this.Tab.allMonsters.fasamancrystals.Checked && !this.HasInfiniteMR(npc.Image))
                                                this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if (!flag2 && !flag3 && !flag1 && !this.Tab.allMonsters.ignoredistant.Checked)
                        {
                            foreach (Npc npc in R1)
                            {
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.fas.Checked && (!this.IgnoreFas(npc.Image) && npc.IsOnScreen) && (!this.Tab.allMonsters.spamfascurse.Checked ? (!Server.StaticCharacters[npc.ID].hasfas ? 1 : 0) : 1) != 0)
                                    {
                                        this.CurrentTarget = npc.ID;
                                        if (this.Tab.allMonsters.fasamancrystals.Checked)
                                            this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                        else if (!this.Tab.allMonsters.fasamancrystals.Checked && !this.HasInfiniteMR(npc.Image))
                                            this.CastSpell(this.Tab.allMonsters.faswith.Name, new uint?(npc.ID));
                                        this.Heal();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.AiteFas();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.BeagCradh();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.OtherSpells();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                            if (this.FasCount(R1) != R1.Length)
                            {
                                this.monsterloop = true;
                                goto label_860;
                            }
                        }
                        else if (this.FasCountLesser(R1))
                        {
                            this.monsterloop = true;
                            goto label_860;
                        }
                    }
                    if (this.Tab.allMonsters.cradh.Checked)
                    {
                        bool flag1 = false;
                        bool flag2 = false;
                        bool flag3 = false;
                        if (this.Tab.allMonsters.ignoredistant.Checked)
                        {
                            foreach (Npc npc in R1)
                            {
                                bool flag4 = false;
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.cradh.Checked && (!this.HasInfiniteMR(npc.Image) && npc.Image != 411) && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.cursewith.ManaCost && (!this.Tab.allMonsters.spamfascurse.Checked ? (npc == null || Server.StaticCharacters[npc.ID].hasdarkerseal || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasardcradh) || (Server.StaticCharacters[npc.ID].hasmorcradh && this.Tab.allMonsters.cursewith.Name.Equals("mor cradh") || Server.StaticCharacters[npc.ID].hascradh && this.Tab.allMonsters.cursewith.Name.Equals("cradh")) ? 1 : (!Server.StaticCharacters[npc.ID].hasbeagcradh ? 0 : (this.Tab.allMonsters.cursewith.Name.Equals("beag cradh") ? 1 : 0))) : 0) == 0)
                                    {
                                        foreach (Client client in Server.Alts.Values.ToArray<Client>())
                                        {
                                            if (npc.WithinSquare(client.ServerLocation, 1) && client.MainTarget != null && (int)client.MainTarget.ID == (int)npc.ID && (client.Tab.useskills.Checked || client.Tab.assail.Checked))
                                                flag4 = true;
                                        }
                                        if (flag4)
                                        {
                                            flag1 = true;
                                            this.CurrentTarget = npc.ID;
                                            this.CastSpell(this.Tab.allMonsters.cursewith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if (!flag1)
                        {
                            foreach (Npc npc in R1)
                            {
                                bool flag4 = false;
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.cradh.Checked && (!this.HasInfiniteMR(npc.Image) && npc.Image != 411) && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.cursewith.ManaCost && (!this.Tab.allMonsters.spamfascurse.Checked ? (npc == null || Server.StaticCharacters[npc.ID].hasdarkerseal || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasardcradh) || (Server.StaticCharacters[npc.ID].hasmorcradh && this.Tab.allMonsters.cursewith.Name.Equals("mor cradh") || Server.StaticCharacters[npc.ID].hascradh && this.Tab.allMonsters.cursewith.Name.Equals("cradh")) ? 1 : (!Server.StaticCharacters[npc.ID].hasbeagcradh ? 0 : (this.Tab.allMonsters.cursewith.Name.Equals("beag cradh") ? 1 : 0))) : 0) == 0)
                                    {
                                        if (npc.WithinSquare(this.ServerLocation, 1))
                                            flag4 = true;
                                        foreach (Character character in this.Characters.Values.ToArray<Character>())
                                        {
                                            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 1))
                                                flag4 = true;
                                        }
                                        if (flag4)
                                        {
                                            flag2 = true;
                                            this.CurrentTarget = npc.ID;
                                            this.CastSpell(this.Tab.allMonsters.cursewith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if (!flag2 && !flag1)
                        {
                            foreach (Npc npc in R1)
                            {
                                bool flag4 = false;
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.cradh.Checked && (!this.HasInfiniteMR(npc.Image) && npc.Image != 411) && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.cursewith.ManaCost && (!this.Tab.allMonsters.spamfascurse.Checked ? (npc == null || Server.StaticCharacters[npc.ID].hasdarkerseal || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasardcradh) || (Server.StaticCharacters[npc.ID].hasmorcradh && this.Tab.allMonsters.cursewith.Name.Equals("mor cradh") || Server.StaticCharacters[npc.ID].hascradh && this.Tab.allMonsters.cursewith.Name.Equals("cradh")) ? 1 : (!Server.StaticCharacters[npc.ID].hasbeagcradh ? 0 : (this.Tab.allMonsters.cursewith.Name.Equals("beag cradh") ? 1 : 0))) : 0) == 0)
                                    {
                                        if (npc.WithinSquare(this.ServerLocation, 3))
                                            flag4 = true;
                                        foreach (Character character in this.Characters.Values.ToArray<Character>())
                                        {
                                            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 3))
                                                flag4 = true;
                                        }
                                        if (flag4)
                                        {
                                            flag3 = true;
                                            this.CurrentTarget = npc.ID;
                                            this.CastSpell(this.Tab.allMonsters.cursewith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if (!flag2 && !flag3 && !flag1 && !this.Tab.allMonsters.ignoredistant.Checked)
                        {
                            foreach (Npc npc in R1)
                            {
                                if (!this.pause)
                                {
                                    if (npc != null && this.Tab.allMonsters.cradh.Checked && (!this.HasInfiniteMR(npc.Image) && npc.Image != 411) && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.cursewith.ManaCost && (!this.Tab.allMonsters.spamfascurse.Checked ? (npc == null || Server.StaticCharacters[npc.ID].hasdarkerseal || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasardcradh) || (Server.StaticCharacters[npc.ID].hasmorcradh && this.Tab.allMonsters.cursewith.Name.Equals("mor cradh") || Server.StaticCharacters[npc.ID].hascradh && this.Tab.allMonsters.cursewith.Name.Equals("cradh")) ? 1 : (!Server.StaticCharacters[npc.ID].hasbeagcradh ? 0 : (this.Tab.allMonsters.cursewith.Name.Equals("beag cradh") ? 1 : 0))) : 0) == 0)
                                    {
                                        this.CurrentTarget = npc.ID;
                                        this.CastSpell(this.Tab.allMonsters.cursewith.Name, new uint?(npc.ID));
                                        this.Heal();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.AiteFas();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.BeagCradh();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.OtherSpells();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                            if (this.CradhCount(R1) != R1.Length)
                            {
                                this.monsterloop = true;
                                goto label_860;
                            }
                        }
                        else if (this.CradhCountLesser(R1))
                        {
                            this.monsterloop = true;
                            goto label_860;
                        }
                    }
                }
                if (this.Tab.allMonsters != null && (this.Tab.allMonsters.pramh.Checked && !this.Tab.allMonsters.attackafterpramh.Checked))
                {
                    if (this.Tab.allMonsters.spelllargestgroup.Checked)
                        R1 = this.BestTargets((int)this.Tab.allMonsters.spelllargestgroupnumber.Value, R1);
                    foreach (Npc npc in R1)
                    {
                        if (this.Tab.allMonsters.pramh.Checked && !this.pause)
                        {
                            if (npc != null)
                            {
                                if (!(this.Tab.allMonsters.fascursetargettype.Text == "Spell 1 only") || ((int)this.LastMonsterId != (int)npc.ID ? (this.LastMonsterId != 0U ? 1 : 0) : ((int)this.LastMonsterId != (int)npc.ID ? 1 : 0)) == 0)
                                {
                                    if (this.Tab.allMonsters.cradh.Checked && this.CradhCount(R1) != R1.Length)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                    else if (this.Tab.allMonsters.fas.Checked && this.FasCount(R1) != R1.Length)
                                    {
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                    else
                                    {
                                        if ((this.Tab.allMonsters.pramhwith.Name.Contains("pramh") || (!this.MapInfo.Name.Contains("Andor") ? (this.Tab.allMonsters.pramhwith.Name == "Mesmerize" ? 1 : 0) : 0) != 0) && (!this.HasInfiniteMR(npc.Image) && (!this.Tab.allMonsters.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].haspramh ? 1 : 0) : 1) != 0) && ((!this.Tab.allMonsters.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hasmes ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        else if (this.Tab.allMonsters.pramhwith.Name == "suain" && !this.HasInfiniteMR(npc.Image) && !Server.StaticCharacters[npc.ID].hassuain && ((Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasardcradh || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo || Server.StaticCharacters[npc.ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked) && ((Server.StaticCharacters[npc.ID].hasfas && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked) && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        else if (this.Tab.allMonsters.pramhwith.Name == "dall" && !this.HasInfiniteMR(npc.Image) && !Server.StaticCharacters[npc.ID].hasdall && ((Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasardcradh || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo || Server.StaticCharacters[npc.ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked) && ((Server.StaticCharacters[npc.ID].hasfas && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked) && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        else if (this.MapInfo.Name.Contains("Andor") && npc.Image != 538 && (npc.Image != 537 && npc.Image != 540) && (npc.Image != 541 && npc.Image != 552 && (npc.Image != 555 && npc.Image != 554)) && !this.HasInfiniteMR(npc.Image) && (!this.Tab.allMonsters.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].haspramh ? 1 : 0) : 1) != 0 && ((!this.Tab.allMonsters.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hasmes ? 1 : 0) : 1) != 0 && ((Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasardcradh || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo || Server.StaticCharacters[npc.ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked) && ((Server.StaticCharacters[npc.ID].hasfas && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked) && npc.IsOnScreen)) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[this.Tab.allMonsters.pramhwith.Name].ManaCost)
                                            this.CastSpell(this.Tab.allMonsters.pramhwith.Name, new uint?(npc.ID));
                                        this.Heal();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.AiteFas();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.BeagCradh();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.OtherSpells();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        else
                            break;
                    }
                }
                if (this.Tab.allMonsters != null && (!this.Tab.allMonsters.attack1.Checked || this.Tab.allMonsters.attackwith.Name.StartsWith("Frost Arrow") ? 1 : (this.Tab.asrs.Checked ? (this.asready ? 0 : (!this.rsready ? 1 : 0)) : (!this.Tab.asrs.Checked ? 1 : 0))) != 0)
                {
                    if (!this.Tab.allMonsters.onlyattackwithmp.Checked || !(this.Tab.allMonsters.onlyattackwithmpamount.Text != string.Empty) || this.Statistics.CurrentMP >= uint.Parse(this.Tab.allMonsters.onlyattackwithmpamount.Text))
                    {
                        if (this.Tab.allMonsters.pndlowhp.Checked)
                        {
                            foreach (Npc npc in R1)
                            {
                                if ((!this.Tab.allMonsters.cradh.Checked || this.CradhCount(R1) == R1.Length) && ((!this.Tab.allMonsters.fas.Checked || this.FasCount(R1) == R1.Length) && !this.pause && this.Tab.allMonsters.pndlowhp.Checked))
                                {
                                    if (npc != null && Server.StaticCharacters.ContainsKey(npc.ID) && (Server.StaticCharacters[npc.ID].HpAmount <= 20.0 && npc.IsOnScreen) && this.Statistics.CurrentMP > 3000U)
                                    {
                                        if (this.HasSpell("mor pian na dion", false))
                                            this.CastSpell("mor pian na dion", new uint?(npc.ID));
                                        else
                                            this.CastSpell("pian na dion", new uint?(npc.ID));
                                        this.Heal();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.AiteFas();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.BeagCradh();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.OtherSpells();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        if ((this.Tab.allMonsters.groupedmembers.Checked ? (this.GroupMembers.Count > 0 ? (this.GroupIsInRange((int)this.Tab.allMonsters.groupedmembersrange.Value) ? 1 : 0) : (this.GroupMembers.Count == 0 ? 1 : 0)) : (!this.Tab.allMonsters.groupedmembers.Checked ? 1 : 0)) != 0)
                        {
                            if (this.Tab.allMonsters.attack2.Checked && this.Tab.allMonsters.attack2type.Text == "Supernova Shot")
                            {
                                foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)R1).OrderBy<Npc, double>((Func<Npc, double>)(c => c.HpAmount)))
                                {
                                    if (this.Tab.allMonsters.attack2.Checked)
                                    {
                                        if (npc != null && Server.StaticCharacters[npc.ID] != null && (npc.IsOnScreen && !this.HasInfiniteMR(npc.Image)) && (npc.Image != 46 && npc.Image != 321 && (npc.Image != 452 && npc.Image != 240)) && (npc.Image != 273 && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.secattackwith.ManaCost && (this.Tab.allMonsters.ctd.Checked && Server.StaticCharacters[npc.ID].hasct || !this.Tab.allMonsters.ctd.Checked)) && (this.Tab.allMonsters.fasedonly.Checked && Server.StaticCharacters[npc.ID].hasfas || !this.Tab.allMonsters.fasedonly.Checked) && (this.Tab.allMonsters.ardedonly.Checked && (Server.StaticCharacters[npc.ID].hasbeagcradh || Server.StaticCharacters[npc.ID].hasbardo || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hasardcradh || Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasdarkerseal)) || !this.Tab.allMonsters.ardedonly.Checked) && ((this.Tab.allMonsters.pramh.Checked ? (Server.StaticCharacters[npc.ID].haspramh || Server.StaticCharacters[npc.ID].haswff || Server.StaticCharacters[npc.ID].hassuain ? 1 : (Server.StaticCharacters[npc.ID].hasdall ? 1 : 0)) : (!this.Tab.allMonsters.pramh.Checked ? 1 : 0)) != 0 && ((Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasardcradh || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo || Server.StaticCharacters[npc.ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked) && (Server.StaticCharacters[npc.ID].hasfas && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked)) && !Server.StaticCharacters[npc.ID].hasmonsterdion)
                                        {
                                            this.CastSpell(this.Tab.allMonsters.secattackwith.Name, new uint?(npc.ID));
                                            break;
                                        }
                                    }
                                    else
                                        break;
                                }
                            }
                            if (this.Tab.allMonsters.attack1.Checked && this.Tab.allMonsters.attack1type.Text == "Frost + 3 Shocks")
                            {
                                foreach (Npc npc in R1)
                                {
                                    if (npc != null && npc.IsOnScreen && (npc.Image != 321 && npc.Image != 46) && npc.Image != 452 && this.Statistics.CurrentMP > 4000U)
                                    {
                                        this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                }
                            }
                            else if (this.Tab.allMonsters.attack1.Checked && this.Tab.allMonsters.attack1type.Text == "Star + 3 Shocks")
                            {
                                foreach (Npc npc in R1)
                                {
                                    if (npc != null && npc.IsOnScreen && (npc.Image != 321 && npc.Image != 46) && npc.Image != 452 && this.Statistics.CurrentMP > 4000U)
                                    {
                                        this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                        Thread.Sleep(325);
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                }
                            }
                            else if (this.Tab.allMonsters.attack1.Checked)
                            {
                                if (this.Tab.allMonsters.attack1type.Text == "mor strioch pian gar" && this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                {
                                    this.CastSpell("fas spiorad", new uint?());
                                    this.monsterloop = true;
                                    goto label_860;
                                }
                                else
                                {
                                    if (this.Tab.allMonsters.attack1type.Text == "mor strioch pian gar" && this.Tab.recorditemdata.Checked)
                                    {
                                        foreach (Npc npc in R1)
                                        {
                                            if (npc != null && npc.IsOnScreen && npc.Name == string.Empty)
                                            {
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                    }
                                    if (this.Tab.allMonsters.ardedonly.Checked)
                                    {
                                        this.cradhcount = 0;
                                        foreach (Npc npc in R1)
                                        {
                                            if (npc != null && npc.IsOnScreen && (Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasdarkseal || (Server.StaticCharacters[npc.ID].hasardcradh || Server.StaticCharacters[npc.ID].hasmorcradh) || Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbeagcradh))
                                                ++this.cradhcount;
                                        }
                                        if (this.Tab.allMonsters.attack1type.Text.Contains(" gar") && this.cradhcount < R1.Length / 2)
                                        {
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                    }
                                    if (this.Tab.allMonsters.fasedonly.Checked)
                                    {
                                        this.fascount = 0;
                                        foreach (Npc npc in R1)
                                        {
                                            if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID].hasfas)
                                                ++this.fascount;
                                        }
                                        if (this.Tab.allMonsters.attack1type.Text.Contains(" gar") && this.fascount < R1.Length / 2)
                                        {
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                    }
                                    if (this.Tab.allMonsters.pndiond.Checked)
                                    {
                                        this.dioncount = 0;
                                        foreach (Npc npc in R1)
                                        {
                                            if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID].hasdion)
                                                ++this.dioncount;
                                        }
                                        if (this.dioncount != 0)
                                        {
                                            int num = 0;
                                            foreach (Npc npc in R1)
                                            {
                                                if (npc != null && npc.IsOnScreen)
                                                    ++num;
                                            }
                                            if (this.dioncount == num)
                                            {
                                                foreach (Npc npc in R1)
                                                {
                                                    if (npc != null && npc.IsOnScreen)
                                                    {
                                                        if (this.HasSpell("mor pian na dion", false))
                                                            this.CastSpell("mor pian na dion", new uint?(npc.ID));
                                                        else
                                                            this.CastSpell("pian na dion", new uint?(npc.ID));
                                                    }
                                                }
                                                if (!this.Tab.allMonsters.multi.Checked)
                                                {
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                            }
                                        }
                                    }
                                    if (this.AttackGroup1())
                                    {
                                        Character character = this.BestTarget<Character>(1, R1);
                                        if (character != null && character is Player && character.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost)
                                        {
                                            if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143))
                                            {
                                                if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                    this.CastSpell("fas spiorad", new uint?());
                                                else
                                                    this.CastSpell("mor strioch pian gar", new uint?());
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.CurrentTarget = character.ID;
                                                if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGrooSurrounding(character.Location, R1, 1))
                                                    this.CastMedSpell("Groo", new uint?(character.ID));
                                                else if (!(this.Tab.allMonsters.attack1type.Text == "Keeter") || !this.DontAttackSurrounding(character.Location, R1, 1))
                                                    this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?(character.ID));
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                        else if (character != null && character is Npc && (character.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost) && !this.HasInfiniteMR((character as Npc).Image) && ((this.Tab.allMonsters.pramh.Checked ? (Server.StaticCharacters[(character as Npc).ID].haspramh || Server.StaticCharacters[(character as Npc).ID].haswff || Server.StaticCharacters[(character as Npc).ID].hassuain ? 1 : (Server.StaticCharacters[(character as Npc).ID].hasdall ? 1 : 0)) : (!this.Tab.allMonsters.pramh.Checked ? 1 : 0)) != 0 && ((Server.StaticCharacters[(character as Npc).ID].hasdarkerseal || Server.StaticCharacters[(character as Npc).ID].hasardcradh || (Server.StaticCharacters[(character as Npc).ID].hasdarkseal || Server.StaticCharacters[(character as Npc).ID].hasmorcradh) || (Server.StaticCharacters[(character as Npc).ID].hascradh || Server.StaticCharacters[(character as Npc).ID].hasbardo || Server.StaticCharacters[(character as Npc).ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked)) && ((Server.StaticCharacters[(character as Npc).ID].hasfas || this.IgnoreFas((character as Npc).Image)) && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked))
                                        {
                                            if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143))
                                            {
                                                if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                    this.CastSpell("fas spiorad", new uint?());
                                                else
                                                    this.CastSpell("mor pian na dion", new uint?()); //This allows the client to attack while silenced
                                                this.CastSpell("mor pian na dion", new uint?((character as Npc).ID));

                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.CurrentTarget = character.ID;
                                                if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGroo((character as Npc).Image))
                                                    this.CastMedSpell("Groo", new uint?((character as Npc).ID));
                                                else if (this.Tab.allMonsters.attack1type.Text == "Keeter" && (character as Npc).Image == 634)
                                                {
                                                    if (this.HasSpell("mor pian na dion", false))
                                                        this.CastSpell("mor pian na dion", new uint?((character as Npc).ID));
                                                    else
                                                        this.CastSpell("pian na dion", new uint?((character as Npc).ID));
                                                }
                                                else
                                                    this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?((character as Npc).ID));
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                        else if (this.cradhcount == 0 && this.Tab.allMonsters.pndbeforecurse.Checked)
                                        {
                                            foreach (Npc npc in R1)
                                            {
                                                if (npc != null)
                                                {
                                                    if (this.HasSpell("mor pian na dion", false))
                                                        this.CastSpell("mor pian na dion", new uint?(npc.ID));
                                                    else
                                                        this.CastSpell("pian na dion", new uint?(npc.ID));
                                                    if (!this.Tab.allMonsters.multi.Checked)
                                                    {
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (this.AttackGroup2())
                                    {
                                        Character character = this.BestTarget<Character>(2, R1);
                                        if (character != null && character is Player && character.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost)
                                        {
                                            if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143))
                                            {
                                                if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                    this.CastSpell("fas spiorad", new uint?());
                                                else
                                                    this.CastSpell("mor pian na dion", new uint?());
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.CurrentTarget = character.ID;
                                                if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGrooSurrounding(character.Location, R1, 2))
                                                    this.CastMedSpell("Groo", new uint?(character.ID));
                                                else if (!(this.Tab.allMonsters.attack1type.Text == "Keeter") || !this.DontAttackSurrounding(character.Location, R1, 2))
                                                    this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?(character.ID));
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                        else if (character != null && character is Npc && (character.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost) && !this.HasInfiniteMR((character as Npc).Image) && ((this.Tab.allMonsters.pramh.Checked ? (Server.StaticCharacters[(character as Npc).ID].haspramh || Server.StaticCharacters[(character as Npc).ID].haswff || Server.StaticCharacters[(character as Npc).ID].hassuain ? 1 : (Server.StaticCharacters[(character as Npc).ID].hasdall ? 1 : 0)) : (!this.Tab.allMonsters.pramh.Checked ? 1 : 0)) != 0 && ((Server.StaticCharacters[(character as Npc).ID].hasdarkerseal || Server.StaticCharacters[(character as Npc).ID].hasardcradh || (Server.StaticCharacters[(character as Npc).ID].hasdarkseal || Server.StaticCharacters[(character as Npc).ID].hasmorcradh) || (Server.StaticCharacters[(character as Npc).ID].hascradh || Server.StaticCharacters[(character as Npc).ID].hasbardo || Server.StaticCharacters[(character as Npc).ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked)) && ((Server.StaticCharacters[(character as Npc).ID].hasfas || this.IgnoreFas((character as Npc).Image)) && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked))
                                        {
                                            if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143))
                                            {
                                                if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                    this.CastSpell("fas spiorad", new uint?());
                                                else
                                                    this.CastSpell("mor pian na dion", new uint?());
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.CurrentTarget = character.ID;
                                                if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGroo((character as Npc).Image))
                                                    this.CastMedSpell("Groo", new uint?((character as Npc).ID));
                                                else if (this.Tab.allMonsters.attack1type.Text == "Keeter" && (character as Npc).Image == 634)
                                                {
                                                    if (this.HasSpell("mor pian na dion", false))
                                                        this.CastSpell("mor pian na dion", new uint?((character as Npc).ID));
                                                    else
                                                        this.CastSpell("pian na dion", new uint?((character as Npc).ID));
                                                }
                                                else
                                                    this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?((character as Npc).ID));
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                        else if (this.cradhcount == 0 && this.Tab.allMonsters.pndbeforecurse.Checked)
                                        {
                                            foreach (Npc npc in R1)
                                            {
                                                if (npc != null)
                                                {
                                                    if (this.HasSpell("mor pian na dion", false))
                                                        this.CastSpell("mor pian na dion", new uint?(npc.ID));
                                                    else
                                                        this.CastSpell("pian na dion", new uint?(npc.ID));
                                                    if (!this.Tab.allMonsters.multi.Checked)
                                                    {
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (this.AttackGroup3())
                                    {
                                        Character character = this.BestTarget<Character>(3, R1);
                                        if (character != null && character is Player && character.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost)
                                        {
                                            if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143))
                                            {
                                                if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                    this.CastSpell("fas spiorad", new uint?());
                                                else
                                                    this.CastSpell("mor pian na dion", new uint?());
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.CurrentTarget = character.ID;
                                                if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGrooSurrounding(character.Location, R1, 2))
                                                    this.CastMedSpell("Groo", new uint?(character.ID));
                                                else if (!(this.Tab.allMonsters.attack1type.Text == "Keeter") || !this.DontAttackSurrounding(character.Location, R1, 2))
                                                    this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?(character.ID));
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                        else if (character != null && character is Npc && (character.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost) && !this.HasInfiniteMR((character as Npc).Image) && ((this.Tab.allMonsters.pramh.Checked ? (Server.StaticCharacters[(character as Npc).ID].haspramh || Server.StaticCharacters[(character as Npc).ID].haswff || Server.StaticCharacters[(character as Npc).ID].hassuain ? 1 : (Server.StaticCharacters[(character as Npc).ID].hasdall ? 1 : 0)) : (!this.Tab.allMonsters.pramh.Checked ? 1 : 0)) != 0 && ((Server.StaticCharacters[(character as Npc).ID].hasdarkerseal || Server.StaticCharacters[(character as Npc).ID].hasardcradh || (Server.StaticCharacters[(character as Npc).ID].hasdarkseal || Server.StaticCharacters[(character as Npc).ID].hasmorcradh) || (Server.StaticCharacters[(character as Npc).ID].hascradh || Server.StaticCharacters[(character as Npc).ID].hasbardo || Server.StaticCharacters[(character as Npc).ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked)) && ((Server.StaticCharacters[(character as Npc).ID].hasfas || this.IgnoreFas((character as Npc).Image)) && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked))
                                        {
                                            if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143))
                                            {
                                                if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                    this.CastSpell("fas spiorad", new uint?());
                                                else
                                                    this.CastSpell("mor pian na dion", new uint?());
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.CurrentTarget = character.ID;
                                                if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGroo((character as Npc).Image))
                                                    this.CastMedSpell("Groo", new uint?((character as Npc).ID));
                                                else if (this.Tab.allMonsters.attack1type.Text == "Keeter" && (character as Npc).Image == 634)
                                                {
                                                    if (this.HasSpell("mor pian na dion", false))
                                                        this.CastSpell("mor pian na dion", new uint?((character as Npc).ID));
                                                    else
                                                        this.CastSpell("pian na dion", new uint?((character as Npc).ID));
                                                }
                                                else
                                                    this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?((character as Npc).ID));
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                        }
                                        else if (this.cradhcount == 0 && this.Tab.allMonsters.pndbeforecurse.Checked)
                                        {
                                            foreach (Npc npc in R1)
                                            {
                                                if (npc != null)
                                                {
                                                    if (this.HasSpell("mor pian na dion", false))
                                                        this.CastSpell("mor pian na dion", new uint?(npc.ID));
                                                    else
                                                        this.CastSpell("pian na dion", new uint?(npc.ID));
                                                    if (!this.Tab.allMonsters.multi.Checked)
                                                    {
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (Npc c in R1)
                                        {
                                            if (c != null && this.Tab.allMonsters.attack1.Checked && (c != null && c.IsOnScreen && (c.Image != 668 && (long)this.Statistics.CurrentMP > (long)this.Tab.allMonsters.attackwith.ManaCost) && !this.HasInfiniteMR(c.Image) && (this.Tab.allMonsters.diondonly.Checked && (Server.StaticCharacters[c.ID].hasmonsterdion || Server.StaticCharacters[c.ID].hasdion) || !this.Tab.allMonsters.diondonly.Checked) && ((this.Tab.allMonsters.ctd.Checked && Server.StaticCharacters[c.ID].hasct || !this.Tab.allMonsters.ctd.Checked) && (this.Tab.allMonsters.fasedonly.Checked && (Server.StaticCharacters[c.ID].hasfas || this.IgnoreFas(c.Image)) || !this.Tab.allMonsters.fasedonly.Checked)) && (this.Tab.allMonsters.ardedonly.Checked && (Server.StaticCharacters[c.ID].hasbeagcradh || Server.StaticCharacters[c.ID].hasbardo || (Server.StaticCharacters[c.ID].hascradh || Server.StaticCharacters[c.ID].hasmorcradh) || (Server.StaticCharacters[c.ID].hasardcradh || Server.StaticCharacters[c.ID].hasdarkseal || Server.StaticCharacters[c.ID].hasdarkerseal)) || !this.Tab.allMonsters.ardedonly.Checked) && ((this.Tab.allMonsters.pramh.Checked ? (Server.StaticCharacters[c.ID].haspramh || Server.StaticCharacters[c.ID].haswff || Server.StaticCharacters[c.ID].hassuain ? 1 : (Server.StaticCharacters[c.ID].hasdall ? 1 : 0)) : (!this.Tab.allMonsters.pramh.Checked ? 1 : 0)) != 0 && ((Server.StaticCharacters[c.ID].hasdarkerseal || Server.StaticCharacters[c.ID].hasardcradh || (Server.StaticCharacters[c.ID].hasdarkseal || Server.StaticCharacters[c.ID].hasmorcradh) || (Server.StaticCharacters[c.ID].hascradh || Server.StaticCharacters[c.ID].hasbardo || Server.StaticCharacters[c.ID].hasbeagcradh)) && this.Tab.allMonsters.cradh.Checked || !this.Tab.allMonsters.cradh.Checked) && (((Server.StaticCharacters[c.ID].hasfas || this.IgnoreFas(c.Image)) && this.Tab.allMonsters.fas.Checked || !this.Tab.allMonsters.fas.Checked) && (this.Tab.allMonsters.attack1type.Text.Contains("pian na dion") || this.Tab.allMonsters.attack1type.Text == "mor strioch pian gar" || !Server.StaticCharacters[c.ID].hasmonsterdion && !Server.StaticCharacters[c.ID].hasdion))) && (this.MapInfo.Name.Contains("Chaos") ? (this.Tab.allMonsters.attack1type.Text.Contains("pian na dion") ? ((c.Image == 202 ? (Server.StaticCharacters[c.ID].hasdion ? 1 : 0) : (c.Image != 202 ? 1 : 0)) == 0 ? 0 : (c.Image == 210 || c.Image == 190 ? (Server.StaticCharacters[c.ID].HasSummoned ? 1 : 0) : (c.Image == 210 ? 0 : (c.Image != 190 ? 1 : 0)))) : (c != null ? 1 : 0)) : (c != null ? 1 : 0)) != 0 && (this.MapInfo.Name.Contains("Cthonic Remains") ? (!this.MonsterInWall(c) ? 1 : 0) : (c != null ? 1 : 0)) != 0))
                                            {
                                                bool flag = false;
                                                if ((!this.Tab.walktowards.Checked || c.DistanceFrom(this.ServerLocation) < 6) && !flag && (!(this.Tab.allMonsters.attackwith.Name == "mor strioch pian gar") || !Server.StaticCharacters[c.ID].hasmonsterdion && !Server.StaticCharacters[c.ID].hasdion))
                                                {
                                                    if (this.Tab.allMonsters.spellsilenced.Checked && this.SpellBar.Contains((ushort)143) && !this.Tab.allMonsters.attackwith.Name.Contains("pian na dion"))
                                                    {
                                                        if (this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                                            this.CastSpell("fas spiorad", new uint?());
                                                        else
                                                            this.CastSpell("mor pian na dion", new uint?());
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.CurrentTarget = c.ID;
                                                        if (this.Tab.allMonsters.attack1type.Text == "Keeter" && this.ForceGroo(c.Image))
                                                            this.CastMedSpell("Groo", new uint?(c.ID));
                                                        else if (this.Tab.allMonsters.attack1type.Text == "Keeter" && c.Image == 634)
                                                        {
                                                            if (this.HasSpell("mor pian na dion", false))
                                                                this.CastSpell("mor pian na dion", new uint?(c.ID));
                                                            else
                                                                this.CastSpell("pian na dion", new uint?(c.ID));
                                                        }
                                                        else
                                                            this.CastSpell(this.Tab.allMonsters.attackwith.Name, new uint?(c.ID));
                                                        if (!this.Tab.allMonsters.multi.Checked)
                                                        {
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                        else
                                                        {
                                                            this.Heal();
                                                            if (this.restartloop)
                                                            {
                                                                this.restartloop = false;
                                                                this.monsterloop = true;
                                                                goto label_860;
                                                            }
                                                            else
                                                            {
                                                                this.AiteFas();
                                                                if (this.restartloop)
                                                                {
                                                                    this.restartloop = false;
                                                                    this.monsterloop = true;
                                                                    goto label_860;
                                                                }
                                                                else
                                                                {
                                                                    this.BeagCradh();
                                                                    if (this.restartloop)
                                                                    {
                                                                        this.restartloop = false;
                                                                        this.monsterloop = true;
                                                                        goto label_860;
                                                                    }
                                                                    else
                                                                    {
                                                                        this.OtherSpells();
                                                                        if (this.restartloop)
                                                                        {
                                                                            this.restartloop = false;
                                                                            this.monsterloop = true;
                                                                            goto label_860;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                        goto label_860;
                }
                if (this.Tab.MonstersByPlayer != null)
                {
                    Npc[] npcArray = this.AllNearbyMonsters();
                    if (this.Tab.MonstersByPlayer.attack2.Checked && this.Tab.MonstersByPlayer.attack2type.Text.Equals("Cursed Tune") && DateTime.UtcNow.Subtract(this.cttime).TotalSeconds > 10.0)
                    {
                        foreach (Npc npc in npcArray)
                        {
                            if (this.Tab.MonstersByPlayer.attack2.Checked && !(this.Tab.MonstersByPlayer.attack2type.Text != "Cursed Tune") && !this.pause && DateTime.UtcNow.Subtract(this.cttime).TotalSeconds > 10.0)
                            {
                                if (npc != null && (int)npc.ID == (int)this.trackedmonsterID && (npc.IsOnScreen && !Server.StaticCharacters[npc.ID].hasct && (long)this.Statistics.CurrentMP > (long)this.Tab.MonstersByPlayer.secattackwith.ManaCost))
                                    this.CastSpell(this.Tab.MonstersByPlayer.secattackwith.Name, new uint?(npc.ID));
                            }
                            else
                                break;
                        }
                    }
                    if (this.Tab.MonstersByPlayer.attack1.Checked)
                    {
                        if (this.Tab.MonstersByPlayer.attack1type.Text == "mor strioch pian gar" && this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                        {
                            this.CastSpell("fas spiorad", new uint?());
                            this.monsterloop = true;
                            goto label_860;
                        }
                        else
                        {
                            foreach (Npc npc in npcArray)
                            {
                                if (this.Tab.MonstersByPlayer.attack1.Checked && !this.pause)
                                {
                                    if (npc != null && (int)npc.ID == (int)this.trackedmonsterID && (npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)this.Tab.MonstersByPlayer.attackwith.ManaCost))
                                    {
                                        this.CastSpell(this.Tab.MonstersByPlayer.attackwith.Name, new uint?(npc.ID));
                                        this.monsterloop = true;
                                        goto label_860;
                                    }
                                }
                                else
                                    break;
                            }
                        }
                    }
                }
                if (this.Tab.Monsters != null)
                {
                    foreach (TargetMonster targetMonster in this.targetmonster)
                    {
                        if (targetMonster != null)
                        {
                            Npc[] R2 = this.NearbyMonstersByImage(targetMonster.Text);
                            if (targetMonster.heal.Checked && targetMonster.healnum.Value > new Decimal(0))
                            {
                                foreach (Npc npc in R2)
                                {
                                    if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID].HpAmount <= (double)targetMonster.healnum.Value)
                                    {
                                        if (this.HasSpell("ard ioc", false))
                                            this.CastSpell("ard ioc", new uint?(npc.ID));
                                        else if (this.HasSpell("mor ioc", false))
                                            this.CastSpell("mor ioc", new uint?(npc.ID));
                                        else if (this.HasSpell("ioc", false))
                                            this.CastSpell("ioc", new uint?(npc.ID));
                                        this.Heal();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.AiteFas();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.BeagCradh();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.OtherSpells();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (targetMonster.aite.Checked)
                            {
                                foreach (Npc npc in R2)
                                {
                                    if (npc != null && npc.IsOnScreen && !Server.StaticCharacters[npc.ID].hasaite)
                                    {
                                        if (this.HasSpell("ard naomh aite", false))
                                            this.CastSpell("ard naomh aite", new uint?(npc.ID));
                                        else if (this.HasSpell("mor naomh aite", false))
                                            this.CastSpell("mor naomh aite", new uint?(npc.ID));
                                        else if (this.HasSpell("naomh aite", false))
                                            this.CastSpell("naomh aite", new uint?(npc.ID));
                                        this.Heal();
                                        if (this.restartloop)
                                        {
                                            this.restartloop = false;
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                        else
                                        {
                                            this.AiteFas();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.BeagCradh();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.OtherSpells();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (targetMonster.attack2.Checked && targetMonster.attack2type.Text == "Cursed Tune" && DateTime.UtcNow.Subtract(this.cttime).TotalSeconds > 10.0)
                            {
                                foreach (Npc npc in R2)
                                {
                                    if (targetMonster.attack2.Checked && !(targetMonster.attack2type.Text != "Cursed Tune") && (DateTime.UtcNow.Subtract(this.cttime).TotalSeconds > 10.0 && !this.pause))
                                    {
                                        if (npc != null && npc.IsOnScreen && !Server.StaticCharacters[npc.ID].hasct)
                                        {
                                            this.CastSpell(targetMonster.secattackwith.Name, new uint?(npc.ID));
                                            this.Heal();
                                            if (this.restartloop)
                                            {
                                                this.restartloop = false;
                                                this.monsterloop = true;
                                                goto label_860;
                                            }
                                            else
                                            {
                                                this.AiteFas();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.BeagCradh();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.OtherSpells();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                        break;
                                }
                            }
                            if ((targetMonster.cradh.Checked || targetMonster.fas.Checked) && targetMonster.fascursetargettype.Text == "Spell 1 only")
                            {
                                foreach (Npc npc in R2)
                                {
                                    if (targetMonster.cradh.Checked)
                                    {
                                        if (!this.pause)
                                        {
                                            if (npc != null && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)targetMonster.cursewith.ManaCost && (npc != null && !Server.StaticCharacters[npc.ID].hasdarkerseal && (!Server.StaticCharacters[npc.ID].hasdarkseal && !Server.StaticCharacters[npc.ID].hasardcradh) && ((!Server.StaticCharacters[npc.ID].hasmorcradh || !targetMonster.cradhtype.Text.Equals("mor cradh")) && (!Server.StaticCharacters[npc.ID].hascradh || !targetMonster.cradhtype.Text.Equals("cradh"))) && (!Server.StaticCharacters[npc.ID].hasbeagcradh || !targetMonster.cradhtype.Text.Equals("beag cradh")) && npc != null))
                                            {
                                                this.CastSpell(targetMonster.cursewith.Name, new uint?(npc.ID));
                                                break;
                                            }
                                        }
                                        else
                                            break;
                                    }
                                    if (targetMonster.fas.Checked && !this.pause)
                                    {
                                        if (npc != null && !Server.StaticCharacters[npc.ID].hasfas && npc.IsOnScreen && (long)this.Statistics.CurrentMP > (long)targetMonster.faswith.ManaCost)
                                        {
                                            this.CastSpell(targetMonster.faswith.Name, new uint?(npc.ID));
                                            break;
                                        }
                                    }
                                    else
                                        break;
                                }
                            }
                            if (targetMonster.pramh.Checked && !targetMonster.attackafterpramh.Checked)
                            {
                                foreach (Npc npc in R2)
                                {
                                    if (targetMonster.pramh.Checked && !this.pause)
                                    {
                                        if (npc != null)
                                        {
                                            if (!(targetMonster.fascursetargettype.Text == "Spell 1 only") || ((int)this.LastMonsterId != (int)npc.ID ? (this.LastMonsterId != 0U ? 1 : 0) : ((int)this.LastMonsterId != (int)npc.ID ? 1 : 0)) == 0)
                                            {
                                                if (targetMonster.cradh.Checked && this.CradhCount(R2) != R2.Length)
                                                {
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else if (targetMonster.fas.Checked && this.FasCount(R2) != R2.Length)
                                                {
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    if (targetMonster.pramhwith.Name.Contains("pramh") && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].haspramh ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                        this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                                    else if (targetMonster.pramhwith.Name == "suain" && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hassuain ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                        this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                                    else if (targetMonster.pramhwith.Name == "dall" && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hasdall ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                        this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                                    else if (targetMonster.pramhwith.Name == "Mesmerize" && ((!targetMonster.spampramh.Checked ? (!Server.StaticCharacters[npc.ID].hasmes ? 1 : 0) : 1) != 0 && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)Server.SpellList[targetMonster.pramhwith.Name].ManaCost)
                                                        this.CastSpell(targetMonster.pramhwith.Name, new uint?(npc.ID));
                                                    this.Heal();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.AiteFas();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                        else
                                                        {
                                                            this.BeagCradh();
                                                            if (this.restartloop)
                                                            {
                                                                this.restartloop = false;
                                                                this.monsterloop = true;
                                                                goto label_860;
                                                            }
                                                            else
                                                            {
                                                                this.OtherSpells();
                                                                if (this.restartloop)
                                                                {
                                                                    this.restartloop = false;
                                                                    this.monsterloop = true;
                                                                    goto label_860;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                                break;
                                        }
                                    }
                                    else
                                        break;
                                }
                            }
                            if (targetMonster.attack1.Checked)
                            {
                                if (targetMonster.attack1type.Text == "mor strioch pian gar" && this.Tab.fs.Checked && this.Statistics.CurrentMP < this.Statistics.MaximumMP / 2U)
                                {
                                    this.CastSpell("fas spiorad", new uint?());
                                    this.monsterloop = true;
                                    break;
                                }
                                if (targetMonster.attack1.Checked && targetMonster.attack1type.Text == "Frost + 3 Shocks")
                                {
                                    foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)R2).OrderBy<Npc, int>((Func<Npc, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
                                    {
                                        if (npc != null && npc.IsOnScreen && this.Statistics.CurrentMP > 4000U)
                                        {
                                            this.CastSpell(targetMonster.attackwith.Name, new uint?(npc.ID));
                                            Thread.Sleep(325);
                                            this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                            Thread.Sleep(325);
                                            this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                            Thread.Sleep(325);
                                            this.CastSpell("Shock Arrow", new uint?(npc.ID));
                                            Thread.Sleep(325);
                                            this.monsterloop = true;
                                            goto label_860;
                                        }
                                    }
                                }
                                foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)R2).OrderBy<Npc, int>((Func<Npc, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
                                {
                                    if (targetMonster.attack1.Checked)
                                    {
                                        if (!this.pause)
                                        {
                                            if (npc != null)
                                            {
                                                if ((targetMonster.diondonly.Checked && (Server.StaticCharacters[npc.ID].hasmonsterdion || Server.StaticCharacters[npc.ID].hasdion) || !targetMonster.diondonly.Checked) && ((targetMonster.ctd.Checked && Server.StaticCharacters[npc.ID].hasct || !targetMonster.ctd.Checked) && (targetMonster.fasedonly.Checked && Server.StaticCharacters[Server.StaticCharacters[npc.ID].ID].hasfas || !targetMonster.fasedonly.Checked)) && (targetMonster.ardedonly.Checked && (Server.StaticCharacters[npc.ID].hasbeagcradh || Server.StaticCharacters[npc.ID].hasbardo || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hasardcradh || Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasdarkerseal)) || !targetMonster.ardedonly.Checked) && ((Server.StaticCharacters[npc.ID].haspramh && targetMonster.pramh.Checked || !targetMonster.pramh.Checked) && ((Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasardcradh || (Server.StaticCharacters[npc.ID].hasdarkseal || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo || Server.StaticCharacters[npc.ID].hasbeagcradh)) && targetMonster.cradh.Checked || !targetMonster.cradh.Checked)) && ((Server.StaticCharacters[npc.ID].hasfas && targetMonster.fas.Checked || !targetMonster.fas.Checked) && npc.IsOnScreen) && (long)this.Statistics.CurrentMP > (long)targetMonster.attackwith.ManaCost)
                                                {
                                                    this.CastSpell(targetMonster.attackwith.Name, new uint?(npc.ID));
                                                    if (!targetMonster.multi.Checked)
                                                    {
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                }
                                                this.Heal();
                                                if (this.restartloop)
                                                {
                                                    this.restartloop = false;
                                                    this.monsterloop = true;
                                                    goto label_860;
                                                }
                                                else
                                                {
                                                    this.AiteFas();
                                                    if (this.restartloop)
                                                    {
                                                        this.restartloop = false;
                                                        this.monsterloop = true;
                                                        goto label_860;
                                                    }
                                                    else
                                                    {
                                                        this.BeagCradh();
                                                        if (this.restartloop)
                                                        {
                                                            this.restartloop = false;
                                                            this.monsterloop = true;
                                                            goto label_860;
                                                        }
                                                        else
                                                        {
                                                            this.OtherSpells();
                                                            if (this.restartloop)
                                                            {
                                                                this.restartloop = false;
                                                                this.monsterloop = true;
                                                                goto label_860;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            break;
                                    }
                                    else
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            label_860:
            Thread.Sleep(1);
        }

        public bool AttackGroup1()
        {
            return this.Tab.allMonsters.attackwith.Name.Equals("keeter 2", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 2", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 2", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 2", StringComparison.CurrentCultureIgnoreCase)) || (this.Tab.allMonsters.attackwith.Name.Equals("keeter 5", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 5", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 5", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 5", StringComparison.CurrentCultureIgnoreCase))) || (this.Tab.allMonsters.attackwith.Name.Equals("keeter 8", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 8", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 8", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 8", StringComparison.CurrentCultureIgnoreCase)) || (this.Tab.allMonsters.attackwith.Name.Equals("keeter 11", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 11", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 11", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("star arrow 10", StringComparison.CurrentCultureIgnoreCase)))) || (this.Tab.allMonsters.attackwith.Name.Equals("srad meall", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("sal meall", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("creag meall", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("athar meall", StringComparison.CurrentCultureIgnoreCase)));
        }

        public bool AttackGroup2()
        {
            return this.Tab.allMonsters.attackwith.Name.Equals("keeter 3", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 3", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 3", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 3", StringComparison.CurrentCultureIgnoreCase)) || (this.Tab.allMonsters.attackwith.Name.Equals("keeter 6", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 6", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 6", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 6", StringComparison.CurrentCultureIgnoreCase))) || (this.Tab.allMonsters.attackwith.Name.Equals("keeter 9", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("mermaid 9", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("torch 9", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 9", StringComparison.CurrentCultureIgnoreCase)) || (this.Tab.allMonsters.attackwith.Name.Equals("groo 12", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.StartsWith("star arrow 1", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.StartsWith("star arrow 2", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.StartsWith("star arrow 3", StringComparison.CurrentCultureIgnoreCase)))) || (this.Tab.allMonsters.attackwith.Name.StartsWith("star arrow 4", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.StartsWith("star arrow 5", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.StartsWith("star arrow 6", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 1", StringComparison.CurrentCultureIgnoreCase)) || (this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 2", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 3", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 4", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 5", StringComparison.CurrentCultureIgnoreCase))) || this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 6", StringComparison.CurrentCultureIgnoreCase));
        }

        public bool AttackGroup3()
        {
            return this.Tab.allMonsters.attackwith.Name.Equals("star arrow 7", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("star arrow 8", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("ard pian na dion", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("star arrow 9", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("star arrow 10", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.StartsWith("hail of feathers 7", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("hail of feathers 8", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("hail of feathers 10", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("hail of feathers 10", StringComparison.CurrentCultureIgnoreCase)) || this.Tab.allMonsters.attackwith.Name.Equals("groo 11", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 12", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 13", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("groo 14", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("keeter 12", StringComparison.CurrentCultureIgnoreCase) || (this.Tab.allMonsters.attackwith.Name.Equals("mermaid 12", StringComparison.CurrentCultureIgnoreCase) || this.Tab.allMonsters.attackwith.Name.Equals("torch 12", StringComparison.CurrentCultureIgnoreCase)));
        }

        public bool ForceGroo(int image)
        {
            return image == 661;
        }

        public bool ForceGrooSurrounding(Location loc, Npc[] R, int dist)
        {
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && npc.IsInMaxView(loc, dist) && npc.Image == 661)
                    return true;
            }
            return false;
        }

        public bool DontAttackSurrounding(Location loc, Npc[] R, int dist)
        {
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && npc.IsInMaxView(loc, dist) && npc.Image == 668)
                    return true;
            }
            return false;
        }

        public void SpeakAiteBoolean(object Sender, EventArgs e)
        {
            this.askaite = true;
            this.appendand = false;
            this.SpeakAiteTimer.Stop();
        }

        public void SpeakFasBoolean(object Sender, EventArgs e)
        {
            this.askfas = true;
            this.appendand = false;
            this.SpeakFasTimer.Stop();
        }

        public void SpeakFlowerBoolean(object Sender, EventArgs e)
        {
            this.askflower = true;
            this.appendand = false;
            this.SpeakFlowerTimer.Stop();
        }

        public void SpeakRedBoolean(object Sender, EventArgs e)
        {
            this.askred = true;
            this.appendand = false;
            this.SpeakRedTimer.Stop();
        }

        public void GetHandle()
        {
            Process[] processesByName = Process.GetProcessesByName("Darkages");
            if (processesByName.Length <= 0)
                return;
            foreach (Process process in processesByName)
            {
                if (process != null)
                {
                    this.stream = new ProcessMemoryStream(process.Id, ProcessAccess.VmOperation | ProcessAccess.VmRead | ProcessAccess.VmWrite);
                    this.stream.Position = this.nameadd;
                    byte[] numArray = new byte[this.Name.Length];
                    this.stream.Read(numArray, 0, this.Name.Length);
                    if (Encoding.ASCII.GetString(numArray) == this.Name)
                    {
                        this.mainProc = process;
                        Rect rectangle = new Rect();
                        if (!User32.GetWindowRect(this.mainProc.MainWindowHandle, out rectangle))
                            break;
                        this.windowSize = rectangle.Width <= 1200 ? (byte)1 : (byte)2;
                        break;
                    }
                }
            }
        }

        public void ClientLoop()
        {
            this.Connected = true;
            object syncObj;
            while (this.Connected)
            {
                bool lockTaken = false;
                try
                {
                    Monitor.Enter(syncObj = Program.SyncObj, ref lockTaken);
                    try
                    {
                        this.ClientReceive();
                        this.ClientProcess();
                        this.ClientDequeue();
                        this.ServerReceive();
                        this.ServerProcess();
                        this.ServerDequeue();
                    }
                    catch
                    {
                        this.Connected = false;
                    }
                }
                finally
                {
                    if (lockTaken)
                        Monitor.Exit(Program.SyncObj);
                }
                Thread.Sleep(1);
            }
            bool lockTaken1 = false;
            try
            {
                Monitor.Enter(syncObj = Program.SyncObj, ref lockTaken1);
                try
                {
                    this.BotThread.Abort();
                    this.SpeakCommandThread.Abort();
                    this.EntityNameThread.Abort();
                    this.WalkThread.Abort();
                    this.QuestsThread.Abort();
                    if (this.IsSkulled)
                    {
                        SkullData skullData = new SkullData();
                        skullData.Name = this.Name;
                        skullData.Map = this.MapInfo.Name;
                        skullData.XY = this.ServerLocation.X.ToString() + "," + (object)this.ServerLocation.Y;
                        if (!Server.SkullList.ContainsKey(this.Name))
                            Server.SkullList.Add(this.Name, skullData);
                        else
                            Server.SkullList[this.Name] = skullData;
                        this.Server.SaveSkullList();
                    }
                    this.Loaded = false;
                    if (this.LoggedOn && !this.manuallog && !this.RelogThread.IsAlive)
                    {
                        Relog relog = new Relog();
                        relog.Name = this.Name;
                        relog.Process = this.mainProc;
                        relog.WaitForOk = true;
                        relog.Redirected = this.Redirected;
                        relog.ServerReset = false;
                        if (this.serverreset)
                            relog.ServerReset = true;
                        if (!Server.Relog.ContainsKey(this.Name))
                            Server.Relog.Add(this.Name, relog);
                        else
                            Server.Relog[this.Name] = relog;
                        this.Tab.SaveTemplate("", true);
                        if (Program.MainForm.relog.Checked && !relog.Redirected)
                        {
                            this.RelogThread = new Thread(new ThreadStart(this.LogAfterDC));
                            this.RelogThread.Start();
                        }
                    }
                    this.LoggedOn = false;
                    if (this.safemode)
                    {
                        this.safemode = false;
                        User32.Show();
                    }
                    this.Tab.ExternalChat.Dispose();
                    this.Tab.SpellPriority.Dispose();
                    this.Tab.Wayregion.Dispose();
                    this.Tab.AscendOptions.Dispose();
                    this.Tab.ComboOptions.Dispose();
                    this.Tab.MacroOptions.Dispose();
                    this.Tab.HideTrinketOptions.Dispose();
                    this.Tab.ArenaCounter.Dispose();
                    this.Tab.SkillSwap.Dispose();
                    this.Tab.LegendMarks.Dispose();
                    this.Tab.calctimer.Stop();
                    if (this.Name != null && Server.Alts.ContainsKey(this.Name.ToLower()))
                        Server.Alts.Remove(this.Name.ToLower());
                    foreach (Client client in Server.Alts.Values.ToArray<Client>())
                    {
                        if (client != null && client.targetplayer != null)
                        {
                            foreach (targetPlayer targetPlayer in client.targetplayer)
                                targetPlayer?.updatePlayerTargets();
                        }
                    }
                    Program.MainForm.RemoveTab(this.Tab);
                    Server.Clients.Remove(this);
                    if (this.ClientSocket.Connected)
                        this.ClientSocket.Close();
                    if (!this.ServerSocket.Connected)
                        return;
                    this.ServerSocket.Close();
                }
                catch (Exception ex)
                {
                    int num = (int)MessageBox.Show(ex.GetBaseException().ToString());
                }
            }
            finally
            {
                if (lockTaken1)
                    Monitor.Exit(Program.SyncObj);
            }
        }

        public void ClientReceive()
        {
            if (!this.Connected || this.clientReceiving)
                return;
            this.clientReceiving = true;
            this.ClientSocket.BeginReceive(this.clientBuffer, 0, this.clientBuffer.Length, SocketFlags.None, new AsyncCallback(Client.ClientEndReceive), (object)this);
        }

        public void ServerReceive()
        {
            if (!this.Connected || this.serverReceiving)
                return;
            this.serverReceiving = true;
            this.ServerSocket.BeginReceive(this.serverBuffer, 0, this.serverBuffer.Length, SocketFlags.None, new AsyncCallback(Client.ServerEndReceive), (object)this);
        }

        public void ClientProcess()
        {
            lock (Program.SyncObj)
            {
                while (this.clientProcessQueue.Count > 0)
                {
                    ClientPacket msg = this.clientProcessQueue.Dequeue();
                    if (this.Server.ClientMessageHandlers[(int)msg.Opcode](this, msg))
                    {
                        this.Enqueue(msg);
                        if (msg.Opcode != (byte)69)
                            this.Tab.LogOutgoingPacket("Send> {0}", (object)msg);
                    }
                }
            }
        }

        public void ServerProcess()
        {
            lock (Program.SyncObj)
            {
                while (this.serverProcessQueue.Count > 0)
                {
                    ServerPacket msg = this.serverProcessQueue.Dequeue();
                    if (this.Server.ServerMessageHandlers[(int)msg.Opcode](this, msg))
                    {
                        this.Enqueue(msg);
                        this.Tab.LogIncomingPacket("Recv> {0}", (object)msg);
                    }
                }
            }
        }

        public void ClientDequeue()
        {
            lock (Program.SyncObj)
            {
                while (this.clientSendQueue.Count > 0)
                {
                    ServerPacket serverPacket = this.clientSendQueue.Dequeue();
                    if (serverPacket.ShouldEncrypt)
                    {
                        serverPacket.Ordinal = this.clientOrdinal++;
                        serverPacket.Encrypt(this);
                    }
                    serverPacket.Length = (ushort)(serverPacket.BodyData.Length + (serverPacket.Header.Length - 3));
                    byte[] buffer = new byte[serverPacket.Header.Length + serverPacket.BodyData.Length];
                    Array.Copy((Array)serverPacket.Header, 0, (Array)buffer, 0, serverPacket.Header.Length);
                    Array.Copy((Array)serverPacket.BodyData, 0, (Array)buffer, serverPacket.Header.Length, serverPacket.BodyData.Length);
                    this.ClientSocket.BeginSend(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(Client.ClientEndSend), (object)this);
                }
            }
        }

        public void ServerDequeue()
        {
            lock (Program.SyncObj)
            {
                while (this.serverSendQueue.Count > 0)
                {
                    ClientPacket clientPacket = this.serverSendQueue.Dequeue();
                    if (clientPacket.Opcode == (byte)57 || clientPacket.Opcode == (byte)58)
                        clientPacket.EncryptDialog();
                    if (clientPacket.ShouldEncrypt)
                    {
                        clientPacket.Ordinal = this.serverOrdinal++;
                        clientPacket.Encrypt(this);
                    }
                    clientPacket.Length = (ushort)(clientPacket.BodyData.Length + (clientPacket.Header.Length - 3));
                    byte[] buffer = new byte[clientPacket.Header.Length + clientPacket.BodyData.Length];
                    Array.Copy((Array)clientPacket.Header, 0, (Array)buffer, 0, clientPacket.Header.Length);
                    Array.Copy((Array)clientPacket.BodyData, 0, (Array)buffer, clientPacket.Header.Length, clientPacket.BodyData.Length);
                    this.ServerSocket.BeginSend(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(Client.ServerEndSend), (object)this);
                }
            }
        }

        public void Enqueue(ClientPacket msg)
        {
            if (Thread.CurrentThread.ManagedThreadId == Program.MainForm.ThreadID)
            {
                ThreadPool.QueueUserWorkItem((WaitCallback)(o => this.Enqueue(msg)));
            }
            else
            {
                lock (Program.SyncObj)
                    this.serverSendQueue.Enqueue(msg);
            }
        }

        public void Enqueue(ServerPacket msg)
        {
            if (Thread.CurrentThread.ManagedThreadId == Program.MainForm.ThreadID)
            {
                ThreadPool.QueueUserWorkItem((WaitCallback)(o => this.Enqueue(msg)));
            }
            else
            {
                lock (Program.SyncObj)
                    this.clientSendQueue.Enqueue(msg);
            }
        }

        private static void ClientEndSend(IAsyncResult ar)
        {
            Client asyncState = (Client)ar.AsyncState;
            try
            {
                asyncState.ClientSocket.EndSend(ar);
            }
            catch
            {
                asyncState.Connected = false;
            }
        }

        private static void ServerEndSend(IAsyncResult ar)
        {
            Client asyncState = (Client)ar.AsyncState;
            try
            {
                asyncState.ServerSocket.EndSend(ar);
            }
            catch
            {
                asyncState.Connected = false;
            }
        }

        private static void ClientEndReceive(IAsyncResult ar)
        {
            Client asyncState = (Client)ar.AsyncState;
            try
            {
                int num = asyncState.ClientSocket.EndReceive(ar);
                for (int index = 0; index < num; ++index)
                    asyncState.fullClientBuffer.Add(asyncState.clientBuffer[index]);
                if (num == 0 || asyncState.fullClientBuffer[0] != (byte)170)
                {
                    asyncState.Connected = false;
                }
                else
                {
                    while (asyncState.fullClientBuffer.Count > 3)
                    {
                        int count = ((int)asyncState.fullClientBuffer[1] << 8) + (int)asyncState.fullClientBuffer[2] + 3;
                        if (count <= asyncState.fullClientBuffer.Count)
                        {
                            List<byte> range = asyncState.fullClientBuffer.GetRange(0, count);
                            asyncState.fullClientBuffer.RemoveRange(0, count);
                            ClientPacket clientPacket = new ClientPacket(range.ToArray());
                            if (clientPacket.ShouldEncrypt)
                                clientPacket.Decrypt(asyncState);
                            if (clientPacket.Opcode == (byte)57 || clientPacket.Opcode == (byte)58)
                                clientPacket.DecryptDialog();
                            lock (Program.SyncObj)
                                asyncState.clientProcessQueue.Enqueue(clientPacket);
                        }
                        else
                            break;
                    }
                    asyncState.clientReceiving = false;
                }
            }
            catch
            {
                asyncState.Connected = false;
            }
        }

        private static void ServerEndReceive(IAsyncResult ar)
        {
            Client asyncState = (Client)ar.AsyncState;
            try
            {
                int num = asyncState.ServerSocket.EndReceive(ar);
                for (int index = 0; index < num; ++index)
                    asyncState.fullServerBuffer.Add(asyncState.serverBuffer[index]);
                if (num == 0 || asyncState.fullServerBuffer[0] != (byte)170)
                {
                    asyncState.Connected = false;
                }
                else
                {
                    while (asyncState.fullServerBuffer.Count > 3)
                    {
                        int count = ((int)asyncState.fullServerBuffer[1] << 8) + (int)asyncState.fullServerBuffer[2] + 3;
                        if (count <= asyncState.fullServerBuffer.Count)
                        {
                            List<byte> range = asyncState.fullServerBuffer.GetRange(0, count);
                            asyncState.fullServerBuffer.RemoveRange(0, count);
                            ServerPacket serverPacket = new ServerPacket(range.ToArray());
                            if (serverPacket.ShouldEncrypt)
                                serverPacket.Decrypt(asyncState);
                            lock (Program.SyncObj)
                                asyncState.serverProcessQueue.Enqueue(serverPacket);
                        }
                        else
                            break;
                    }
                    asyncState.serverReceiving = false;
                }
            }
            catch
            {
                asyncState.Connected = false;
            }
        }

        public byte[] GenerateKey(ushort bRand, byte sRand)
        {
            byte[] numArray = new byte[9];
            for (int index = 0; index < 9; ++index)
                numArray[index] = this.KeyTable[(index * (9 * index + (int)sRand * (int)sRand) + (int)bRand) % 1024];
            return numArray;
        }

        private void UseAegisOkay(object sender, EventArgs e)
        {
            this.AegisTimer.Stop();
            this.useaegis = true;
        }

        private void ComboScrollMessage(object sender, EventArgs e)
        {
            this.ComboScrollTimer.Stop();
            this.comboscrollused = false;
        }

        public void Test()
        {
            ClientPacket msg = new ClientPacket((byte)10);
            msg.WriteUInt16((ushort)4);
            msg.WriteUInt16((ushort)6);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void DistanceLook(ushort x, ushort y)
        {
            ClientPacket msg = new ClientPacket((byte)10);
            msg.WriteUInt16(x);
            msg.WriteUInt16(y);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void Speak(string message, int value = 0)
        {
            this.MySpeakMessage = message;
            this.MySpeakMessageFunc();
            if (this.MySpeakMessage.StartsWith("/"))
                return;
            ClientPacket msg = new ClientPacket((byte)14);
            msg.WriteByte((byte)value);
            msg.WriteString8(this.MySpeakMessage);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void Whisper(string name, string message)
        {
            ClientPacket msg = new ClientPacket((byte)25);
            msg.WriteString8(name);
            msg.WriteString8(message);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void CheckMail(ushort? num)
        {
            if (num.HasValue)
            {
                ClientPacket msg = new ClientPacket((byte)59);
                msg.WriteByte((byte)3);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
                msg.WriteUInt16(num.Value);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
                msg.WriteByte(msg.Opcode);
                msg.Write(new byte[7]);
                this.Enqueue(msg);
            }
            else
            {
                ClientPacket msg = new ClientPacket((byte)59);
                msg.WriteByte((byte)2);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)127);
                msg.WriteByte(byte.MaxValue);
                msg.WriteByte((byte)240);
                msg.WriteByte((byte)0);
                msg.WriteByte(msg.Opcode);
                msg.Write(new byte[7]);
                this.Enqueue(msg);
            }
        }

        public void SendMail(string sendto, string sendtitle, string sendcontent)
        {
            ClientPacket msg = new ClientPacket((byte)59);
            msg.WriteByte((byte)6);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)0);
            msg.WriteString8(sendto);
            msg.WriteString8(sendtitle);
            msg.WriteByte((byte)0);
            msg.WriteString8(sendcontent);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void Walk(Direction direction)
        {
            ClientPacket msg1 = new ClientPacket((byte)6);
            msg1.WriteByte((byte)direction);
            msg1.WriteByte(this.WalkCounter++);
            msg1.WriteByte((byte)0);
            msg1.WriteByte(msg1.Opcode);
            msg1.Write(new byte[7]);
            ServerPacket msg2 = new ServerPacket((byte)12);
            msg2.WriteUInt32(this.PlayerID);
            msg2.WriteUInt16((ushort)this.ClientLocation.X);
            msg2.WriteUInt16((ushort)this.ClientLocation.Y);
            msg2.WriteByte((byte)direction);
            msg2.WriteByte((byte)0);
            msg2.Write(new byte[7]);
            this.Enqueue(msg1);
            this.Enqueue(msg2);
            switch (direction)
            {
                case Direction.North:
                    --this.ClientLocation.Y;
                    break;
                case Direction.East:
                    ++this.ClientLocation.X;
                    break;
                case Direction.South:
                    ++this.ClientLocation.Y;
                    break;
                case Direction.West:
                    --this.ClientLocation.X;
                    break;
            }
        }

        public void Turn(Direction direction)
        {
            ClientPacket msg = new ClientPacket((byte)17);
            msg.WriteByte((byte)direction);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void SwitchSlots(byte pane, int start, int end)
        {
            ClientPacket msg = new ClientPacket((byte)48);
            msg.WriteByte(pane);
            msg.WriteByte((byte)start);
            msg.WriteByte((byte)end);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            if (pane != (byte)0 || !this.Tab.recorditemdata.Checked)
                return;
            foreach (Character character in this.Characters.Values.ToArray<Character>())
            {
                if (character != null)
                {
                    if (character.InventorySlot == start)
                        character.InventorySlot = end;
                    else if (character.InventorySlot == end)
                        character.InventorySlot = start;
                }
            }
        }

        public void UnequipSlot(byte slot)
        {
            ClientPacket msg = new ClientPacket((byte)68);
            msg.WriteByte(slot);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void UseItem(int itemSlot)
        {
            ClientPacket msg = new ClientPacket((byte)28);
            msg.WriteByte((byte)itemSlot);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void Pickup(int x, int y)
        {
            int num = int.MinValue;
            for (int index = 0; index < this.Inventory.Length; ++index)
            {
                if (this.Inventory[index] == null)
                {
                    num = index + 1;
                    break;
                }
            }
            if (num == int.MinValue)
                return;
            ClientPacket msg = new ClientPacket((byte)7);
            msg.WriteByte((byte)num);
            msg.WriteUInt16((ushort)x);
            msg.WriteUInt16((ushort)y);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            Thread.Sleep(200);
        }

        public void DropInMonster(uint id, int itemSlot, int amount)
        {
            ClientPacket msg = new ClientPacket((byte)41);
            msg.WriteByte((byte)itemSlot);
            msg.WriteUInt32(id);
            msg.WriteUInt32((uint)amount);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void Drop(int x, int y, int itemSlot, int amount)
        {
            ClientPacket msg = new ClientPacket((byte)8);
            msg.WriteByte((byte)itemSlot);
            msg.WriteUInt16((ushort)x);
            msg.WriteUInt16((ushort)y);
            msg.WriteUInt32((uint)amount);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void DropGold(int x, int y, uint amount)
        {
            ClientPacket msg = new ClientPacket((byte)36);
            msg.WriteUInt32(amount);
            msg.WriteUInt16((ushort)x);
            msg.WriteUInt16((ushort)y);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void Assail()
        {
            if (!this.canskill || !this.skillmap || DateTime.UtcNow.Subtract(this.assaildelay).Milliseconds < 325)
                return;
            ClientPacket msg = new ClientPacket((byte)19);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.assaildelay = DateTime.UtcNow;
        }

        public void UseSkill(int skillSlot)
        {
            ClientPacket msg = new ClientPacket((byte)62);
            msg.WriteByte((byte)skillSlot);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            if (this.pause || !this.Tab.vselfhide || !this.spellmap || !this.cancast)
                return;
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skill.SkillSlot == skillSlot && (!skill.Name.StartsWith("Mend") && skill.Name != "Lucky Hand") && skill.Name != "Tailoring")
                {
                    this.hidetime = DateTime.UtcNow;
                    this.MacroCast("Hide", new uint?());
                    this.MacroCast("White Bat Stance", new uint?());
                    break;
                }
            }
        }

        public void SkillSpellCaption(string text)
        {
            ClientPacket msg = new ClientPacket((byte)78);
            msg.WriteString8(text);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void CastSpell(int spellSlot, uint? target)
        {
            ClientPacket msg = new ClientPacket((byte)15);
            msg.WriteByte((byte)spellSlot);
            if (target.HasValue)
            {
                if (!this.Characters.ContainsKey(target.Value) || this.Characters[target.Value] == null || !this.Characters[target.Value].IsOnScreen)
                    return;
                msg.WriteUInt32(target.Value);
                msg.WriteUInt16((ushort)this.Characters[target.Value].Location.X);
                msg.WriteUInt16((ushort)this.Characters[target.Value].Location.Y);
            }
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void StartCast(int lines)
        {
            ClientPacket msg = new ClientPacket((byte)77);
            msg.WriteByte((byte)lines);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void closepopupvars()
        {
            this.anttunnels = 0;
            this.guardiananttunnels = 0;
            this.popup = false;
            this.cancast = true;
            this.canskill = true;
            this.donotwalk = false;
            this.pionome = false;
            this.niomope = false;
            this.deoch = false;
            this.gramail = false;
            this.brody = false;
            this.habab = false;
            this.nairn = false;
            this.banker = false;
            this.templeassistant = false;
            this.CurrentnpcpopupID = 0U;
            this.Currentnpcname = string.Empty;
            this.Currentnpctext = string.Empty;
        }

        public void DialogueRespond(uint npccode, ushort script)
        {
            if (this.eventScriptOffset)
            {
                if (script > (ushort)byte.MaxValue)
                    ++script;
                if (script > (ushort)510)
                    script += (ushort)3;
            }
            script += (ushort)1024;
            ClientPacket msg = new ClientPacket((byte)57);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteByte((byte)1);
            msg.WriteUInt32(npccode);
            msg.WriteUInt16(script);
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpcname = string.Empty;
            this.Currentnpctext = string.Empty;
        }

        public void DialogueRespond(uint? npccode, string type)
        {
            if (!npccode.HasValue)
                return;
            string s = string.Empty;
            string str1 = string.Empty;
            byte num1 = 0;
            byte num2 = 0;
            string empty1 = string.Empty;
            string empty2 = string.Empty;
            byte num3;
            byte num4;
            if (type == "Default")
            {
                num3 = (byte)0;
                num4 = (byte)55;
            }
            else if (type == "Learn Secret")
            {
                num3 = (byte)0;
                num4 = (byte)5;
            }
            else if (type == "Forget Secret")
            {
                num3 = (byte)0;
                num4 = (byte)7;
            }
            else if (type == "Forget Skill")
            {
                num3 = (byte)0;
                num4 = (byte)12;
            }
            else if (type == "Buy")
            {
                num3 = (byte)0;
                num4 = (byte)64;
            }
            else if (type.StartsWith("Buy ") && type.Contains(" [") && type.EndsWith("]"))
            {
                string str2 = type.Remove(0, type.IndexOf(' ') + 1);
                s = str2.Remove(str2.IndexOf(" ["));
                string str3 = type.Remove(0, type.IndexOf("[") + 1);
                str1 = str3.Remove(str3.IndexOf("]"), 1);
                num3 = (byte)0;
                num4 = (byte)76;
            }
            else if (type.StartsWith("Buy "))
            {
                s = type.Remove(0, 4);
                if (s != string.Empty)
                {
                    num3 = (byte)0;
                    num4 = (byte)74;
                }
                else
                {
                    num3 = (byte)0;
                    num4 = (byte)64;
                }
            }
            else if (type == "Fix All")
            {
                num3 = (byte)0;
                num4 = (byte)92;
            }
            else if (type == "Sell")
            {
                num3 = (byte)0;
                num4 = (byte)65;
            }
            else if (type == "Withdraw")
            {
                num3 = (byte)0;
                num4 = (byte)69;
            }
            else if (type.Contains("Withdraw ") && type.Contains(" [") && type.EndsWith("]"))
            {
                string str2 = type.Remove(0, type.IndexOf(' ') + 1);
                s = str2.Remove(str2.IndexOf(" ["));
                string str3 = type.Remove(0, type.IndexOf("[") + 1);
                str1 = str3.Remove(str3.IndexOf("]"), 1);
                num3 = (byte)0;
                num4 = (byte)87;
            }
            else if (type.Contains("Withdraw "))
            {
                s = type.Remove(0, type.IndexOf(' ') + 1);
                num3 = (byte)0;
                num4 = (byte)86;
            }
            else if (type == "Deposit")
            {
                num3 = (byte)0;
                num4 = (byte)67;
            }
            else if (type.StartsWith("Deposit ") && type.Contains(" [") && type.EndsWith("]"))
            {
                string str2 = type.Remove(0, type.IndexOf(' ') + 1);
                s = str2.Remove(str2.IndexOf(" ["));
                string str3 = type.Remove(0, type.IndexOf("[") + 1);
                str1 = str3.Remove(str3.IndexOf("]"), 1);
                num3 = (byte)0;
                num4 = (byte)84;
                num1 = (byte)1;
            }
            else if (type.StartsWith("Deposit gold "))
            {
                s = type.Remove(0, type.LastIndexOf(' ') + 1);
                num3 = (byte)0;
                num4 = (byte)82;
            }
            else if (type.StartsWith("Deposit "))
            {
                s = type.Remove(0, type.IndexOf(' ') + 1);
                num3 = (byte)0;
                num4 = (byte)83;
                num2 = (byte)1;
            }
            else if (type == "Send Parcel")
            {
                num3 = (byte)0;
                num4 = (byte)96;
            }
            else if (type.StartsWith("Send Parcel "))
            {
                string[] strArray = type.Split(' ');
                if (((IEnumerable<string>)strArray).Count<string>() < 3)
                    return;
                empty1 = strArray[2];
                empty2 = this.ItemSlot(type.Substring(type.IndexOf(strArray[3]))).ToString();
                if (empty2 == "0")
                    return;
                num3 = (byte)0;
                num4 = (byte)99;
            }
            else if (type == "Receive Parcel")
            {
                num3 = (byte)0;
                num4 = (byte)100;
            }
            else if (type == "Jay")
            {
                num3 = (byte)11;
                num4 = (byte)105;
            }
            else if (type == "MotherErbie")
            {
                num3 = (byte)11;
                num4 = (byte)0;
            }
            else if (type == "ColiseumTir")
            {
                num3 = (byte)7;
                num4 = (byte)87;
            }
            else if (type == "Braz")
            {
                num3 = (byte)4;
                num4 = (byte)231;
            }
            else if (type == "Male Tailoring")
            {
                num3 = (byte)5;
                num4 = (byte)63;
            }
            else if (type == "Labor")
            {
                num3 = (byte)5;
                num4 = (byte)55;
            }
            else
            {
                if (!(type == "Master Stats"))
                    return;
                num3 = (byte)6;
                num4 = (byte)156;
            }
            ClientPacket msg = new ClientPacket((byte)57);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteByte((byte)1);
            msg.WriteUInt32(npccode.Value);
            msg.WriteByte(num3);
            msg.WriteByte(num4);
            if (num2 != (byte)0)
                msg.WriteByte(byte.Parse(s));
            else if (num1 != (byte)0)
            {
                msg.WriteByte((byte)1);
                msg.WriteByte(byte.Parse(s));
            }
            else if (s != string.Empty)
                msg.WriteString8(s);
            if (str1 != string.Empty)
                msg.WriteString8(str1);
            if (empty1 != string.Empty)
            {
                msg.WriteByte((byte)2);
                msg.WriteByte(byte.Parse(empty2));
                msg.WriteByte((byte)49);
                msg.WriteString8(empty1);
            }
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpcname = string.Empty;
            this.Currentnpctext = string.Empty;
        }

        public void PopupRespond(uint? npccode, ushort script, byte un, byte action, byte trigger = 1)
        {
            if (!npccode.HasValue)
                return;
            if ((int)script == (int)Server.Dialogs["Glioca Prayer"])
                script = this.prayscript;
            if ((int)script == (int)Server.Dialogs["Ancusa"])
                script = this.herbscript;
            if (this.eventScriptOffset)
            {
                if (script > (ushort)byte.MaxValue)
                    ++script;
                if (script > (ushort)510)
                    script += (ushort)3;
            }
            ClientPacket msg = new ClientPacket((byte)58);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteByte(trigger);
            msg.WriteUInt32(npccode.Value);
            msg.WriteUInt16(script);
            msg.WriteByte(un);
            msg.WriteByte(action);
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpctext = string.Empty;
            this.Currentnpcname = string.Empty;
        }

        public void PopupRespond(
          uint? npccode,
          ushort script,
          byte un,
          byte action,
          byte type,
          byte option,
          byte trigger = 1)
        {
            if (!npccode.HasValue)
                return;
            if ((int)script == (int)Server.Dialogs["Glioca Prayer"])
                script = this.prayscript;
            if ((int)script == (int)Server.Dialogs["Ancusa"])
                script = this.herbscript;
            if (this.eventScriptOffset)
            {
                if (script > (ushort)byte.MaxValue)
                    ++script;
                if (script > (ushort)510)
                    script += (ushort)3;
            }
            ClientPacket msg = new ClientPacket((byte)58);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteByte(trigger);
            msg.WriteUInt32(npccode.Value);
            msg.WriteUInt16(script);
            msg.WriteByte(un);
            msg.WriteByte(action);
            msg.WriteByte(type);
            msg.WriteByte(option);
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpctext = string.Empty;
            this.Currentnpcname = string.Empty;
        }

        public void PopupRespond(
          uint? npccode,
          ushort script,
          byte un,
          byte action,
          byte type,
          string text,
          byte trigger = 1)
        {
            if (!npccode.HasValue)
                return;
            if ((int)script == (int)Server.Dialogs["Glioca Prayer"])
                script = this.prayscript;
            if ((int)script == (int)Server.Dialogs["Ancusa"])
                script = this.herbscript;
            if (this.eventScriptOffset)
            {
                if (script > (ushort)byte.MaxValue)
                    ++script;
                if (script > (ushort)510)
                    script += (ushort)3;
            }
            ClientPacket msg = new ClientPacket((byte)58);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteInt16(short.MinValue);
            msg.WriteByte(trigger);
            msg.WriteUInt32(npccode.Value);
            msg.WriteUInt16(script);
            msg.WriteByte(un);
            msg.WriteByte(action);
            msg.WriteByte(type);
            msg.WriteString8(text);
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpctext = string.Empty;
            this.Currentnpcname = string.Empty;
        }

        public void PopupNext(uint? npccode, byte trigger = 1)
        {
            if (!npccode.HasValue)
                return;
            ClientPacket msg = new ClientPacket((byte)58);
            msg.WriteInt16(short.MinValue);
            msg.WriteUInt16((ushort)0);
            msg.WriteUInt16((ushort)0);
            msg.WriteByte(trigger);
            msg.WriteUInt32(npccode.Value);
            msg.WriteInt16((short)0);
            msg.WriteInt16((short)2);
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpctext = string.Empty;
            this.Currentnpcname = string.Empty;
        }

        public void PopupClose(uint? npccode, byte trigger = 1)
        {
            if (!npccode.HasValue)
                return;
            ClientPacket msg = new ClientPacket((byte)58);
            msg.WriteInt16(short.MinValue);
            msg.WriteUInt16((ushort)0);
            msg.WriteUInt16((ushort)0);
            msg.WriteByte(trigger);
            msg.WriteUInt32(npccode.Value);
            msg.WriteInt16((short)0);
            msg.WriteInt16((short)1);
            msg.GenerateDialogHeader();
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
            this.Currentnpctext = string.Empty;
            this.Currentnpcname = string.Empty;
        }

        public void OpenF1Menu()
        {
            ClientPacket msg = new ClientPacket((byte)67);
            msg.WriteByte((byte)1);
            msg.WriteByte(byte.MaxValue);
            msg.WriteByte(byte.MaxValue);
            msg.WriteByte(byte.MaxValue);
            msg.WriteByte(byte.MaxValue);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)4);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void ClickEntity(uint id)
        {
            ClientPacket msg = new ClientPacket((byte)67);
            msg.WriteByte((byte)1);
            msg.WriteUInt32(id);
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void ClickNpc(uint id)
        {
            do
            {
                ClientPacket msg1 = new ClientPacket((byte)67);
                msg1.WriteByte((byte)3);
                msg1.WriteUInt32(id);
                msg1.WriteByte((byte)0);
                msg1.Write(new byte[7]);
                this.Enqueue(msg1);
                ClientPacket msg2 = new ClientPacket((byte)67);
                msg2.WriteByte((byte)1);
                msg2.WriteUInt32(id);
                msg2.WriteByte((byte)0);
                msg2.Write(new byte[7]);
                this.Enqueue(msg2);
                Thread.Sleep(350);
            }
            while (this.CurrentnpcpopupID == 0U);
        }

        public void ForceGroup(string name, byte type)
        {
            ClientPacket msg = new ClientPacket((byte)46);
            msg.WriteByte(type);
            msg.WriteString8(name);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void RequestGroupList()
        {
            ClientPacket msg = new ClientPacket((byte)45);
            msg.WriteByte((byte)0);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void OpenCountryList()
        {
            this.manualopencountrylist = true;
            ClientPacket msg = new ClientPacket((byte)24);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void SelectTown(string town)
        {
            if (!this.mapresponse || !this.Towns.ContainsKey(town))
                return;
            this.mapresponse = false;
            this.SelectTown(this.Towns[town].Number, this.Towns[town].DestX, this.Towns[town].DestY);
        }

        public void SelectTown(uint map, ushort X, ushort Y)
        {
            ClientPacket msg = new ClientPacket((byte)63);
            msg.WriteUInt32(map);
            msg.WriteUInt16(X);
            msg.WriteUInt16(Y);
            msg.WriteByte((byte)0);
            msg.WriteByte(msg.Opcode);
            msg.Write(new byte[7]);
            this.Enqueue(msg);
        }

        public void CreateItem(byte slot, int icon, string name, byte color = 0)
        {
            ServerPacket msg = new ServerPacket((byte)15);
            msg.WriteByte(slot);
            msg.WriteUInt16((ushort)icon);
            msg.WriteByte(color);
            msg.WriteString8(name);
            msg.WriteUInt32(1U);
            msg.WriteByte((byte)0);
            msg.WriteUInt32(0U);
            msg.WriteUInt32(0U);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakeCoolDown(byte pane, byte slot, uint length)
        {
            ServerPacket msg = new ServerPacket((byte)63);
            msg.WriteByte(pane);
            msg.WriteByte(slot);
            msg.WriteUInt32(length);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void CreateSkill(byte slot, int icon, string name)
        {
            ServerPacket msg = new ServerPacket((byte)44);
            msg.WriteByte(slot);
            msg.WriteUInt16((ushort)icon);
            msg.WriteString8(name);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void AddSkill(string name, byte newslot)
        {
            Skill skill = this.GetSkill(name);
            ServerPacket msg = new ServerPacket((byte)44);
            msg.WriteByte(newslot);
            msg.WriteUInt16((ushort)skill.Icon);
            msg.WriteString8(skill.ToString());
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void RemoveSkill(byte slot)
        {
            ServerPacket msg = new ServerPacket((byte)45);
            msg.WriteByte(slot);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void AddSpell(string name, byte newslot)
        {
            Spell spell = this.GetSpell(name);
            ServerPacket msg = new ServerPacket((byte)23);
            msg.WriteByte(newslot);
            msg.WriteUInt16((ushort)spell.Icon);
            msg.WriteByte((byte)spell.Type);
            msg.WriteString8(spell.ToString());
            msg.WriteString8(spell.Prompt);
            msg.WriteByte((byte)spell.CastLines);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void RemoveSpell(byte slot)
        {
            ServerPacket msg = new ServerPacket((byte)24);
            msg.WriteByte(slot);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void CreateSpell()
        {
        }

        public void LoadFakeNpcs()
        {
        }

        public void UpdateFakeNpcs()
        {
        }

        public void FakePopupList(uint id, string text)
        {
            string str1 = "TARDIS";
            if (this.FakeNpcs.ContainsKey(id))
            {
                Character fakeNpc = this.FakeNpcs[id];
                str1 = fakeNpc.Name;
                this.imagetest = (ushort)(fakeNpc as Npc).Image;
            }
            ServerPacket msg = new ServerPacket((byte)48);
            msg.WriteByte((byte)2);
            msg.WriteByte((byte)1);
            msg.WriteUInt32(id);
            msg.WriteByte((byte)1);
            msg.WriteUInt16((ushort)((uint)this.imagetest + 16384U));
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)1);
            msg.WriteUInt16((ushort)((uint)this.imagetest + 16384U));
            msg.WriteUInt32(0U);
            msg.WriteUInt32(0U);
            msg.WriteString8(str1);
            string str2 = text.Remove(text.IndexOf('|'));
            msg.WriteString16(str2);
            string[] strArray = text.Remove(0, text.IndexOf('|') + 1).Split('|');
            byte num = (byte)((IEnumerable<string>)strArray).Count<string>();
            msg.WriteByte(num);
            for (int index = 0; index < (int)num; ++index)
                msg.WriteString8(strArray[index]);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakePopup(uint id, string text, byte prev = 0, byte next = 1)
        {
            string str = "TARDIS";
            if (this.FakeNpcs.ContainsKey(id))
            {
                Character fakeNpc = this.FakeNpcs[id];
                str = fakeNpc.Name;
                this.imagetest = (ushort)(fakeNpc as Npc).Image;
            }
            ServerPacket msg = new ServerPacket((byte)48);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)1);
            msg.WriteUInt32(id);
            msg.WriteByte((byte)1);
            msg.WriteUInt16((ushort)((uint)this.imagetest + 16384U));
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)1);
            msg.WriteUInt16((ushort)((uint)this.imagetest + 16384U));
            msg.WriteUInt16((ushort)0);
            msg.WriteUInt16((ushort)0);
            if (prev == (byte)0 && next == (byte)1)
            {
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)0);
            }
            else if (prev == (byte)0 && next == (byte)0)
            {
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
            }
            else if (prev == (byte)1 && next == (byte)0)
            {
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)0);
                msg.WriteByte((byte)0);
            }
            else if (prev == (byte)1 && next == (byte)1)
            {
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)1);
                msg.WriteByte((byte)0);
            }
            msg.WriteString8(str);
            msg.WriteString16(text);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakePopEnd()
        {
            ServerPacket msg = new ServerPacket((byte)48);
            msg.WriteByte((byte)10);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakeHPBar(uint id, byte amount)
        {
            if (!this.FakeNpcs.ContainsKey(id) || this.FakeNpcs[id].Map != this.MapInfo.Number)
                return;
            byte num = 1;
            if (amount == (byte)100)
                num = byte.MaxValue;
            ServerPacket msg = new ServerPacket((byte)19);
            msg.WriteUInt32(id);
            msg.WriteByte((byte)2);
            msg.WriteByte(amount);
            msg.WriteByte(num);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakeWalk(uint id, Direction dir)
        {
            Character fakeNpc = this.FakeNpcs[id];
            ServerPacket msg = new ServerPacket((byte)12);
            msg.WriteUInt32(id);
            msg.WriteUInt16((ushort)fakeNpc.Location.X);
            msg.WriteUInt16((ushort)fakeNpc.Location.Y);
            msg.WriteByte((byte)dir);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
            int x = fakeNpc.Location.X;
            int y = fakeNpc.Location.Y;
            switch (dir)
            {
                case Direction.North:
                    --y;
                    break;
                case Direction.East:
                    ++x;
                    break;
                case Direction.South:
                    ++y;
                    break;
                case Direction.West:
                    --x;
                    break;
            }
            fakeNpc.Location.X = x;
            fakeNpc.Location.Y = y;
            fakeNpc.Location.Direction = dir;
        }

        public void FakeTurn(uint id, Direction dir)
        {
            ServerPacket msg = new ServerPacket((byte)17);
            msg.WriteUInt32(id);
            msg.WriteByte((byte)dir);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
            this.FakeNpcs[id].Location.Direction = dir;
        }

        public void FakeBodyAni(uint id, int effect)
        {
            if (!this.FakeNpcs.ContainsKey(id) || this.FakeNpcs[id].Map != this.MapInfo.Number || effect <= 0)
                return;
            ServerPacket msg = new ServerPacket((byte)26);
            msg.WriteUInt32(id);
            msg.WriteByte((byte)1);
            msg.WriteByte((byte)0);
            msg.WriteUInt16((ushort)(5120 + effect));
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakeSpellAniTarget(
          uint targetid,
          uint fromid,
          ushort targeteffect,
          ushort fromeffect)
        {
            ServerPacket msg = new ServerPacket((byte)41);
            msg.WriteUInt32(targetid);
            msg.WriteUInt32(fromid);
            msg.WriteUInt16(targeteffect);
            msg.WriteUInt16(fromeffect);
            msg.WriteUInt16((ushort)100);
            msg.WriteUInt16((ushort)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakeSpellAni(int x, int y, int effect)
        {
            if (effect <= 0)
                return;
            ServerPacket msg = new ServerPacket((byte)41);
            msg.WriteUInt32(0U);
            msg.WriteUInt16((ushort)effect);
            msg.WriteUInt16((ushort)100);
            msg.WriteUInt16((ushort)x);
            msg.WriteUInt16((ushort)y);
            msg.WriteUInt16((ushort)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void UpdatePlayerImage(Player player)
        {
            byte num = player.NameTagStyle;
            string str = player.Name;
            if ((int)player.ID == (int)this.PlayerID || this.imonster && !this.SafeToWalkFast)
            {
                ServerPacket msg = new ServerPacket((byte)51);
                msg.WriteUInt16((ushort)this.ClientLocation.X);
                msg.WriteUInt16((ushort)this.ClientLocation.Y);
                msg.WriteByte((byte)this.ClientLocation.Direction);
                msg.WriteUInt32(this.PlayerID);
                msg.WriteUInt16(this.ClientHead);
                if (this.ClientHead == ushort.MaxValue || this.Tab.vusemonster && this.Tab.vusemonsterid > 0 && this.SafeToWalkFast)
                {
                    if (this.Tab.vusemonsterid > 0 && this.Tab.vusemonster)
                    {
                        this.imonster = true;
                        msg.WriteUInt16((ushort)(this.Tab.vusemonsterid + 16384));
                    }
                    else
                    {
                        this.imonster = false;
                        msg.WriteUInt16(this.ClientForm);
                    }
                    msg.WriteUInt32(0U);
                    msg.WriteUInt32(0U);
                }
                else
                {
                    this.imonster = false;
                    msg.WriteByte(this.ClientBody);
                    msg.WriteUInt16(this.ClientArms);
                    msg.WriteByte(this.ClientBoots);
                    msg.WriteUInt16(this.ClientArmor);
                    msg.WriteByte(this.ClientShield);
                    msg.WriteUInt16(this.ClientWeapon);
                    msg.WriteByte(this.ClientHeadColor);
                    msg.WriteByte(this.ClientBootColor);
                    msg.WriteByte(this.ClientAcc1Color);
                    msg.WriteUInt16(this.ClientAcc1);
                    msg.WriteByte(this.ClientAcc2Color);
                    msg.WriteUInt16(this.ClientAcc2);
                    msg.WriteByte(this.ClientUnknown);
                    msg.WriteUInt16(this.ClientAcc3);
                    msg.WriteByte(this.ClientUnknown2);
                    msg.WriteByte(this.ClientRestCloak);
                    msg.WriteUInt16(this.ClientOvercoat);
                    msg.WriteByte(this.ClientOvercoatColor);
                    msg.WriteByte(this.ClientSkinColor);
                    msg.WriteByte(this.ClientHideBool);
                    msg.WriteByte(this.ClientFaceShape);
                }
                msg.WriteByte(this.ClientNameTagStyle);
                msg.WriteString8(this.ClientName);
                msg.WriteString8(this.ClientGroup);
                msg.Write(new byte[3]);
                this.Enqueue(msg);
            }
            else
            {
                if (!player.IsOnScreen)
                    return;
                if (str.Contains("["))
                    str = str.Remove(str.IndexOf("[") - 1);
                if (str.Contains(")"))
                    str = str.Remove(0, str.IndexOf(" ") + 1);
                if (!this.safemode)
                {
                    TimeSpan timeSpan;
                    if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasdion)
                    {
                        num = (byte)3;
                        timeSpan = DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[244]);
                        str = "(" + (20 - (int)timeSpan.TotalSeconds).ToString() + ") " + str;
                    }
                    if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasironskin)
                    {
                        num = (byte)3;
                        timeSpan = DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[89]);
                        str = "(" + (19 - (int)timeSpan.TotalSeconds).ToString() + ") " + str;
                    }
                    if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasdioncomlha)
                    {
                        num = (byte)3;
                        timeSpan = DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[93]);
                        str = "(" + (20 - (int)timeSpan.TotalSeconds).ToString() + ") " + str;
                    }
                    if (this.Tab.vmonitordion && Server.StaticCharacters[player.ID].hasasgall)
                    {
                        num = (byte)3;
                        timeSpan = DateTime.UtcNow.Subtract(Server.StaticCharacters[player.ID].SpellAnimationHistory[66]);
                        str = "(" + (13 - (int)timeSpan.TotalSeconds).ToString() + ") " + str;
                    }
                    if (this.Tab.vmonitorspells && Server.StaticCharacters[player.ID].hasaite && !Server.StaticCharacters[player.ID].hasfas)
                    {
                        num = (byte)3;
                        str += " [aite]";
                    }
                    else if (this.Tab.vmonitorspells && Server.StaticCharacters[player.ID].hasaite && Server.StaticCharacters[player.ID].hasfas)
                    {
                        num = (byte)3;
                        str += " [aite/fas]";
                    }
                    else if (this.Tab.vmonitorspells && !Server.StaticCharacters[player.ID].hasaite && Server.StaticCharacters[player.ID].hasfas)
                    {
                        num = (byte)3;
                        str += " [fas]";
                    }
                }
              (this.Characters[player.ID] as Player).DisplayName = str;
                ServerPacket msg = new ServerPacket((byte)51);
                msg.WriteUInt16((ushort)player.Location.X);
                msg.WriteUInt16((ushort)player.Location.Y);
                msg.WriteByte((byte)player.Location.Direction);
                msg.WriteUInt32(player.ID);
                msg.WriteUInt16(player.Head);
                if (player.Head == ushort.MaxValue)
                {
                    msg.WriteUInt16(player.Form);
                    msg.WriteUInt32(0U);
                    msg.WriteUInt32(0U);
                    msg.WriteByte((byte)3);
                }
                else
                {
                    msg.WriteByte(player.Body);
                    msg.WriteUInt16(player.Arms);
                    msg.WriteByte(player.Boots);
                    msg.WriteUInt16(player.Armor);
                    msg.WriteByte(player.Shield);
                    msg.WriteUInt16(player.Weapon);
                    msg.WriteByte(player.HeadColor);
                    msg.WriteByte(player.BootColor);
                    msg.WriteByte(player.Acc1Color);
                    msg.WriteUInt16(player.Acc1);
                    msg.WriteByte(player.Acc2Color);
                    msg.WriteUInt16(player.Acc2);
                    msg.WriteByte(player.Unknown);
                    msg.WriteUInt16(player.Acc3);
                    msg.WriteByte(player.Unknown2);
                    msg.WriteByte(player.RestCloak);
                    msg.WriteUInt16(player.Overcoat);
                    msg.WriteByte(player.OvercoatColor);
                    msg.WriteByte(player.SkinColor);
                    msg.WriteByte(player.HideBool);
                    msg.WriteByte(player.FaceShape);
                    if (!this.safemode && msg.BodyData[11] == (byte)0)
                    {
                        msg.BodyData[11] = Server.invis;
                        msg.WriteByte((byte)3);
                    }
                    else
                        msg.WriteByte(num);
                }
                msg.WriteString8(str);
                msg.WriteString8(player.GroupName);
                player.NameIsRed = false;
                Server.StaticCharacters[player.ID].NameIsRed = false;
                if (!this.safemode)
                {
                    if (this.Tab.monitords.Checked && player.Head != ushort.MaxValue && (Server.StaticCharacters[player.ID].hasdarkerseal || Server.StaticCharacters[player.ID].hasdarkseal))
                    {
                        player.NameIsRed = true;
                        Server.StaticCharacters[player.ID].NameIsRed = true;
                        msg.BodyData[39] = (byte)1;
                    }
                    else if (this.Tab.monitords.Checked && player.Head == ushort.MaxValue && (Server.StaticCharacters[player.ID].hasdarkerseal || Server.StaticCharacters[player.ID].hasdarkseal))
                    {
                        player.NameIsRed = true;
                        Server.StaticCharacters[player.ID].NameIsRed = true;
                        msg.BodyData[21] = (byte)1;
                    }
                    else if (this.Tab.vmonitorcurses && player.Head != ushort.MaxValue && Server.StaticCharacters[player.ID].hasardcradh)
                    {
                        player.NameIsRed = true;
                        Server.StaticCharacters[player.ID].NameIsRed = true;
                        msg.BodyData[39] = (byte)1;
                    }
                    else if (this.Tab.vmonitorcurses && player.Head == ushort.MaxValue && Server.StaticCharacters[player.ID].hasardcradh)
                    {
                        player.NameIsRed = true;
                        Server.StaticCharacters[player.ID].NameIsRed = true;
                        msg.BodyData[21] = (byte)1;
                    }
                }
                msg.Write(new byte[3]);
                this.Enqueue(msg);
            }
        }

        public void UseMonsterForm()
        {
            ServerPacket msg = new ServerPacket((byte)51);
            if (this.Tab.vusemonsterid > 0 && this.Tab.vusemonster && this.SafeToWalkFast)
            {
                this.imonster = true;
                msg.WriteUInt16((ushort)this.ClientLocation.X);
                msg.WriteUInt16((ushort)this.ClientLocation.Y);
                msg.WriteByte((byte)this.ClientLocation.Direction);
                msg.WriteUInt32(this.PlayerID);
                msg.WriteUInt16(ushort.MaxValue);
                msg.WriteUInt16((ushort)((uint)(ushort)this.Tab.vusemonsterid + 16384U));
                msg.WriteUInt32(0U);
                msg.WriteUInt32(0U);
                msg.WriteByte(this.ClientNameTagStyle);
                msg.WriteString8(this.ClientName);
                msg.WriteString8(this.ClientGroup);
            }
            else
            {
                this.imonster = false;
                msg.WriteUInt16((ushort)this.ClientLocation.X);
                msg.WriteUInt16((ushort)this.ClientLocation.Y);
                msg.WriteByte((byte)this.ClientLocation.Direction);
                msg.WriteUInt32(this.PlayerID);
                if (this.ClientHead == ushort.MaxValue)
                {
                    msg.WriteUInt16(this.ClientHead);
                    msg.WriteUInt16(this.ClientForm);
                    msg.WriteUInt32(0U);
                    msg.WriteUInt32(0U);
                }
                else
                {
                    if (this.Tab.duhat.Checked && this.Tab.duhatnum.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duhatnum.Value);
                    else
                        msg.WriteUInt16(this.ClientHead);
                    msg.WriteByte(this.ClientBody);
                    msg.WriteUInt16(this.ClientArms);
                    if (this.Tab.duboots.Checked && this.Tab.dubootsnum.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.dubootsnum.Value);
                    else
                        msg.WriteByte(this.ClientBoots);
                    if (this.Tab.duarmor.Checked && this.Tab.duarmornum.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duarmornum.Value);
                    else
                        msg.WriteUInt16(this.ClientArmor);
                    if (this.Tab.dushield.Checked && this.Tab.dushieldnum.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.dushieldnum.Value);
                    else
                        msg.WriteByte(this.ClientShield);
                    if (this.Tab.duweapon.Checked && this.Tab.duweaponnum.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duweaponnum.Value);
                    else
                        msg.WriteUInt16(this.ClientWeapon);
                    if (this.Tab.duhat.Checked && this.Tab.duhatcolor.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duhatcolor.Value);
                    else
                        msg.WriteByte(this.ClientHeadColor);
                    if (this.Tab.duboots.Checked && this.Tab.dubootcolor.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.dubootcolor.Value);
                    else
                        msg.WriteByte(this.ClientBootColor);
                    if (this.Tab.duacc1.Checked && this.Tab.duacc1color.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duacc1color.Value);
                    else
                        msg.WriteByte(this.ClientAcc1Color);
                    if (this.Tab.duacc1.Checked && this.Tab.duacc1num.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duacc1num.Value);
                    else
                        msg.WriteUInt16(this.ClientAcc1);
                    if (this.Tab.duacc2.Checked && this.Tab.duacc2color.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duacc2color.Value);
                    else
                        msg.WriteByte(this.ClientAcc2Color);
                    if (this.Tab.duacc2.Checked && this.Tab.duacc2num.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duacc2num.Value);
                    else
                        msg.WriteUInt16(this.ClientAcc2);
                    if (this.Tab.duacc3.Checked && this.Tab.duacc3color.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duacc3color.Value);
                    else
                        msg.WriteByte(this.ClientUnknown);
                    if (this.Tab.duacc3.Checked && this.Tab.duacc3num.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duacc3num.Value);
                    else
                        msg.WriteUInt16(this.ClientAcc3);
                    if (this.Tab.duarmor.Checked && this.Tab.duunknown2.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duunknown2.Value);
                    else
                        msg.WriteByte(this.ClientUnknown2);
                    msg.WriteByte(this.ClientRestCloak);
                    if (this.Tab.duovercoat.Checked && this.Tab.duovercoatnum.Value != new Decimal(0))
                        msg.WriteUInt16((ushort)this.Tab.duovercoatnum.Value);
                    else
                        msg.WriteUInt16(this.ClientOvercoat);
                    if (this.Tab.duovercoat.Checked && this.Tab.duovercoatcolor.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duovercoatcolor.Value);
                    else
                        msg.WriteByte(this.ClientOvercoatColor);
                    if (this.Tab.duskin.Checked && this.Tab.duskinnum.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.duskinnum.Value);
                    else
                        msg.WriteByte(this.ClientSkinColor);
                    msg.WriteByte(this.ClientHideBool);
                    if (this.Tab.duface.Checked && this.Tab.dufacenum.Value != new Decimal(0))
                        msg.WriteByte((byte)this.Tab.dufacenum.Value);
                    else
                        msg.WriteByte(this.ClientFaceShape);
                }
                msg.WriteByte(this.ClientNameTagStyle);
                msg.WriteString8(this.ClientName);
                msg.WriteString8(this.ClientGroup);
            }
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void FakeChat(string text, uint id)
        {
            ServerPacket msg = new ServerPacket((byte)13);
            msg.WriteByte((byte)0);
            msg.WriteUInt32(id);
            msg.WriteString8(text);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)0);
            msg.WriteByte((byte)0);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void SendMessage(string text, byte type = 0, bool debug = false)
        {
            if (debug && !this._debug || this.safemode)
                return;
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textred.Checked)
                text = text.Replace("{=b", "{=b");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textyellow.Checked)
                text = text.Replace("{=b", "{=c");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgreen.Checked)
                text = text.Replace("{=b", "{=d");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textlightblue.Checked)
                text = text.Replace("{=b", "{=e");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textblue.Checked)
                text = text.Replace("{=b", "{=f");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey1.Checked)
                text = text.Replace("{=b", "{=g");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey2.Checked)
                text = text.Replace("{=b", "{=a");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey3.Checked)
                text = text.Replace("{=b", "{=i");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey4.Checked)
                text = text.Replace("{=b", "{=j");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey5.Checked)
                text = text.Replace("{=b", "{=k");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey6.Checked)
                text = text.Replace("{=b", "{=l");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textgrey7.Checked)
                text = text.Replace("{=b", "{=m");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textblack.Checked)
                text = text.Replace("{=b", "{=n");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textpink.Checked)
                text = text.Replace("{=b", "{=o");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textpurple.Checked)
                text = text.Replace("{=b", "{=p");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textlightgreen.Checked)
                text = text.Replace("{=b", "{=q");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textorange.Checked)
                text = text.Replace("{=b", "{=s");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textbrown.Checked)
                text = text.Replace("{=b", "{=t");
            if (type == (byte)18 && text.StartsWith("{=b") && Program.MainForm.textwhite.Checked)
                text = text.Replace("{=b", "{=u");
            if (type == (byte)18)
                this.LastPermMessage = text;
            if (this.safemode)
                return;
            ServerPacket msg = new ServerPacket((byte)10);
            msg.WriteByte(type);
            msg.WriteString16(text);
            msg.Write(new byte[3]);
            this.Enqueue(msg);
        }

        public void SendMessage(string message, string color, bool all = false)
        {
            if (this.safemode)
                return;
            if (color == "red")
                color = "b";
            else if (color == "pink")
                color = "w";
            else if (color == "grey")
                color = "a";
            else if (color == "orange")
                color = "s";
            string str = DateTime.Now.ToString("hh:mm tt");
            message = "{=" + color + "<" + str + "> " + message;
            if (all)
            {
                foreach (Client client in Server.Alts.Values.ToArray<Client>())
                    client?.SendMessage(message, (byte)0, false);
            }
            else
                this.SendMessage(message, (byte)0, false);
        }

        public void BestAites()
        {
            int num = 0;
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard naomh aite"))
                {
                    this.Tab.selfaitetype.Items.Add((object)spell.Name);
                    this.YourAites.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor naomh aite"))
                {
                    this.Tab.selfaitetype.Items.Add((object)spell.Name);
                    this.YourAites.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("naomh aite"))
                {
                    this.Tab.selfaitetype.Items.Add((object)spell.Name);
                    this.YourAites.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("beag naomh aite"))
                {
                    this.Tab.selfaitetype.Items.Add((object)spell.Name);
                    this.YourAites.Add(spell.Name);
                    ++num;
                }
            }
            if (num > 0)
            {
                this.Tab.selfaitetype.SelectedIndex = 0;
            }
            else
            {
                this.Tab.selfaite.Checked = false;
                this.Tab.selfaite.Enabled = false;
                this.Tab.selfaitetype.Enabled = false;
            }
        }

        public void BestFases()
        {
            int num = 0;
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard fas nadur"))
                {
                    this.Tab.selffastype.Items.Add((object)spell.Name);
                    this.YourFases.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor fas nadur"))
                {
                    this.Tab.selffastype.Items.Add((object)spell.Name);
                    this.YourFases.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("fas nadur"))
                {
                    this.Tab.selffastype.Items.Add((object)spell.Name);
                    this.YourFases.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("beag fas nadur"))
                {
                    this.Tab.selffastype.Items.Add((object)spell.Name);
                    this.YourFases.Add(spell.Name);
                    ++num;
                }
            }
            if (num > 0)
            {
                this.Tab.selffastype.SelectedIndex = 0;
            }
            else
            {
                this.Tab.selffas.Checked = false;
                this.Tab.selffas.Enabled = false;
                this.Tab.selffastype.Enabled = false;
            }
        }

        public void BestIocs()
        {
            int num = 0;
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard ioc comlha"))
                {
                    this.YourGIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor ioc comlha"))
                {
                    this.YourGIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ioc comlha"))
                {
                    this.YourGIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("beag ioc comlha"))
                {
                    this.YourGIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("nuadhaich"))
                {
                    this.Tab.ioctype.Items.Add((object)spell.Name);
                    this.YourGIocs.Add(spell.Name);
                    this.YourIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard ioc"))
                {
                    this.Tab.ioctype.Items.Add((object)spell.Name);
                    this.YourGIocs.Add(spell.Name);
                    this.YourIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor ioc"))
                {
                    this.Tab.ioctype.Items.Add((object)spell.Name);
                    this.YourGIocs.Add(spell.Name);
                    this.YourIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ioc"))
                {
                    this.Tab.ioctype.Items.Add((object)spell.Name);
                    this.YourGIocs.Add(spell.Name);
                    this.YourIocs.Add(spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("beag ioc"))
                {
                    this.Tab.ioctype.Items.Add((object)spell.Name);
                    this.YourGIocs.Add(spell.Name);
                    this.YourIocs.Add(spell.Name);
                    ++num;
                }
            }
            if (num > 0)
            {
                this.Tab.ioctype.SelectedIndex = 0;
            }
            else
            {
                this.Tab.iocself.Checked = false;
                this.Tab.iocself.Enabled = false;
                this.Tab.ioctype.Enabled = false;
            }
        }

        public void BestDions()
        {
            int num = 0;
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Iron Skin"))
                {
                    this.Tab.diontype.Items.Add((object)spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor dion"))
                {
                    this.Tab.diontype.Items.Add((object)spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Wings of Protection"))
                {
                    this.Tab.diontype.Items.Add((object)spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Draco Stance"))
                {
                    this.Tab.diontype.Items.Add((object)spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("dion"))
                {
                    this.Tab.diontype.Items.Add((object)spell.Name);
                    ++num;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Stone Skin"))
                {
                    this.Tab.diontype.Items.Add((object)spell.Name);
                    ++num;
                }
            }
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.Name.Equals("Glowing Stone"))
                {
                    this.Tab.diontype.Items.Add((object)obj.Name);
                    ++num;
                }
            }
            if (num <= 0)
                return;
            this.Tab.diontype.SelectedIndex = 0;
        }

        public void BestCradhs()
        {



            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Demise"))
                    this.YourCradhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Darker Seal"))
                    this.YourCradhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Dark Seal"))
                    this.YourCradhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard cradh"))
                    this.YourCradhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor cradh"))
                    this.YourCradhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("cradh"))
                    this.YourCradhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("beag cradh"))
                    this.YourCradhs.Add(spell.Name);
            }
        }

        public void BestPramhs()
        {
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Mesmerize"))
                    this.YourPramhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("pramh"))
                    this.YourPramhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("beag pramh"))
                    this.YourPramhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("suain"))
                    this.YourPramhs.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("dall"))
                    this.YourPramhs.Add(spell.Name);
            }
        }

        public void BestAttacks1()
        {
            bool flag1 = false;
            bool flag2 = false;
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Wraith Touch"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("athar lamh"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("srad lamh"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Keeter"))
                    this.YourAttacks1.Add("Keeter");
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Mermaid"))
                    this.YourAttacks1.Add("Mermaid");
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Torch"))
                    this.YourAttacks1.Add("Torch");
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Groo"))
                    this.YourAttacks1.Add("Groo");
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Deception of Life"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Dragon Blast"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Unholy Explosion"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor strioch pian gar"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor pian na dion"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard pian na dion"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("pian na dion"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("mor deo searg gar"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("deo searg gar"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("ard deo searg"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("deo searg"))
                    this.YourAttacks1.Add(spell.Name);
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Star Arrow"))
                    this.YourAttacks1.Add("Star Arrow");
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Shock Arrow"))
                {
                    this.YourAttacks1.Add("Shock Arrow");
                    flag1 = true;
                }
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Frost Arrow"))
                {
                    this.YourAttacks1.Add("Frost Arrow");
                    flag2 = true;
                }
            }
            if (flag1 && flag2)
                this.YourAttacks1.Add("Frost + 3 Shocks");
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Hail of Feathers"))
                    this.YourAttacks1.Add("Hail of Feathers");
            }
        }

        public void BestAttacks2()
        {
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Contains("Cursed Tune"))
                    this.YourAttacks2.Add("Cursed Tune");
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.Equals("Supernova Shot"))
                    this.YourAttacks2.Add(spell.Name);
            }
        }

        public void SpellsAppear()
        {
            int y1 = 47;
            int y2 = 22;
            bool flag = false;
            if (this.HasSpell("ard fas nadur", false) || this.HasSpell("mor fas nadur", false) || this.HasSpell("fas nadur", false) || this.HasSpell("beag fas nadur", false))
                flag = true;
            if (this.HasSpell("ard naomh aite", false) || this.HasSpell("mor naomh aite", false) || this.HasSpell("naomh aite", false) || this.HasSpell("beag naomh aite", false))
            {
                this.Tab.selfaite.Visible = true;
                this.Tab.selfaitetype.Visible = true;
                this.Tab.selfaite.Location = new System.Drawing.Point(28, y1);
                this.Tab.selfaitetype.Location = new System.Drawing.Point(49, y1 - 4);
                if (flag)
                    y1 += 29;
                else
                    y1 += 25;
            }
            if (this.HasSpell("ard fas nadur", false) || this.HasSpell("mor fas nadur", false) || this.HasSpell("fas nadur", false) || this.HasSpell("beag fas nadur", false))
            {
                this.Tab.selffas.Visible = true;
                this.Tab.selffastype.Visible = true;
                this.Tab.selffas.Location = new System.Drawing.Point(28, y1);
                this.Tab.selffastype.Location = new System.Drawing.Point(49, y1 - 4);
                y1 += 25;
            }
            if (this.HasSpell("armachd", false))
            {
                this.Tab.selfarm.Visible = true;
                this.Tab.selfarm.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("beag cradh", false))
            {
                this.Tab.selfbc.Visible = true;
                this.Tab.selfbc.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("ao ard cradh", false) || this.HasSpell("ao mor cradh", false) || this.HasSpell("ao cradh", false) || this.HasSpell("ao beag cradh", false))
            {
                this.Tab.aocurse.Visible = true;
                this.Tab.aocurse.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("ao suain", false) || this.HasSpell("Leafhopper Chirp", false))
            {
                this.Tab.selfaosuain.Visible = true;
                this.Tab.selfaosuain.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("ao puinsein", false))
            {
                this.Tab.selfaopuinsein.Visible = true;
                this.Tab.selfaopuinsein.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("deireas faileas", false))
            {
                this.Tab.dfmonsters.Visible = true;
                this.Tab.dfmonsters.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("Disenchanter", false))
            {
                this.Tab.disenchanter.Visible = true;
                this.Tab.disenchanter.Location = new System.Drawing.Point(28, y1);
                y1 += 25;
            }
            if (this.HasSpell("ao dall", false))
            {
                this.Tab.aodall.Visible = true;
                this.Tab.aodall.Location = new System.Drawing.Point(28, y1);
            }
            if (this.HasSpell("beannaich", false) || this.HasSpell("mor beannaich", false))
            {
                this.Tab.selfbean.Visible = true;
                this.Tab.selfbean.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("fas deireas", false))
            {
                this.Tab.selffasdeireas.Visible = true;
                this.Tab.selffasdeireas.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("creag neart", false))
            {
                this.Tab.selfcreagneart.Visible = true;
                this.Tab.selfcreagneart.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("Mist", false))
            {
                this.Tab.selfmist.Visible = true;
                this.Tab.selfmist.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && (spell.Name.Contains("Komodas Form") || spell.Name.Contains("Feral Form") || spell.Name.Contains("Karura Form")))
                {
                    this.Tab.druidform.Visible = true;
                    this.Tab.druidform.Location = new System.Drawing.Point(176, y2);
                    y2 += 25;
                    break;
                }
            }
            if (this.HasSpell("Aegis Sphere", false))
            {
                this.Tab.aegissphere.Visible = true;
                this.Tab.aegissphere.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("Hide", false) || this.HasSpell("White Bat Stance", false))
            {
                this.Tab.selfhide.Visible = true;
                this.Tab.selfhide.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("asgall faileas", false))
            {
                this.Tab.asgallmonsters.Visible = true;
                this.Tab.asgallmonsters.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("Regeneration", false) || this.HasSpell("Increased Regeneration", false))
            {
                this.Tab.selfregen.Visible = true;
                this.Tab.selfregen.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("Counter Attack", false))
            {
                this.Tab.selfca.Visible = true;
                this.Tab.selfca.Location = new System.Drawing.Point(176, y2);
                y2 += 25;
            }
            if (this.HasSpell("Bubble Block", false))
            {
                this.Tab.bubblenorajo.Visible = true;
                this.Tab.bubblenorajo.Location = new System.Drawing.Point(176, y2);
                int num = y2 + 25;
            }
            if (this.HasSpell("ard ioc", false) || this.HasSpell("mor ioc", false) || (this.HasSpell("ioc", false) || this.HasSpell("beag ioc", false)) || this.HasSpell("nuadhaich", false))
            {
                this.Tab.iocself.Visible = true;
                this.Tab.iocselfcond.Visible = true;
                this.Tab.ioctype.Visible = true;
            }
            if (this.HasSpell("fas spiorad", false))
            {
                this.Tab.fs.Visible = true;
                this.Tab.fscond.Visible = true;
            }
            if (!this.HasItem("Glowing Stone") && !this.HasSpell("Iron Skin", false) && (!this.HasSpell("mor dion", false) && !this.HasSpell("Stone Skin", false)) && (!this.HasSpell("Wings of Protection", false) && !this.HasSpell("dion", false)) && !this.HasSpell("Draco Stance", false))
                return;
            this.Tab.group_dion.Visible = true;
        }

        public void SkillsAppear()
        {
        }

        public void TrinketsAppear()
        {
            int y1 = 22;
            if (this.HasItem("Elemus Mount"))
            {
                this.Tab.elemusmount.Visible = true;
                this.Tab.elemusmount.Location = new System.Drawing.Point(15, y1);
                y1 += 25;
            }
            if (this.HasItem("Mantid Scent") || this.HasItem("Potent Mantid Scent"))
            {
                this.Tab.mantidscent.Visible = true;
                this.Tab.mantidscent.Location = new System.Drawing.Point(15, y1);
                y1 += 25;
            }
            if (this.HasItem("Assassin Scroll"))
            {
                this.Tab.assassinscroll.Visible = true;
                this.Tab.assassinscroll.Location = new System.Drawing.Point(15, y1);
                y1 += 25;
            }
            this.Tab.icebottle.Visible = true;
            this.Tab.icebottle.Location = new System.Drawing.Point(15, y1);
            int y2 = y1 + 25;
            if (this.HasItem("Fungus Beetle Extract"))
            {
                this.Tab.fungusbeetleextract.Visible = true;
                this.Tab.fungusbeetleextract.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            if (this.HasItem("Dragon's Fire"))
            {
                this.Tab.dragonsfire.Visible = true;
                this.Tab.dragonsfire.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            if (this.HasItem("Dragon's Scale"))
            {
                this.Tab.dragonsscale.Visible = true;
                this.Tab.dragonsscale.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            if (this.HasItem("Muscle Stimulant"))
            {
                this.Tab.musclestimulant.Visible = true;
                this.Tab.musclestimulant.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            if (this.HasItem("Nerve Stimulant"))
            {
                this.Tab.nervestimulant.Visible = true;
                this.Tab.nervestimulant.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            if (this.HasItem("Wake Scroll"))
            {
                this.Tab.wakescroll.Visible = true;
                this.Tab.wakescroll.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            if (this.HasItem("Vanishing Elixir"))
            {
                this.Tab.vanishingelixir.Visible = true;
                this.Tab.vanishingelixir.Location = new System.Drawing.Point(15, y2);
                y2 += 25;
            }
            this.Tab.trinket_holder.Size = new Size(156, y2 + 5);
        }

        public void MacroSpells()
        {
            this.macrospelllist.Clear();
            foreach (ListViewItem listViewItem in this.Tab.MacroOptions.macrospellslistview.Items)
            {
                if (!this.macrospelllist.Contains(listViewItem.Text))
                    this.macrospelllist.Add(listViewItem.Text);
            }
            this.Tab.MacroOptions.macrospellscombobox.Items.Clear();
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.CurrentLevel < spell.MaximumLevel && (!this.Tab.MacroOptions.macrospellslistview.Items.ContainsKey(spell.Name) && spell.Name != "nis") && spell.Name != "Learning Spell")
                {
                    object obj = (object)(spell.Name + " (" + (object)spell.CurrentLevel + "/" + (object)spell.MaximumLevel + ")");
                    if (!this.Tab.MacroOptions.macrospellscombobox.Items.Contains(obj))
                        this.Tab.MacroOptions.macrospellscombobox.Items.Add(obj);
                }
            }
        }

        public void IniTimedStuff()
        {
            if (!System.IO.File.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml"))
            {
                XDocument xdocument = new XDocument();
                xdocument.Add((object)new XElement((XName)"Settings"));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Skrull", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Captain", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Blob1", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Blob2", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Mass", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Gan", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Morg", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"VeltainQueen", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"KingQueen", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"WaterDungeon", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AssassinLord", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Law", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Clover", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"GoldStarfish", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Frog", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Spore", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"CursedHome", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"OrenFountain", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"PerfectHair", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AscendTime", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"PigChaseTurnIn", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"FilthyErbieTurnIn", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AntTunnels", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"GuardianAntTunnels", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"WDChest", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AndorChest", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"QueenChest", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"MotherErbieGift", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AbGift", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AbBox", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"MothersLove", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Labor", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"TheLetter", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Mentored", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"YuleQuest", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Altar", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Rudolph", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Penguins", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"PetFaerie", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"YTBoss", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Fowls", (object)DateTime.MinValue));
                xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"SpareStick", (object)DateTime.MinValue));
                xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            }
            else
            {
                XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
                if (xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"VeltainQueen", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"WaterDungeon", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"AssassinLord") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AssassinLord", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Law") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Law", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Clover") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Clover", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"GoldStarfish", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Frog") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Frog", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Spore") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Spore", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"CursedHome") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"CursedHome", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"OrenFountain") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"OrenFountain", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"PerfectHair") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"PerfectHair", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"AscendTime") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AscendTime", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"PigChaseTurnIn", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"FilthyErbieTurnIn", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"AntTunnels") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AntTunnels", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"GuardianAntTunnels") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"GuardianAntTunnels", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"WDChest") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"WDChest", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"AndorChest") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AndorChest", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"QueenChest") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"QueenChest", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"MotherErbieGift", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"AbGift") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AbGift", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"AbBox") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"AbBox", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"MothersLove") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"MothersLove", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Labor") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Labor", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"TheLetter") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"TheLetter", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Mentored") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Mentored", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"YuleQuest") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"YuleQuest", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Altar") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Altar", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Rudolph") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Rudolph", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Penguins") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Penguins", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"PetFaerie") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"PetFaerie", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"YTBoss") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"YTBoss", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"Fowls") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"Fowls", (object)DateTime.MinValue));
                if (xdocument.Element((XName)"Settings").Element((XName)"SpareStick") == null)
                    xdocument.Element((XName)"Settings").Add((object)new XElement((XName)"SpareStick", (object)DateTime.MinValue));
                xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            }
        }

        public void SaveTimedStuff(int type)
        {
            string str = string.Empty;
            XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            switch (type)
            {
                case 1:
                    str = "Skrull";
                    xdocument.Element((XName)"Settings").Element((XName)"Skrull").SetValue((object)DateTime.UtcNow);
                    break;
                case 2:
                    str = "Captain";
                    xdocument.Element((XName)"Settings").Element((XName)"Captain").SetValue((object)DateTime.UtcNow);
                    break;
                case 3:
                    str = "Blob 1";
                    xdocument.Element((XName)"Settings").Element((XName)"Blob1").SetValue((object)DateTime.UtcNow);
                    break;
                case 4:
                    str = "Blob 2";
                    xdocument.Element((XName)"Settings").Element((XName)"Blob2").SetValue((object)DateTime.UtcNow);
                    break;
                case 5:
                    str = "Mass";
                    xdocument.Element((XName)"Settings").Element((XName)"Mass").SetValue((object)DateTime.UtcNow);
                    break;
                case 6:
                    xdocument.Element((XName)"Settings").Element((XName)"Gan").SetValue((object)DateTime.UtcNow);
                    break;
                case 7:
                    xdocument.Element((XName)"Settings").Element((XName)"Morg").SetValue((object)DateTime.UtcNow);
                    break;
                case 8:
                    str = "Veltain Queen";
                    xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen").SetValue((object)DateTime.UtcNow);
                    break;
                case 9:
                    str = "King & Queen";
                    xdocument.Element((XName)"Settings").Element((XName)"KingQueen").SetValue((object)DateTime.UtcNow);
                    break;
                case 10:
                    str = "Water Dungeon";
                    xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon").SetValue((object)DateTime.UtcNow);
                    break;
                case 11:
                    str = "Assassin Lord";
                    xdocument.Element((XName)"Settings").Element((XName)"AssassinLord").SetValue((object)DateTime.UtcNow);
                    break;
                case 12:
                    str = "Law";
                    xdocument.Element((XName)"Settings").Element((XName)"Law").SetValue((object)DateTime.UtcNow);
                    break;
                case 13:
                    str = "Lucky Clover";
                    xdocument.Element((XName)"Settings").Element((XName)"Clover").SetValue((object)DateTime.UtcNow);
                    break;
                case 14:
                    str = "Gold Starfish";
                    xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish").SetValue((object)DateTime.UtcNow);
                    break;
                case 15:
                    str = "Frog Set";
                    xdocument.Element((XName)"Settings").Element((XName)"Frog").SetValue((object)DateTime.UtcNow);
                    break;
                case 16:
                    str = "Spore Set";
                    xdocument.Element((XName)"Settings").Element((XName)"Spore").SetValue((object)DateTime.UtcNow);
                    break;
                case 17:
                    str = "Cursed Home";
                    xdocument.Element((XName)"Settings").Element((XName)"CursedHome").SetValue((object)DateTime.UtcNow);
                    break;
                case 18:
                    str = "Oren Fountain";
                    xdocument.Element((XName)"Settings").Element((XName)"OrenFountain").SetValue((object)DateTime.UtcNow);
                    break;
                case 19:
                    str = "Perfect Hairstyle";
                    xdocument.Element((XName)"Settings").Element((XName)"PerfectHair").SetValue((object)DateTime.UtcNow);
                    break;
                case 20:
                    xdocument.Element((XName)"Settings").Element((XName)"AscendTime").SetValue((object)this.ascendtime);
                    break;
                case 21:
                    str = "Pig Chase";
                    xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn").SetValue((object)DateTime.UtcNow);
                    break;
                case 22:
                    str = "Filthy Erbies";
                    xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn").SetValue((object)DateTime.UtcNow);
                    break;
                case 23:
                    xdocument.Element((XName)"Settings").Element((XName)"AntTunnels").SetValue((object)this.anttunnel);
                    break;
                case 24:
                    xdocument.Element((XName)"Settings").Element((XName)"GuardianAntTunnels").SetValue((object)this.guardiananttunnel);
                    break;
                case 25:
                    str = "WD Chest";
                    xdocument.Element((XName)"Settings").Element((XName)"WDChest").SetValue((object)DateTime.UtcNow);
                    break;
                case 26:
                    str = "Andor Chest";
                    xdocument.Element((XName)"Settings").Element((XName)"AndorChest").SetValue((object)DateTime.UtcNow);
                    break;
                case 27:
                    str = "Queen Chest";
                    xdocument.Element((XName)"Settings").Element((XName)"QueenChest").SetValue((object)DateTime.UtcNow);
                    break;
                case 28:
                    str = "Ab Gift";
                    xdocument.Element((XName)"Settings").Element((XName)"AbGift").SetValue((object)DateTime.UtcNow);
                    break;
                case 29:
                    str = "Ab Box";
                    xdocument.Element((XName)"Settings").Element((XName)"AbBox").SetValue((object)DateTime.UtcNow);
                    break;
                case 30:
                    str = "MEG";
                    xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift").SetValue((object)DateTime.UtcNow);
                    break;
                case 31:
                    str = "Mothers Love";
                    xdocument.Element((XName)"Settings").Element((XName)"MothersLove").SetValue((object)DateTime.UtcNow);
                    break;
                case 32:
                    str = "Labor";
                    xdocument.Element((XName)"Settings").Element((XName)"Labor").SetValue((object)this.labortime);
                    break;
                case 33:
                    str = "The Letter";
                    xdocument.Element((XName)"Settings").Element((XName)"TheLetter").SetValue((object)DateTime.UtcNow);
                    break;
                case 34:
                    str = "Mentored";
                    xdocument.Element((XName)"Settings").Element((XName)"Mentored").SetValue((object)DateTime.UtcNow);
                    break;
                case 35:
                    str = "Yule Quest";
                    xdocument.Element((XName)"Settings").Element((XName)"YuleQuest").SetValue((object)DateTime.UtcNow);
                    break;
                case 36:
                    if (this.Tab.altar.Checked)
                        str = "Altar";
                    xdocument.Element((XName)"Settings").Element((XName)"Altar").SetValue((object)this.altartimer);
                    break;
                case 37:
                    str = "Rudolph";
                    xdocument.Element((XName)"Settings").Element((XName)"Rudolph").SetValue((object)DateTime.UtcNow);
                    break;
                case 38:
                    str = "Penguins";
                    xdocument.Element((XName)"Settings").Element((XName)"Penguins").SetValue((object)DateTime.UtcNow);
                    break;
                case 39:
                    str = "Pet Faerie";
                    xdocument.Element((XName)"Settings").Element((XName)"PetFaerie").SetValue((object)DateTime.UtcNow);
                    break;
                case 40:
                    str = "YT Boss";
                    xdocument.Element((XName)"Settings").Element((XName)"YTBoss").SetValue((object)DateTime.UtcNow);
                    break;
                case 41:
                    str = "Fowls";
                    xdocument.Element((XName)"Settings").Element((XName)"Fowls").SetValue((object)DateTime.UtcNow);
                    break;
                case 42:
                    str = "Spare Stick";
                    xdocument.Element((XName)"Settings").Element((XName)"SpareStick").SetValue((object)DateTime.UtcNow);
                    break;
            }
            xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            if (!(str != string.Empty))
                return;
            TimedEvent timedEvent = new TimedEvent();
            timedEvent.Name = this.Name.ToLower();
            timedEvent.Time = DateTime.UtcNow;
            timedEvent.Event = str;
            timedEvent.Track = true;
            if (!Server.TimedEvent.ContainsKey(this.Name.ToLower() + str))
            {
                Server.TimedEvent.Add(this.Name.ToLower() + str, timedEvent);
            }
            else
            {
                if (!Server.TimedEvent[this.Name.ToLower() + str].Track)
                    timedEvent.Track = false;
                Server.TimedEvent[this.Name.ToLower() + str] = timedEvent;
            }
            this.Server.SaveTasksList();
        }

        public void LoadBossLog()
        {
            string str1 = string.Empty;
            double num1 = 0.0;
            string str2 = string.Empty;
            double num2 = 0.0;
            string str3 = string.Empty;
            double num3 = 0.0;
            string str4 = string.Empty;
            double num4 = 0.0;
            string str5 = string.Empty;
            double num5 = 0.0;
            string str6 = string.Empty;
            double num6 = 0.0;
            string str7 = string.Empty;
            double num7 = 0.0;
            string str8 = string.Empty;
            double num8 = 0.0;
            string str9 = string.Empty;
            double num9 = 0.0;
            string str10 = string.Empty;
            double num10 = 0.0;
            string str11 = string.Empty;
            double num11 = 0.0;
            XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            int num12;
            if (xdocument.Element((XName)"Settings").Element((XName)"Skrull") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Skrull").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Skrull").Value)).TotalMinutes <= 180.0)
                    num1 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Skrull").Value)).TotalMinutes;
                if (num1 <= 1.0 && num1 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Skrull").Value)).TotalSeconds);
                    str1 = num12.ToString() + " seconds";
                }
                else if (num1 <= 60.0 && num1 != 0.0)
                    str1 = ((int)num1).ToString() + " mins";
                else if (num1 >= 60.0)
                    str1 = ((int)Math.Floor(num1 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num1 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Captain") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Captain").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Captain").Value)).TotalMinutes <= 180.0)
                    num2 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Captain").Value)).TotalMinutes;
                if (num2 <= 1.0 && num2 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Captain").Value)).TotalSeconds);
                    str2 = num12.ToString() + " seconds";
                }
                else if (num2 <= 60.0 && num2 != 0.0)
                    str2 = ((int)num2).ToString() + " mins";
                else if (num2 >= 60.0)
                    str2 = ((int)Math.Floor(num2 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num2 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Blob1") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob1").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob1").Value)).TotalMinutes <= 180.0)
                    num3 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob1").Value)).TotalMinutes;
                if (num3 <= 1.0 && num3 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob1").Value)).TotalSeconds);
                    str3 = num12.ToString() + " seconds";
                }
                else if (num3 <= 60.0 && num3 != 0.0)
                    str3 = ((int)num3).ToString() + " mins";
                else if (num3 >= 60.0)
                    str3 = ((int)Math.Floor(num3 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num3 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Blob2") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob2").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob2").Value)).TotalMinutes <= 180.0)
                    num4 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob2").Value)).TotalMinutes;
                if (num4 <= 1.0 && num4 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Blob2").Value)).TotalSeconds);
                    str4 = num12.ToString() + " seconds";
                }
                else if (num4 <= 60.0 && num4 != 0.0)
                    str4 = ((int)num4).ToString() + " mins";
                else if (num4 >= 60.0)
                    str4 = ((int)Math.Floor(num4 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num4 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Mass") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mass").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mass").Value)).TotalMinutes <= 180.0)
                    num5 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mass").Value)).TotalMinutes;
                if (num5 <= 1.0 && num5 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mass").Value)).TotalSeconds);
                    str5 = num12.ToString() + " seconds";
                }
                else if (num5 <= 60.0 && num5 != 0.0)
                    str5 = ((int)num5).ToString() + " mins";
                else if (num5 >= 60.0)
                    str5 = ((int)Math.Floor(num5 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num5 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Gan") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Gan").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Gan").Value)).TotalMinutes <= 180.0)
                    num6 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Gan").Value)).TotalMinutes;
                if (num6 <= 1.0 && num6 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Gan").Value)).TotalSeconds);
                    str6 = num12.ToString() + " seconds";
                }
                else if (num6 <= 60.0 && num6 != 0.0)
                    str6 = ((int)num6).ToString() + " mins";
                else if (num6 >= 60.0)
                    str6 = ((int)Math.Floor(num6 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num6 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Morg") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Morg").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Morg").Value)).TotalMinutes <= 180.0)
                    num7 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Morg").Value)).TotalMinutes;
                if (num7 <= 1.0 && num7 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Morg").Value)).TotalSeconds);
                    str7 = num12.ToString() + " seconds";
                }
                else if (num7 <= 60.0 && num7 != 0.0)
                    str7 = ((int)num7).ToString() + " mins";
                else if (num7 >= 60.0)
                    str7 = ((int)Math.Floor(num7 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num7 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen").Value)).TotalMinutes <= 180.0)
                    num8 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen").Value)).TotalMinutes;
                if (num8 <= 1.0 && num8 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"VeltainQueen").Value)).TotalSeconds);
                    str8 = num12.ToString() + " seconds";
                }
                else if (num8 <= 60.0 && num8 != 0.0)
                    str8 = ((int)num8).ToString() + " mins";
                else if (num8 >= 60.0)
                    str8 = ((int)Math.Floor(num8 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num8 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"KingQueen") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"KingQueen").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"KingQueen").Value)).TotalMinutes <= 180.0)
                    num9 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"KingQueen").Value)).TotalMinutes;
                if (num9 <= 1.0 && num9 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"KingQueen").Value)).TotalSeconds);
                    str9 = num12.ToString() + " seconds";
                }
                else if (num9 <= 60.0 && num9 != 0.0)
                    str9 = ((int)num9).ToString() + " mins";
                else if (num9 >= 60.0)
                    str9 = ((int)Math.Floor(num9 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num9 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"AssassinLord") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AssassinLord").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AssassinLord").Value)).TotalMinutes <= 180.0)
                    num10 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AssassinLord").Value)).TotalMinutes;
                if (num10 <= 1.0 && num10 != 0.0)
                {
                    num12 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AssassinLord").Value)).TotalSeconds);
                    str10 = num12.ToString() + " seconds";
                }
                else if (num10 <= 60.0 && num10 != 0.0)
                    str10 = ((int)num10).ToString() + " mins";
                else if (num10 >= 60.0)
                    str10 = ((int)Math.Floor(num10 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num10 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Law") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Law").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Law").Value)).TotalMinutes <= 60.0)
                    num11 = 60.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Law").Value)).TotalMinutes;
                if (num11 <= 1.0 && num11 != 0.0)
                {
                    num12 = (int)(3600.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Law").Value)).TotalSeconds);
                    str11 = num12.ToString() + " seconds";
                }
                else if (num11 <= 60.0 && num11 != 0.0)
                    str11 = ((int)num11).ToString() + " mins";
            }
            string text = "                  ~Boss Log~\n            (time till next summon)";
            if (str1 != string.Empty)
                text = text + "\nSkrull  : " + str1;
            if (str2 != string.Empty)
                text = text + "\nCaptain : " + str2;
            if (str3 != string.Empty)
                text = text + "\nBlob 1  : " + str3;
            if (str4 != string.Empty)
                text = text + "\nBlob 2  : " + str4;
            if (str5 != string.Empty)
                text = text + "\nMass    : " + str5;
            if (str6 != string.Empty)
                text = text + "\nGan   : " + str6;
            if (str7 != string.Empty)
                text = text + "\nMorg  : " + str7;
            if (str8 != string.Empty)
                text = text + "\nQueen : " + str8;
            if (str9 != string.Empty)
                text = text + "\nKing & Queen  : " + str9;
            if (str10 != string.Empty)
                text = text + "\nAssassin Lord : " + str10;
            if (str11 != string.Empty)
                text = text + "\nLaw           : " + str11;
            this.SendMessage(text, (byte)8, false);
        }

        public void LoadRepeatQuests()
        {
            string str1 = string.Empty;
            double num1 = 0.0;
            string str2 = string.Empty;
            double num2 = 0.0;
            string str3 = string.Empty;
            double num3 = 0.0;
            string str4 = string.Empty;
            double num4 = 0.0;
            string str5 = string.Empty;
            double num5 = 0.0;
            string str6 = string.Empty;
            double num6 = 0.0;
            string str7 = string.Empty;
            double num7 = 0.0;
            string str8 = string.Empty;
            double num8 = 0.0;
            string str9 = string.Empty;
            double num9 = 0.0;
            string str10 = string.Empty;
            double num10 = 0.0;
            string str11 = string.Empty;
            double num11 = 0.0;
            string str12 = string.Empty;
            double num12 = 0.0;
            string str13 = string.Empty;
            double num13 = 0.0;
            string str14 = string.Empty;
            double num14 = 0.0;
            string str15 = string.Empty;
            double num15 = 0.0;
            string str16 = string.Empty;
            double num16 = 0.0;
            string str17 = string.Empty;
            double num17 = 0.0;
            string str18 = string.Empty;
            double num18 = 0.0;
            string str19 = string.Empty;
            double num19 = 0.0;
            string str20 = string.Empty;
            double num20 = 0.0;
            string str21 = string.Empty;
            double num21 = 0.0;
            string str22 = string.Empty;
            double num22 = 0.0;
            string str23 = string.Empty;
            double num23 = 0.0;
            XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            int num24;
            if (xdocument.Element((XName)"Settings").Element((XName)"Penguins") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Penguins").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Penguins").Value)).TotalMinutes <= 7200.0)
                    num2 = 7200.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Penguins").Value)).TotalMinutes;
                if (num2 <= 1.0 && num2 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Penguins").Value)).TotalSeconds);
                    str2 = num24.ToString() + " seconds";
                }
                else if (num2 <= 60.0 && num2 != 0.0)
                    str2 = ((int)num2).ToString() + " mins";
                else if (num2 >= 1440.0)
                    str2 = ((int)Math.Floor(num2 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num2 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num2 % 60.0) + " mins";
                else if (num2 >= 60.0)
                    str2 = ((int)Math.Floor(num2 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num2 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Rudolph") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Rudolph").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Rudolph").Value)).TotalMinutes <= 7200.0)
                    num1 = 7200.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Rudolph").Value)).TotalMinutes;
                if (num1 <= 1.0 && num1 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Rudolph").Value)).TotalSeconds);
                    str1 = num24.ToString() + " seconds";
                }
                else if (num1 <= 60.0 && num1 != 0.0)
                    str1 = ((int)num1).ToString() + " mins";
                else if (num1 >= 1440.0)
                    str1 = ((int)Math.Floor(num1 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num1 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num1 % 60.0) + " mins";
                else if (num1 >= 60.0)
                    str1 = ((int)Math.Floor(num1 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num1 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"TheLetter") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"TheLetter").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"TheLetter").Value)).TotalMinutes <= 5760.0)
                    num3 = 5760.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"TheLetter").Value)).TotalMinutes;
                if (num3 <= 1.0 && num3 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"TheLetter").Value)).TotalSeconds);
                    str3 = num24.ToString() + " seconds";
                }
                else if (num3 <= 60.0 && num3 != 0.0)
                    str3 = ((int)num3).ToString() + " mins";
                else if (num8 >= 1440.0)
                    str8 = ((int)Math.Floor(num8 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num8 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num8 % 60.0) + " mins";
                else if (num3 >= 60.0)
                    str3 = ((int)Math.Floor(num3 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num3 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"YuleQuest") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"YuleQuest").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"YuleQuest").Value)).TotalMinutes <= 4320.0)
                    num23 = 4320.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"YuleQuest").Value)).TotalMinutes;
                if (num23 <= 1.0 && num23 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"YuleQuest").Value)).TotalSeconds);
                    str23 = num24.ToString() + " seconds";
                }
                else if (num23 <= 60.0 && num23 != 0.0)
                    str23 = ((int)num23).ToString() + " mins";
                else if (num23 >= 1440.0)
                    str23 = ((int)Math.Floor(num23 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num23 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num23 % 60.0) + " mins";
                else if (num23 >= 60.0)
                    str23 = ((int)Math.Floor(num23 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num23 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Mentored") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mentored").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mentored").Value)).TotalMinutes <= 10080.0)
                    num22 = 10080.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mentored").Value)).TotalMinutes;
                if (num22 <= 1.0 && num22 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Mentored").Value)).TotalSeconds);
                    str22 = num24.ToString() + " seconds";
                }
                else if (num22 <= 60.0 && num22 != 0.0)
                    str22 = ((int)num22).ToString() + " mins";
                else if (num22 >= 1440.0)
                    str22 = ((int)Math.Floor(num22 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num22 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num22 % 60.0) + " mins";
                else if (num22 >= 60.0)
                    str22 = ((int)Math.Floor(num22 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num22 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Labor") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Labor").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Labor").Value)).TotalMinutes <= 720.0)
                    num4 = 720.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Labor").Value)).TotalMinutes;
                if (num4 <= 1.0 && num4 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Labor").Value)).TotalSeconds);
                    str4 = num24.ToString() + " seconds";
                }
                else if (num4 <= 60.0 && num4 != 0.0)
                    str4 = ((int)num4).ToString() + " mins";
                else if (num4 >= 60.0)
                    str4 = ((int)Math.Floor(num4 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num4 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn").Value)).TotalMinutes <= 180.0)
                    num19 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn").Value)).TotalMinutes;
                if (num19 <= 1.0 && num19 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"FilthyErbieTurnIn").Value)).TotalSeconds);
                    str19 = num24.ToString() + " seconds";
                }
                else if (num19 <= 60.0 && num19 != 0.0)
                    str19 = ((int)num19).ToString() + " mins";
                else if (num19 >= 60.0)
                    str19 = ((int)Math.Floor(num19 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num19 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn").Value)).TotalMinutes <= 180.0)
                    num18 = 180.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn").Value)).TotalMinutes;
                if (num18 <= 1.0 && num18 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PigChaseTurnIn").Value)).TotalSeconds);
                    str18 = num24.ToString() + " seconds";
                }
                else if (num18 <= 60.0 && num18 != 0.0)
                    str18 = ((int)num18).ToString() + " mins";
                else if (num18 >= 60.0)
                    str18 = ((int)Math.Floor(num18 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num18 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Clover") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Clover").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Clover").Value)).TotalMinutes <= 7200.0)
                    num9 = 7200.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Clover").Value)).TotalMinutes;
                if (num9 <= 1.0 && num9 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Clover").Value)).TotalSeconds);
                    str9 = num24.ToString() + " seconds";
                }
                else if (num9 <= 60.0 && num9 != 0.0)
                    str9 = ((int)num9).ToString() + " mins";
                else if (num9 >= 1440.0)
                    str9 = ((int)Math.Floor(num9 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num9 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num9 % 60.0) + " mins";
                else if (num9 >= 60.0)
                    str9 = ((int)Math.Floor(num9 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num9 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish").Value)).TotalMinutes <= 7200.0)
                    num10 = 7200.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish").Value)).TotalMinutes;
                if (num10 <= 1.0 && num10 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"GoldStarfish").Value)).TotalSeconds);
                    str10 = num24.ToString() + " seconds";
                }
                else if (num10 <= 60.0 && num10 != 0.0)
                    str10 = ((int)num10).ToString() + " mins";
                else if (num10 >= 1440.0)
                    str10 = ((int)Math.Floor(num10 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num10 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num10 % 60.0) + " mins";
                else if (num10 >= 60.0)
                    str10 = ((int)Math.Floor(num10 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num10 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Frog") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Frog").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Frog").Value)).TotalMinutes <= 10080.0)
                    num11 = 10080.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Frog").Value)).TotalMinutes;
                if (num11 <= 1.0 && num11 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Frog").Value)).TotalSeconds);
                    str11 = num24.ToString() + " seconds";
                }
                else if (num11 <= 60.0 && num11 != 0.0)
                    str11 = ((int)num11).ToString() + " mins";
                else if (num11 >= 1440.0)
                    str11 = ((int)Math.Floor(num11 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num11 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num11 % 60.0) + " mins";
                else if (num11 >= 60.0)
                    str11 = ((int)Math.Floor(num11 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num11 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"Spore") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Spore").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Spore").Value)).TotalMinutes <= 10080.0)
                    num12 = 10080.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Spore").Value)).TotalMinutes;
                if (num12 <= 1.0 && num12 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Spore").Value)).TotalSeconds);
                    str12 = num24.ToString() + " seconds";
                }
                else if (num12 <= 60.0 && num12 != 0.0)
                    str12 = ((int)num12).ToString() + " mins";
                else if (num12 >= 1440.0)
                    str12 = ((int)Math.Floor(num12 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num12 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num12 % 60.0) + " mins";
                else if (num12 >= 60.0)
                    str12 = ((int)Math.Floor(num12 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num12 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"CursedHome") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"CursedHome").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"CursedHome").Value)).TotalMinutes <= 20160.0)
                    num13 = 20160.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"CursedHome").Value)).TotalMinutes;
                if (num13 <= 1.0 && num13 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"CursedHome").Value)).TotalSeconds);
                    str13 = num24.ToString() + " seconds";
                }
                else if (num13 <= 60.0 && num13 != 0.0)
                    str13 = ((int)num13).ToString() + " mins";
                else if (num13 >= 1440.0)
                    str13 = ((int)Math.Floor(num13 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num13 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num13 % 60.0) + " mins";
                else if (num13 >= 60.0)
                    str13 = ((int)Math.Floor(num13 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num13 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon").Value)).TotalMinutes <= 10080.0)
                    num14 = 10080.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon").Value)).TotalMinutes;
                if (num14 <= 1.0 && num14 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WaterDungeon").Value)).TotalSeconds);
                    str14 = num24.ToString() + " seconds";
                }
                else if (num14 <= 60.0 && num14 != 0.0)
                    str14 = ((int)num14).ToString() + " mins";
                else if (num14 >= 1440.0)
                    str14 = ((int)Math.Floor(num14 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num14 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num14 % 60.0) + " mins";
                else if (num14 >= 60.0)
                    str14 = ((int)Math.Floor(num14 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num14 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"WDChest") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WDChest").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WDChest").Value)).TotalMinutes <= 2880.0)
                    num15 = 2880.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WDChest").Value)).TotalMinutes;
                if (num15 <= 1.0 && num15 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"WDChest").Value)).TotalSeconds);
                    str15 = num24.ToString() + " seconds";
                }
                else if (num15 <= 60.0 && num15 != 0.0)
                    str15 = ((int)num15).ToString() + " mins";
                else if (num15 >= 1440.0)
                    str15 = ((int)Math.Floor(num15 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num15 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num15 % 60.0) + " mins";
                else if (num15 >= 60.0)
                    str15 = ((int)Math.Floor(num15 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num15 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"OrenFountain") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"OrenFountain").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"OrenFountain").Value)).TotalMinutes <= 262974.383)
                    num16 = 262974.383 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"OrenFountain").Value)).TotalMinutes;
                if (num16 <= 1.0 && num16 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"OrenFountain").Value)).TotalSeconds);
                    str16 = num24.ToString() + " seconds";
                }
                else if (num16 <= 60.0 && num16 != 0.0)
                    str16 = ((int)num16).ToString() + " mins";
                else if (num16 >= 1440.0)
                    str16 = ((int)Math.Floor(num16 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num16 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num16 % 60.0) + " mins";
                else if (num16 >= 60.0)
                    str16 = ((int)Math.Floor(num16 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num16 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"PerfectHair") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PerfectHair").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PerfectHair").Value)).TotalMinutes <= 10080.0)
                    num17 = 10080.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PerfectHair").Value)).TotalMinutes;
                if (num17 <= 1.0 && num17 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"PerfectHair").Value)).TotalSeconds);
                    str17 = num24.ToString() + " seconds";
                }
                else if (num17 <= 60.0 && num17 != 0.0)
                    str17 = ((int)num17).ToString() + " mins";
                else if (num17 >= 1440.0)
                    str17 = ((int)Math.Floor(num17 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num17 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num17 % 60.0) + " mins";
                else if (num17 >= 60.0)
                    str17 = ((int)Math.Floor(num17 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num17 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"AndorChest") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AndorChest").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AndorChest").Value)).TotalMinutes <= 2880.0)
                    num20 = 2880.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AndorChest").Value)).TotalMinutes;
                if (num20 <= 1.0 && num20 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AndorChest").Value)).TotalSeconds);
                    str20 = num24.ToString() + " seconds";
                }
                else if (num20 <= 60.0 && num20 != 0.0)
                    str20 = ((int)num20).ToString() + " mins";
                else if (num20 >= 1440.0)
                    str20 = ((int)Math.Floor(num20 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num20 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num20 % 60.0) + " mins";
                else if (num20 >= 60.0)
                    str20 = ((int)Math.Floor(num20 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num20 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"QueenChest") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"QueenChest").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"QueenChest").Value)).TotalMinutes <= 2880.0)
                    num21 = 2880.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"QueenChest").Value)).TotalMinutes;
                if (num21 <= 1.0 && num21 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"QueenChest").Value)).TotalSeconds);
                    str21 = num24.ToString() + " seconds";
                }
                else if (num21 <= 60.0 && num21 != 0.0)
                    str21 = ((int)num21).ToString() + " mins";
                else if (num21 >= 1440.0)
                    str21 = ((int)Math.Floor(num21 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num21 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num21 % 60.0) + " mins";
                else if (num21 >= 60.0)
                    str21 = ((int)Math.Floor(num21 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num21 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift").Value)).TotalMinutes <= 4320.0)
                    num6 = 4320.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift").Value)).TotalMinutes;
                if (num6 <= 1.0 && num6 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MotherErbieGift").Value)).TotalSeconds);
                    str6 = num24.ToString() + " seconds";
                }
                else if (num6 <= 60.0 && num6 != 0.0)
                    str6 = ((int)num6).ToString() + " mins";
                else if (num6 >= 1440.0)
                    str6 = ((int)Math.Floor(num6 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num6 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num6 % 60.0) + " mins";
                else if (num6 >= 60.0)
                    str6 = ((int)Math.Floor(num6 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num6 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"AbGift") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbGift").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbGift").Value)).TotalMinutes <= 4320.0)
                    num7 = 4320.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbGift").Value)).TotalMinutes;
                if (num7 <= 1.0 && num7 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbGift").Value)).TotalSeconds);
                    str7 = num24.ToString() + " seconds";
                }
                else if (num7 <= 60.0 && num7 != 0.0)
                    str7 = ((int)num7).ToString() + " mins";
                else if (num7 >= 1440.0)
                    str7 = ((int)Math.Floor(num7 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num7 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num7 % 60.0) + " mins";
                else if (num7 >= 60.0)
                    str7 = ((int)Math.Floor(num7 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num7 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"AbBox") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbBox").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbBox").Value)).TotalMinutes <= 1440.0)
                    num8 = 1440.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbBox").Value)).TotalMinutes;
                if (num8 <= 1.0 && num8 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AbBox").Value)).TotalSeconds);
                    str8 = num24.ToString() + " seconds";
                }
                else if (num8 <= 60.0 && num8 != 0.0)
                    str8 = ((int)num8).ToString() + " mins";
                else if (num8 >= 1440.0)
                    str8 = ((int)Math.Floor(num8 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num8 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num8 % 60.0) + " mins";
                else if (num8 >= 60.0)
                    str8 = ((int)Math.Floor(num8 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num8 % 60.0) + " mins";
            }
            if (xdocument.Element((XName)"Settings").Element((XName)"MothersLove") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MothersLove").Value) != DateTime.MinValue)
            {
                if (DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MothersLove").Value)).TotalMinutes <= 1440.0)
                    num5 = 1440.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MothersLove").Value)).TotalMinutes;
                if (num5 <= 1.0 && num5 != 0.0)
                {
                    num24 = (int)(10800.0 - DateTime.Now.Subtract(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"MothersLove").Value)).TotalSeconds);
                    str5 = num24.ToString() + " seconds";
                }
                else if (num5 <= 60.0 && num5 != 0.0)
                    str5 = ((int)num5).ToString() + " mins";
                else if (num5 >= 1440.0)
                    str5 = ((int)Math.Floor(num5 / 1440.0)).ToString() + " days " + (object)(int)Math.Floor(num5 % 1440.0 / 60.0) + " hrs " + (object)(int)Math.Floor(num5 % 60.0) + " mins";
                else if (num5 >= 60.0)
                    str5 = ((int)Math.Floor(num5 / 60.0)).ToString() + " hrs " + (object)(int)Math.Floor(num5 % 60.0) + " mins";
            }
            string text = "                ~Repeat Quests~\n            (time till next turn in)";
            if (str4 != string.Empty)
                text = text + "\nLabor : " + str4;
            if (str5 != string.Empty)
                text = text + "\nMothers Love : " + str5;
            if (str3 != string.Empty)
                text = text + "\nThe Letter : " + str3;
            if (str19 != string.Empty)
                text = text + "\nFilthy Erbies : " + str19;
            if (str18 != string.Empty)
                text = text + "\nPig Chase     : " + str18;
            if (str23 != string.Empty)
                text = text + "\nYule Quest     : " + str23;
            if (str9 != string.Empty)
                text = text + "\nLucky Clover  : " + str9;
            if (str10 != string.Empty)
                text = text + "\nGold Starfish : " + str10;
            if (str11 != string.Empty)
                text = text + "\nFrog Set      : " + str11;
            if (str12 != string.Empty)
                text = text + "\nSpore Set     : " + str12;
            if (str13 != string.Empty)
                text = text + "\nCursed Home   : " + str13;
            if (str14 != string.Empty)
                text = text + "\nWater Dungeon : " + str14;
            if (str15 != string.Empty)
                text = text + "\nWD Chest : " + str15;
            if (str20 != string.Empty)
                text = text + "\nAndor Chest : " + str20;
            if (str21 != string.Empty)
                text = text + "\nQueen Chest : " + str21;
            if (str6 != string.Empty)
                text = text + "\nMEG : " + str6;
            if (str7 != string.Empty)
                text = text + "\nAb Gift : " + str7;
            if (str8 != string.Empty)
                text = text + "\nAb Box : " + str8;
            if (str16 != string.Empty)
                text = text + "\nOren Fountain : " + str16;
            if (str17 != string.Empty)
                text = text + "\nPerfect Hairstyle : " + str17;
            this.SendMessage(text, (byte)8, false);
        }

        public void LoadVariables()
        {
            XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\timedstuff.xml");
            if (xdocument.Element((XName)"Settings").Element((XName)"AntTunnels") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AntTunnels").Value) != DateTime.MinValue)
                this.anttunnel = Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AntTunnels").Value);
            if (xdocument.Element((XName)"Settings").Element((XName)"GuardianAntTunnels") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"GuardianAntTunnels").Value) != DateTime.MinValue)
                this.guardiananttunnel = Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"GuardianAntTunnels").Value);
            if (xdocument.Element((XName)"Settings").Element((XName)"AscendTime") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AscendTime").Value) != DateTime.MinValue)
                this.ascendtime = Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"AscendTime").Value);
            if (xdocument.Element((XName)"Settings").Element((XName)"Labor") != null && Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Labor").Value) != DateTime.MinValue)
                this.labortime = Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Labor").Value);
            if (xdocument.Element((XName)"Settings").Element((XName)"Altar") == null || !(Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Altar").Value) != DateTime.MinValue))
                return;
            this.altartimer = Convert.ToDateTime(xdocument.Element((XName)"Settings").Element((XName)"Altar").Value);
        }

        public int WalkSpeed(bool forcemedium = false)
        {
            int num = 430;
            if (this.ClientForm != (ushort)0)
            {
                switch (this.ClientForm)
                {
                    case 16385:
                        num = 180;
                        break;
                    case 16436:
                        num = 220;
                        break;
                    case 16437:
                        num = 220;
                        break;
                    case 16439:
                        num = 180;
                        break;
                    case 16471:
                        num = 220;
                        break;
                    case 16484:
                        num = 260;
                        break;
                    case 16696:
                        num = 180;
                        break;
                }
            }
            if (this.SafeToWalkFast)
            {
                if (forcemedium && this.Tab.vwalksettings < 260)
                    return 260;
                if (num > this.Tab.vwalksettings)
                    num = this.Tab.vwalksettings;
            }
            if (this.MapInfo.Number == 10180)
                num = 430;
            return num;
        }

        public bool InALegitForm()
        {
            return (int)this.ClientForm - 16384 == 433;
        }

        public void Refresh()
        {
            User32._SendKeys(this.mainProc.MainWindowHandle, "F5");
            this.refreshdelay = DateTime.UtcNow;
        }

        public void RefreshAllClients()
        {
            foreach (Client client in Server.Alts.Values.ToArray<Client>())
            {
                if (client != null && client.Name != string.Empty)
                    client.Refresh();
            }
        }

        public bool AlarmMapAllowList
        {
            get
            {
                foreach (object obj in Program.MainForm.AlarmMapsList.Items)
                {
                    if (char.IsNumber(obj.ToString(), 0))
                    {
                        if ((long)this.MapInfo.Number == (long)uint.Parse(obj.ToString()))
                            return false;
                    }
                    else
                    {
                        if (this.MapInfo.Name == "Pravat South Entrance" || (this.MapInfo.Name == "Mount Giragan 1" || this.MapInfo.Name == "Mount Giragan 2" || this.MapInfo.Name == "Mount Giragan 3" || this.MapInfo.Number == 3635) || (this.MapInfo.Number == 3634 && !Program.MainForm.AlarmMapsList.Items.Contains((object)"chaos 1") && !Program.MainForm.AlarmMapsList.Items.Contains((object)"Chaos 1") || this.MapInfo.Number == 10101 || (this.MapInfo.Number == 10180 && !Program.MainForm.AlarmMapsList.Items.Contains((object)"andor 80") && !Program.MainForm.AlarmMapsList.Items.Contains((object)"Andor 80") || this.MapInfo.Number == 8995 || (this.MapInfo.Number == 2901 || this.MapInfo.Number == 542))))
                            return true;
                        if (this.MapInfo.Name.ToLower().Contains(obj.ToString().ToLower()))
                            return false;
                    }
                }
                return true;
            }
        }

        public void FriendListUpdate()
        {
            if (this == null || !this.Loaded || this.Tab == null)
                return;
            this.UseMonsterForm();
        }

        public bool NeedsIdentified(int slot)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.InventorySlot == slot)
                    return !obj.IsIdentified && (Server.NeedsIdentifiedList.Contains(obj.Name) || Server.IdentifyItems.Contains(obj.Name.ToLower()));
            }
            return false;
        }

        public bool NeedsIdentified(Npc item)
        {
            return !item.IsIdentified && (Server.NeedsIdentifiedList.Contains(item.Name) || Server.IdentifyItems.Contains(item.Name.ToLower()));
        }

        public bool NeedsIdentified(Item item)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && item.InventorySlot == obj.InventorySlot && obj.IsIdentified)
                    return false;
            }
            return Server.NeedsIdentifiedList.Contains(item.Name) || Server.IdentifyItems.Contains(item.Name.ToLower());
        }

        public void AutoDeposit(string name)
        {
            if (this.swappingitem || this.ItemSlot(this.firstitemslot) != 1)
                return;
            if (this.MapInfo.Name.Contains("Storage") || this.MapInfo.Name.Contains("Rucesion Empty Room 1") || this.MapInfo.Name.Contains("Bank"))
            {
                foreach (Item obj in this.Inventory)
                {
                    if (obj != null && obj.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                        this.Deposit(name, (int)this.ItemCount(name));
                }
            }
            else if (this.Tab.haxdeposit.Checked && this.SafeToWalkFast)
            {
                uint num = 0;
                Npc[] npcArray = this.NearbyNpcs(Npc.NpcType.Mundane);
                if (((IEnumerable<Npc>)npcArray).Count<Npc>() > 0)
                {
                    foreach (Npc npc in npcArray)
                    {
                        if (npc != null && npc.IsOnScreen)
                        {
                            num = npc.ID;
                            break;
                        }
                    }
                }
                int inventorySlot;
                if (num != 0U)
                {
                    foreach (Item obj in this.Inventory)
                    {
                        if (obj != null && obj.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            if (this.SafeToWalkFast)
                            {
                                if (obj.Amount > 1U)
                                {
                                    uint? npccode = new uint?(num);
                                    object[] objArray1 = new object[5]
                                    {
                    (object) "Deposit ",
                    null,
                    null,
                    null,
                    null
                                    };
                                    object[] objArray2 = objArray1;
                                    inventorySlot = obj.InventorySlot;
                                    string str = inventorySlot.ToString();
                                    objArray2[1] = (object)str;
                                    objArray1[2] = (object)" [";
                                    objArray1[3] = (object)obj.Amount;
                                    objArray1[4] = (object)"]";
                                    string type = string.Concat(objArray1);
                                    this.DialogueRespond(npccode, type);
                                    this.PopupClose(new uint?(num), (byte)1);
                                    Thread.Sleep(1100);
                                }
                                else
                                {
                                    uint? npccode = new uint?(num);
                                    inventorySlot = obj.InventorySlot;
                                    string type = "Deposit " + inventorySlot.ToString();
                                    this.DialogueRespond(npccode, type);
                                    this.PopupClose(new uint?(num), (byte)1);
                                    Thread.Sleep(1100);
                                }
                            }
                            else
                                break;
                        }
                    }
                }
            }
        }

        public void LootItems()
        {
            if (this.InventoryIsFull())
                return;
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)this.ItemsWithinReach()).OrderBy<Npc, int>((Func<Npc, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (!npc.Looted && this.ServerLocation.WithinSquare(npc.Location, 2)) && !this.NonAltAtLocation(npc.Location.X, npc.Location.Y) && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.lootdelaya.Value, (int)this.Tab.lootdelayb.Value) ? 1 : 0) : 1) != 0)
                {
                    if (!this.pause)
                    {
                        if (this.giantpearl && ((npc.Image == 17344 || npc.Image == 17348) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Custom #s"))
                        {
                            foreach (int num in Server.CustomLoot)
                            {
                                if (num == npc.Image - 16384 && !this.ItemStackFull(npc.Image, 1U))
                                    this.Pickup(npc.Location.X, npc.Location.Y);
                            }
                        }
                        if (this.Tab.vlootlocale.Equals("Everything") && !this.ItemStackFull(npc.Image, 1U))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Event"))
                        {
                            if (npc.Image == 18707 || npc.Image == 17835 || npc.Image == 17986 && npc.Color == (byte)41 || npc.Image == 28362 || npc.Image == 17857)
                            {
                                if (!this.ItemStackFull(npc.Image, 1U))
                                    this.Pickup(npc.Location.X, npc.Location.Y);
                            }
                            else if ((npc.Image == 24509 || npc.Image == 24528 || (npc.Image == 24527 || npc.Image == 24526) || (npc.Image == 24525 || npc.Image == 24524 || (npc.Image == 24523 || npc.Image == 24522)) || (npc.Image == 24521 || npc.Image == 24520 || (npc.Image == 24519 || npc.Image == 24518) || (npc.Image == 24517 || npc.Image == 24516 || (npc.Image == 24515 || npc.Image == 24514))) || (npc.Image == 24513 || npc.Image == 24512 || npc.Image == 24510) || npc.Image == 24511) && !this.ItemStackFull(npc.Image, 10U))
                                this.Pickup(npc.Location.X, npc.Location.Y);
                        }
                        if (this.Tab.vlootlocale.Equals("Pyramid") && ((npc.Image == 17937 || npc.Image == 17856 || npc.Image == 18779 || npc.Image == 17857) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Desert Dunes") && ((npc.Image == 18592 || npc.Image == 18469 || npc.Image == 16524) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Noam") && ((npc.Image == 17877 || npc.Image == 17888) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Blossom Garden") && npc.Image == 18613 && !this.ItemStackFull(npc.Image, 1U))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Lost Ruins") && ((npc.Image == 17772 || npc.Image == 21712 || (npc.Image == 21978 || npc.Image == 21977) || (npc.Image == 18662 || npc.Image == 18482 || (npc.Image == 16731 || npc.Image == 18458)) || (npc.Image == 18618 || npc.Image == 18457 || (npc.Image == 18463 || npc.Image == 17945) || (npc.Image == 17786 || npc.Image == 16698 || npc.Image == 16725)) || npc.Image == 18594) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Andor") && ((npc.Image == 18165 || npc.Image == 17738 || (npc.Image == 18405 || npc.Image == 18377) || (npc.Image == 18393 || npc.Image == 18321 || (npc.Image == 18337 || npc.Image == 18722)) || (npc.Image == 18349 || npc.Image == 18356 || (npc.Image == 18359 || npc.Image == 18331) || (npc.Image == 18348 || npc.Image == 18335 || (npc.Image == 18418 || npc.Image == 18407))) || (npc.Image == 18383 || npc.Image == 18728 || (npc.Image == 18669 || npc.Image == 18671) || (npc.Image == 18673 || npc.Image == 18723 || (npc.Image == 17809 || npc.Image == 17808)) || (npc.Image == 17807 || npc.Image == 17806 || (npc.Image == 16524 || npc.Image == 18729) || (npc.Image == 18620 || npc.Image == 18444 || (npc.Image == 18780 || npc.Image == 18781)))) || npc.Image == 18724 || npc.Image == 18725) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if ((npc.Image == 16525 || npc.Image == 16524 || npc.Image == 16521) && !this.ItemStackFull(npc.Image, 1U))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Veltain Mines") && npc.Image == 17860 && !this.ItemStackFull(npc.Image, 1U))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Aman Jungle") && ((npc.Image == 17934 || npc.Image == 17932 || (npc.Image == 19584 || npc.Image == 19794) || npc.Image == 20377 || npc.Image == 21174) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                        if (this.Tab.vlootlocale.Equals("Shinewood Fruits") && ((npc.Image == 17882 || npc.Image == 17879 || (npc.Image == 16719 || npc.Image == 17866) || npc.Image == 17887 || npc.Image == 17871) && !this.ItemStackFull(npc.Image, 1U)))
                            this.Pickup(npc.Location.X, npc.Location.Y);
                    }
                    else
                        break;
                }
            }
        }

        public void DropItems(string name)
        {
            if (this.swappingitem || this.ItemSlot(this.firstitemslot) != 1)
                return;
            foreach (Item obj1 in this.Inventory)
            {
                if (obj1 != null && obj1.Name.ToLower().Equals(name.ToLower()))
                {
                    if (this.Tab.recorditemdata.Checked)
                    {
                        if ((Server.NeedsIdentifiedList.Contains(obj1.Name) ? (obj1.IsIdentified ? 1 : 0) : 1) != 0)
                            this.Drop(this.ServerLocation.X, this.ServerLocation.Y, obj1.InventorySlot, (int)obj1.Amount);
                    }
                    else if (obj1.Name.Equals("Light Belt") || obj1.Name.Contains("Amber Necklace"))
                    {
                        int num = 1;
                        foreach (Item obj2 in this.Inventory)
                        {
                            if (obj2 != null && obj2.Name.ToLower().Equals(name.ToLower()) && obj2.InventorySlot != obj1.InventorySlot)
                                ++num;
                        }
                        if (num > 1)
                            this.Drop(this.ServerLocation.X, this.ServerLocation.Y, obj1.InventorySlot, (int)obj1.Amount);
                    }
                    else
                    {
                        Npc npc = this.NearestItem();
                        if (npc == null || !npc.IsOnScreen || (this.ServerLocation.X != npc.Location.X || this.ServerLocation.Y != npc.Location.Y))
                        {
                            this.Drop(this.ServerLocation.X, this.ServerLocation.Y, obj1.InventorySlot, (int)obj1.Amount);
                            this.lastdroploc = new Location(this.ServerLocation.X, this.ServerLocation.Y);
                            this.lastdroptime = DateTime.UtcNow;
                        }
                    }
                }
            }
        }

        public void BuyItem(string name, uint num)
        {
            name = name.ToLower();
            for (int index = 0; (long)index < (long)num; ++index)
                this.SkillSpellCaption("I buy " + (object)char.ToUpper(name[0]) + name.Substring(1));
        }

        public void Withdraw(string name, int num)
        {
            name = name.ToLower();
            int num1 = num / 3;
            int num2 = num % 3;
            string text = "Give my " + name + " back";
            string empty = string.Empty;
            if (name.Length > 19)
            {
                Npc npc = (Npc)null;
                if (this.MapInfo.Name.Equals("Abel Storage"))
                    npc = this.FindNpcByName<Npc>("Lamont");
                else if (this.MapInfo.Name.Equals("Mileth Storage"))
                    npc = this.FindNpcByName<Npc>("Cassidy");
                else if (this.MapInfo.Name.Equals("Rucesion Storage"))
                    npc = this.FindNpcByName<Npc>("Antonio");
                else if (this.MapInfo.Name.Equals("Tagor Storage"))
                    npc = this.FindNpcByName<Npc>("Cecil");
                else if (this.MapInfo.Name.Equals("Undine Storage"))
                    npc = this.FindNpcByName<Npc>("Argus");
                else if (this.MapInfo.Name.Equals("Piet Storage"))
                    npc = this.FindNpcByName<Npc>("Jilt");
                else if (this.MapInfo.Name.Equals("Rucesion Empty Room 1"))
                    npc = this.FindNpcByName<Npc>("Braz");
                else if (this.MapInfo.Name.Equals("Noam Bank"))
                    npc = this.FindNpcByName<Npc>("Kelan");
                else if (this.MapInfo.Name.Equals("Asilon Bank"))
                    npc = this.FindNpcByName<Npc>("Nulonna");
                if (npc == null || !npc.IsOnScreen)
                    return;
                if (num == 1)
                {
                    this.DialogueRespond(new uint?(npc.ID), "Withdraw " + name);
                    this.PopupRespond(new uint?(npc.ID), (ushort)0, (byte)69, (byte)0, (byte)1);
                }
                else if (Server.ItemList.ContainsKey(name))
                {
                    this.DialogueRespond(new uint?(npc.ID), "Withdraw " + name + " [" + Server.ItemList[name].MaxStack.ToString() + "]");
                    this.PopupRespond(new uint?(npc.ID), (ushort)0, (byte)69, (byte)0, (byte)1);
                }
                else
                {
                    int num3 = this.OpenSlotsCount();
                    for (int index = 0; index < num3; ++index)
                    {
                        this.DialogueRespond(new uint?(npc.ID), "Withdraw " + name);
                        this.PopupRespond(new uint?(npc.ID), (ushort)0, (byte)69, (byte)0, (byte)1);
                        Thread.Sleep(1100);
                    }
                    this.SendMessage("done withdrawing " + name, (byte)0, false);
                }
            }
            else
            {
                for (int index = 0; index < num; ++index)
                    this.SkillSpellCaption(text);
            }
        }

        public void Deposit(string name, int num)
        {
            name = name.ToLower();
            int num1 = num / 3;
            int num2 = num % 3;
            string text = "I will deposit " + name;
            string empty = string.Empty;
            if (name.Length <= 17 && !name.Contains(" fragment") && (!name.StartsWith("uncut ") && !name.StartsWith("flawed ")) && (!name.StartsWith("finished ") && !name.StartsWith("cail ") && (!name.StartsWith("luathas ") && !name.StartsWith("glioca "))) && (!name.StartsWith("fiosachd ") && !name.StartsWith("ceannlaidir ") && (!name.StartsWith("sgrios ") && !name.StartsWith("gramail ")) && (!name.StartsWith("deoch ") && !name.StartsWith("magic ") && (!name.StartsWith("might ") && !name.StartsWith("blessed ")))) && (!name.StartsWith("abundance ") && !name.StartsWith("fire ") && (!name.StartsWith("sea ") && !name.StartsWith("earth ")) && (!name.StartsWith("wind ") && !name.StartsWith("good ") && (!name.StartsWith("fine ") && !name.StartsWith("grand ")))) && !name.StartsWith("great "))
            {
                for (int index = 0; index < num; ++index)
                    this.SkillSpellCaption(text);
            }
            else
            {
                foreach (Item obj in this.Inventory)
                {
                    if (obj != null && obj.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                    {
                        Npc npc = (Npc)null;
                        if (this.MapInfo.Name.Equals("Abel Storage"))
                            npc = this.FindNpcByName<Npc>("Lamont");
                        else if (this.MapInfo.Name.Equals("Mileth Storage"))
                            npc = this.FindNpcByName<Npc>("Cassidy");
                        else if (this.MapInfo.Name.Equals("Rucesion Storage"))
                            npc = this.FindNpcByName<Npc>("Antonio");
                        else if (this.MapInfo.Name.Equals("Tagor Storage"))
                            npc = this.FindNpcByName<Npc>("Cecil");
                        else if (this.MapInfo.Name.Equals("Undine Storage"))
                            npc = this.FindNpcByName<Npc>("Argus");
                        else if (this.MapInfo.Name.Equals("Piet Storage"))
                            npc = this.FindNpcByName<Npc>("Jilt");
                        else if (this.MapInfo.Name.Equals("Rucesion Empty Room 1"))
                            npc = this.FindNpcByName<Npc>("Braz");
                        else if (this.MapInfo.Name.Equals("Noam Bank"))
                            npc = this.FindNpcByName<Npc>("Kelan");
                        else if (this.MapInfo.Name.Equals("Asilon Bank"))
                            npc = this.FindNpcByName<Npc>("Nulonna");
                        int inventorySlot;
                        if (npc != null && npc.IsOnScreen)
                        {
                            if (obj.Amount > 1U)
                            {
                                uint? npccode = new uint?(npc.ID);
                                object[] objArray1 = new object[5]
                                {
                  (object) "Deposit ",
                  null,
                  null,
                  null,
                  null
                                };
                                object[] objArray2 = objArray1;
                                inventorySlot = obj.InventorySlot;
                                string str = inventorySlot.ToString();
                                objArray2[1] = (object)str;
                                objArray1[2] = (object)" [";
                                objArray1[3] = (object)obj.Amount;
                                objArray1[4] = (object)"]";
                                string type = string.Concat(objArray1);
                                this.DialogueRespond(npccode, type);
                                this.PopupRespond(new uint?(npc.ID), (ushort)0, (byte)67, (byte)0, (byte)1);
                                Thread.Sleep(1100);
                            }
                            else if (!Server.ItemList.ContainsKey(name) && obj.Amount == 1U)
                            {
                                uint? npccode = new uint?(npc.ID);
                                inventorySlot = obj.InventorySlot;
                                string type = "Deposit " + inventorySlot.ToString();
                                this.DialogueRespond(npccode, type);
                                this.PopupRespond(new uint?(npc.ID), (ushort)0, (byte)67, (byte)0, (byte)1);
                                Thread.Sleep(1100);
                            }
                            else if (obj.Stackable == (byte)0)
                            {
                                uint? npccode = new uint?(npc.ID);
                                inventorySlot = obj.InventorySlot;
                                string type = "Deposit " + inventorySlot.ToString();
                                this.DialogueRespond(npccode, type);
                                this.PopupRespond(new uint?(npc.ID), (ushort)0, (byte)67, (byte)0, (byte)1);
                                Thread.Sleep(1100);
                            }
                        }
                    }
                }
            }
        }

        public void FollowReal(string name)
        {
            try
            {
                int num = 0;
                if ((this.Tab.vcastwhilefollow ? (!this.castingoneline ? 1 : 0) : 1) == 0 || (this.Tab.vactonlyinmobs ? (!this.Mobbed ? 1 : 0) : 1) == 0 || (this.MapInfo == null || !this.MapInfo.IsLoaded))
                    return;
                this.MapInfo.UpdateBlocks(this);
                Player characterByName = this.FindCharacterByName<Player>(name);
                if (characterByName != null && !this.NorajoBesideMe && (characterByName.IsOnScreen && !this.IsSurrounded(characterByName.Location)))
                {
                    if (this.LastLastSpot != null)
                        this.LastLastSpot = (Location)null;
                    if (DateTime.UtcNow.Subtract(this.laststep).TotalMilliseconds > 4000.0 && Server.Alts.ContainsKey(name.ToLower()) && (this.MapInfo.Number == Server.Alts[name.ToLower()].MapInfo.Number || this.MapInfo.Number == characterByName.Map && this.MapInfo.Number != Server.Alts[name.ToLower()].MapInfo.Number) && Server.Alts[name.ToLower()].DistanceFrom(this.ServerLocation) > 13)
                    {
                        this.Refresh();
                        Thread.Sleep(1300);
                        this.laststep = DateTime.UtcNow;
                    }
                    if (characterByName.DistanceFrom(this.ClientLocation) > 6)
                    {
                        this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, characterByName.Location.X, characterByName.Location.Y, false);
                        num = 6;
                    }
                }
            }
            catch
            {
            }
        }

        public void Follow(string name, int distance)
        {
            try
            {
                if (this.Tab.haltwalknonfriends.Checked && !this.SafeToWalkFast)
                    return;
                if ((this.Tab.vcastwhilefollow ? (!this.castingoneline ? 1 : 0) : 1) != 0 && (this.Tab.vactonlyinmobs ? (!this.Mobbed ? 1 : 0) : 1) != 0 && (this.MapInfo != null && this.MapInfo.IsLoaded))
                {
                    this.MapInfo.UpdateBlocks(this);
                    Player characterByName = this.FindCharacterByName<Player>(name);
                    if (characterByName != null && !this.NorajoBesideMe)
                    {
                        if (characterByName.IsOnScreen && !this.IsSurrounded(characterByName.Location))
                        {
                            if (this.LastLastSpot != null)
                                this.LastLastSpot = (Location)null;
                            if (DateTime.UtcNow.Subtract(this.laststep).TotalMilliseconds > 4000.0 && Server.Alts.ContainsKey(name.ToLower()) && (this.MapInfo.Number == Server.Alts[name.ToLower()].MapInfo.Number || this.MapInfo.Number == characterByName.Map && this.MapInfo.Number != Server.Alts[name.ToLower()].MapInfo.Number) && Server.Alts[name.ToLower()].DistanceFrom(this.ServerLocation) > 13)
                            {
                                this.Refresh();
                                Thread.Sleep(1300);
                                this.laststep = DateTime.UtcNow;
                            }
                            if (characterByName.DistanceFrom(this.ClientLocation) > distance)
                            {
                                Point[] path1 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, characterByName.Location.X, characterByName.Location.Y, false);
                                int num = distance;
                                if (path1.Length == 0 || path1.Length > characterByName.DistanceFrom(this.ServerLocation) * 2)
                                {
                                    this.keepcasting = false;
                                    Point point1 = new Point(0, 0);
                                    foreach (Point point2 in this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, characterByName.Location.X, characterByName.Location.Y, true))
                                    {
                                        if (point2 != null && point2.HasEntity)
                                        {
                                            point1 = point2;
                                            break;
                                        }
                                    }
                                    Point[] path2 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, point1.X, point1.Y, false);
                                    for (int index = 0; index < path2.Length - 1 && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.follow_walk != 1 && (!(this.StaffSwitchDelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.StaffSwitchDelay).TotalSeconds >= 0.8)) && ((!this.Tab.vactonlyinmobs || !this.Mobbed) && point1.DistanceFrom(this.ClientLocation) >= num && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101)) && (!this.pause && !this.pausewalk && !this.donotwalk && !this.disstopwalk && this.Tab.vfollowplayer && ((!this.Tab.vcastwhilefollow || !this.castingoneline) && path2[index].Passable && Math.Abs(this.ClientLocation.X - path2[index].X) + Math.Abs(this.ClientLocation.Y - path2[index].Y) == 1))); ++index)
                                    {
                                        Direction direction = this.ClientLocation - new Location(path2[index].X, path2[index].Y);
                                        if (direction != Direction.None)
                                        {
                                            this.Walk(direction);
                                            this.laststep = DateTime.UtcNow;
                                            if (this.MapInfo != null && this.MapInfo.IsLoaded)
                                                this.MapInfo.UpdateBlocks(this);
                                            Thread.Sleep(this.WalkSpeed(false));
                                            if (this.followmode != 1)
                                                this.followmode = 1;
                                        }
                                        else
                                            break;
                                    }
                                }
                                else
                                {
                                    this.keepcasting = false;
                                    for (int index = 0; index < path1.Length - (this.Characters.ContainsKey(characterByName.ID) ? num : 0) && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.follow_walk != 1 && (!(this.StaffSwitchDelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.StaffSwitchDelay).TotalSeconds >= 0.8 || this.DistanceFrom(characterByName.Location) <= 7)) && ((!this.Tab.vactonlyinmobs || !this.Mobbed) && !this.IsSurrounded(characterByName.Location) && characterByName.DistanceFrom(this.ClientLocation) >= num && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101)) && (!this.pause && !this.pausewalk && !this.donotwalk && !this.disstopwalk && this.Tab.vfollowplayer && (!this.Tab.vcastwhilefollow || !this.castingoneline || this.DistanceFrom(characterByName.Location) <= 7))) && (characterByName.IsOnScreen && characterByName != null && num != 0 && path1[index].Passable && Math.Abs(this.ClientLocation.X - path1[index].X) + Math.Abs(this.ClientLocation.Y - path1[index].Y) == 1); ++index)
                                    {
                                        Direction direction = this.ClientLocation - new Location(path1[index].X, path1[index].Y);
                                        if (direction != Direction.None)
                                        {
                                            this.Walk(direction);
                                            this.laststep = DateTime.UtcNow;
                                            this.MapInfo.UpdateBlocks(this);
                                            Thread.Sleep(this.WalkSpeed(false));
                                            if (this.followmode != 2)
                                                this.followmode = 2;
                                        }
                                        else
                                            break;
                                    }
                                }
                            }
                        }
                        else if (!characterByName.IsOnScreen && Server.Alts.ContainsKey(name.ToLower()) && this.MapInfo.Number == Server.Alts[name.ToLower()].MapInfo.Number)
                        {
                            if (this.LastLastSpot != null)
                                this.LastLastSpot = (Location)null;
                            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, Server.Alts[name.ToLower()].ServerLocation.X, Server.Alts[name.ToLower()].ServerLocation.Y, false);
                            for (int index = 0; index < path.Length && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.follow_walk != 1 && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101))) && (!this.pause && !this.pausewalk && !this.donotwalk && !this.disstopwalk && (this.Tab.vfollowplayer && this.MapInfo.Number == Server.Alts[name.ToLower()].MapInfo.Number) && (path[index].Passable && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1)); ++index)
                            {
                                Direction direction = this.ClientLocation - new Location(path[index].X, path[index].Y);
                                if (direction != Direction.None)
                                {
                                    this.Walk(direction);
                                    this.laststep = DateTime.UtcNow;
                                    if (this.MapInfo != null && this.MapInfo.IsLoaded)
                                        this.MapInfo.UpdateBlocks(this);
                                    Thread.Sleep(this.WalkSpeed(false));
                                    if (this.followmode != 3)
                                        this.followmode = 3;
                                }
                                else
                                    break;
                            }
                        }
                        else if (!characterByName.IsOnScreen && this.MapInfo.Number == characterByName.Map)
                        {
                            if (characterByName.Location != this.LastLastSpot)
                            {
                                this.LastLastSpot = characterByName.Location;
                                Thread.Sleep(this.RandomNumber(600, 800));
                                this.OpenCountryList();
                                Thread.Sleep(this.RandomNumber(600, 800));
                            }
                            if (this.CountryList.Contains(name.ToLower()))
                            {
                                if ((this.MapInfo.Name.Contains("Hostile") || this.MapInfo.Number == 8360 || this.MapInfo.Number == 8361) && (Server.Alts.ContainsKey(name.ToLower()) && this.MapInfo.Number != Server.Alts[name.ToLower()].MapInfo.Number) && this.AutoWalkMaps.ContainsKey(Server.Alts[name.ToLower()].MapInfo.Number))
                                {
                                    if (this.followmode != 4)
                                        this.followmode = 4;
                                    this.AutoWalkToAlt(Server.Alts[name.ToLower()].MapInfo.Number);
                                }
                                else
                                {
                                    Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, characterByName.Location.X, characterByName.Location.Y, false);
                                    if (path != null)
                                    {
                                        for (int index = 0; index < path.Length && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.follow_walk != 1 && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101))) && (!this.pause && !this.pausewalk && !this.donotwalk && !this.disstopwalk && (this.Tab.vfollowplayer && path[index].Passable) && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1); ++index)
                                        {
                                            Direction direction = this.ClientLocation - new Location(path[index].X, path[index].Y);
                                            if (direction != Direction.None)
                                            {
                                                this.Walk(direction);
                                                this.laststep = DateTime.UtcNow;
                                                if (this.MapInfo != null && this.MapInfo.IsLoaded)
                                                    this.MapInfo.UpdateBlocks(this);
                                                Thread.Sleep(this.WalkSpeed(false));
                                                if (this.followmode != 5)
                                                    this.followmode = 5;
                                            }
                                            else
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                        else if (!characterByName.IsOnScreen && Server.Alts.ContainsKey(name.ToLower()) && this.MapInfo.Number != Server.Alts[name.ToLower()].MapInfo.Number)
                        {
                            if (this.followmode != 6)
                                this.followmode = 6;
                            this.AutoWalkToAlt(Server.Alts[name.ToLower()].MapInfo.Number);
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public void SearchAllTiles(int xa, int xb, int ya, int yb)
        {
            if (!this.walkaround || this.MapInfo == null || !this.MapInfo.IsLoaded)
                return;
            Point point1 = (Point)null;
            this.checkedtiles.Add(this.ServerLocation.X.ToString() + "," + (object)this.ServerLocation.Y);
            int num1;
            foreach (Point surroundingPoint in this.MapInfo.SurroundingPoints(new Point(this.ClientLocation.X, this.ClientLocation.Y)))
            {
                int num2;
                if (surroundingPoint != null && surroundingPoint.X >= xa && (surroundingPoint.X <= xb && surroundingPoint.Y >= ya) && (surroundingPoint.Y <= yb && surroundingPoint.Passable))
                {
                    List<string> checkedtiles = this.checkedtiles;
                    num1 = surroundingPoint.X;
                    string str1 = num1.ToString();
                    num1 = surroundingPoint.Y;
                    string str2 = num1.ToString();
                    string str3 = str1 + "," + str2;
                    if (!checkedtiles.Contains(str3))
                    {
                        num2 = (this.TempRegions.ContainsKey(this.MapInfo.Number) ? (!this.TempRegions[this.MapInfo.Number].Regions.ContainsKey(new Location(surroundingPoint.X, surroundingPoint.Y)) ? 1 : 0) : (!this.TempRegions.ContainsKey(this.MapInfo.Number) ? 1 : 0)) == 0 ? 1 : 0;
                        goto label_6;
                    }
                }
                num2 = 1;
                label_6:
                if (num2 == 0)
                {
                    point1 = surroundingPoint;
                    break;
                }
            }
            if (point1 == null)
            {
                Point[,] tiles = this.MapInfo.Tiles;
                int upperBound1 = tiles.GetUpperBound(0);
                int upperBound2 = tiles.GetUpperBound(1);
                for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
                {
                    for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
                    {
                        Point point2 = tiles[lowerBound1, lowerBound2];
                        int num2;
                        if (point2 != null && point2.X >= xa && (point2.X <= xb && point2.Y >= ya) && (point2.Y <= yb && point2.Passable))
                        {
                            List<string> checkedtiles = this.checkedtiles;
                            num1 = point2.X;
                            string str1 = num1.ToString();
                            num1 = point2.Y;
                            string str2 = num1.ToString();
                            string str3 = str1 + "," + str2;
                            if (!checkedtiles.Contains(str3))
                            {
                                num2 = (this.TempRegions.ContainsKey(this.MapInfo.Number) ? (!this.TempRegions[this.MapInfo.Number].Regions.ContainsKey(new Location(point2.X, point2.Y)) ? 1 : 0) : (!this.TempRegions.ContainsKey(this.MapInfo.Number) ? 1 : 0)) == 0 ? 1 : 0;
                                goto label_17;
                            }
                        }
                        num2 = 1;
                        label_17:
                        if (num2 == 0)
                        {
                            point1 = point2;
                            goto label_23;
                        }
                    }
                }
                label_23:;
            }
            if (point1 != null)
            {
                this.checkedtiles.Add(point1.X.ToString() + "," + (object)point1.Y);
                this.WalkToExact(point1.X, point1.Y);
            }
            if (point1 == null)
            {
                this.SendMessage("checked all tiles, restart", (byte)0, false);
                this.checkedtiles.Clear();
            }
        }

        public void WalkToPlayer(int x, int y, int distance)
        {
            if (!this.MapInfo.IsLoaded || this.ServerLocation.DistanceFrom(new Location(x, y)) <= distance)
                return;
            this.MapInfo.UpdateBlocks(this);
            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, false);
            for (int index = 0; index < path.Length && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101))) && (!this.pause && !this.pausewalk && !this.donotwalk && path[index].Passable && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1); ++index)
            {
                this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                this.laststep = DateTime.UtcNow;
                if (this.ClientLocation.X == x && this.ClientLocation.Y == y)
                {
                    this.Refresh();
                    Thread.Sleep(1000);
                }
                this.MapInfo.UpdateBlocks(this);
                Thread.Sleep(this.WalkSpeed(false));
            }
        }

        public void WalkToTarget()
        {
            if (this.stopwalk || ((this.Tab.vcastwhilefollow ? (!this.castingoneline ? 1 : 0) : 1) == 0 || !this.MapInfo.IsLoaded) || this.itemdroppeddelay != DateTime.MinValue && DateTime.UtcNow.Subtract(this.itemdroppeddelay).TotalSeconds <= 3.0)
                return;
            if (this.ServerLocation.X == this.MainTarget.Location.X && this.ServerLocation.Y == this.MainTarget.Location.Y)
            {
                this.MapInfo.UpdateBlocks(this);
                if (this.MapInfo.Tiles[this.ServerLocation.X + 1, this.ServerLocation.Y] != null && this.MapInfo.Tiles[this.ServerLocation.X + 1, this.ServerLocation.Y].Passable && !this.MonsterAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y) && !this.PlayerAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y))
                {
                    this.Walk(Direction.East);
                    Thread.Sleep(410);
                }
                else if (this.MapInfo.Tiles[this.ServerLocation.X - 1, this.ServerLocation.Y] != null && this.MapInfo.Tiles[this.ServerLocation.X - 1, this.ServerLocation.Y].Passable && !this.MonsterAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y) && !this.PlayerAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y))
                {
                    this.Walk(Direction.West);
                    Thread.Sleep(410);
                }
                else if (this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y + 1] != null && this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y + 1].Passable && !this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1) && !this.PlayerAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1))
                {
                    this.Walk(Direction.South);
                    Thread.Sleep(410);
                }
                else if (this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y - 1] != null && this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y - 1].Passable && !this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1) && !this.PlayerAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1))
                {
                    this.Walk(Direction.North);
                    Thread.Sleep(410);
                }
            }
            if (this.ServerLocation.DistanceFrom(new Location(this.MainTarget.Location.X, this.MainTarget.Location.Y)) > 1)
            {
                bool flag = true;
                if (this.follow_walk == 0)
                    this.follow_walk = 1;
                if (this.follow_walk == 2 && this.Tab.vfollowplayer && this.Tab.vfollowtarget != string.Empty)
                {
                    Player characterByName = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                    if (characterByName != null && !this.MainTarget.IsInMaxView(characterByName.Location, this.Tab.vfollowdist))
                    {
                        flag = false;
                        this.MainTarget = this.NearestMonstertoLeader();
                    }
                }
                if (flag)
                {
                    if (this.ClientLocation.DistanceFrom(new Location(this.MainTarget.Location.X, this.MainTarget.Location.Y)) <= 1 && this.ServerLocation.DistanceFrom(new Location(this.MainTarget.Location.X, this.MainTarget.Location.Y)) > 1)
                    {
                        this.Refresh();
                        Thread.Sleep(1200);
                        this.laststep = DateTime.MinValue;
                    }
                    this.MapInfo.UpdateBlocks(this);
                    Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.MainTarget.Location.X, this.MainTarget.Location.Y, false);
                    if (path.Length == 0 || path.Length > this.MainTarget.DistanceFrom(this.ServerLocation) * 2)
                        this.MainTarget.OutofReach = true;
                    else if (this.MainTarget.OutofReach)
                        this.MainTarget.OutofReach = false;
                    for (int index = 0; index < path.Length && !this.stopwalk && ((!this.Tab.vcastwhilefollow || !this.castingoneline) && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.MainTarget != null && (!this.SomeoneElseIsCloserTo(this.MainTarget) && this.ServerLocation.DistanceFrom(new Location(this.MainTarget.Location.X, this.MainTarget.Location.Y)) > 1))) && ((!(this.itemdroppeddelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.itemdroppeddelay).TotalSeconds > 3.0) && (!this.IsSkulled && !this.IsSuained && (!this.SpellBar.Contains((ushort)90) && !this.SpellBar.Contains((ushort)97)) && !this.SpellBar.Contains((ushort)101)) && (!this.pause && !this.pausewalk && !this.donotwalk && ((path[index].X != this.MainTarget.Location.X || path[index].Y != this.MainTarget.Location.Y) && path[index].Passable && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1))); ++index)
                    {
                        Direction direction = this.ClientLocation - new Location(path[index].X, path[index].Y);
                        this.Walk(direction);
                        this.laststep = DateTime.UtcNow;
                        this.ServerLocation.Direction = direction;
                        this.ClientLocation.Direction = direction;
                        this.FaceTarget(this.MainTarget.Location);
                        this.FaceTarget(this.MainTarget.Location);
                        this.MapInfo.UpdateBlocks(this);
                        Thread.Sleep(this.WalkSpeed(false));
                        this.FaceTarget(this.MainTarget.Location);
                        if (this.followmode != 7)
                            this.followmode = 7;
                    }
                }
            }
        }

        public void WalkOnTarget()
        {
            if (!this.MapInfo.IsLoaded)
                return;
            bool flag = true;
            if (this.follow_walk == 0)
                this.follow_walk = 1;
            if (this.follow_walk == 2 && this.Tab.vfollowplayer && this.Tab.vfollowtarget != string.Empty)
            {
                Player characterByName = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                if (characterByName != null && !this.MainTarget.IsInMaxView(characterByName.Location, this.Tab.vfollowdist))
                {
                    flag = false;
                    this.MainTarget = this.NearestMonstertoLeader();
                }
            }
            if (flag && !this.SomeoneElseIsCloserTo(this.MainTarget))
            {
                if (this.ClientLocation.X == this.MainTarget.Location.X && this.ClientLocation.Y == this.MainTarget.Location.Y && this.ServerLocation.DistanceFrom(new Location(this.MainTarget.Location.X, this.MainTarget.Location.Y)) > 1)
                {
                    this.Refresh();
                    Thread.Sleep(1200);
                    this.laststep = DateTime.MinValue;
                }
                this.MapInfo.UpdateBlocks(this);
                Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.MainTarget.Location.X, this.MainTarget.Location.Y, false);
                for (int index = 0; index < path.Length && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.MainTarget != null && !this.SomeoneElseIsCloserTo(this.MainTarget) && (!this.IsSkulled && !this.IsSuained && (!this.SpellBar.Contains((ushort)90) && !this.SpellBar.Contains((ushort)97)) && !this.SpellBar.Contains((ushort)101))) && (!this.pause && !this.pausewalk && !this.donotwalk && path[index].Passable); ++index)
                {
                    Direction direction = this.ClientLocation - new Location(path[index].X, path[index].Y);
                    this.Walk(direction);
                    this.laststep = DateTime.UtcNow;
                    this.ServerLocation.Direction = direction;
                    this.ClientLocation.Direction = direction;
                    this.MapInfo.UpdateBlocks(this);
                    Thread.Sleep(this.WalkSpeed(false));
                    if (this.ClientLocation.DistanceFrom(this.MainTarget.Location) == 1 && this.MainTarget.IsInFront(this.ClientLocation) && this.MainTarget.Location.Direction == direction)
                    {
                        this.Walk(direction);
                        this.laststep = DateTime.UtcNow;
                        this.ServerLocation.Direction = direction;
                        this.ClientLocation.Direction = direction;
                        this.MapInfo.UpdateBlocks(this);
                        Thread.Sleep(this.WalkSpeed(false));
                        this.Walk(direction);
                        this.laststep = DateTime.UtcNow;
                        this.ServerLocation.Direction = direction;
                        this.ClientLocation.Direction = direction;
                        this.MapInfo.UpdateBlocks(this);
                        Thread.Sleep(this.WalkSpeed(false));
                    }
                }
            }
        }

        public void WalkToLoot(Npc i)
        {
            if (this.Tab.vactonlyinmobs && (!this.Tab.vactonlyinmobs || this.Mobbed) || !this.MapInfo.IsLoaded)
                return;
            this.MapInfo.UpdateBlocks(this);
            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, i.Location.X, i.Location.Y, false);
            if (path.Length > 1)
            {
                for (int index = 0; index < path.Length - 1 && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && this.walktoloot && (i != null && i.IsOnScreen && !this.ServerLocation.WithinSquare(i.Location, 2))) && (!this.Tab.vactonlyinmobs || !this.Mobbed); ++index)
                {
                    if (this.castingoneline)
                    {
                        Thread.Sleep(1000);
                        break;
                    }
                    if (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && (!this.pause && !this.pausewalk && !this.donotwalk) && ((path[index].Passable || (path[index].X == i.Location.X || path[index].Y == i.Location.Y)) && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1))
                    {
                        this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                        this.laststep = DateTime.UtcNow;
                        this.lastaction = DateTime.UtcNow;
                        if (this.ClientLocation.X == i.Location.X && this.ClientLocation.Y == i.Location.Y)
                        {
                            this.Refresh();
                            Thread.Sleep(1000);
                        }
                        this.MapInfo.UpdateBlocks(this);
                        Thread.Sleep(this.WalkSpeed(false));
                    }
                    else
                        break;
                }
            }
        }

        public void WalkTowardsNearestMonster()
        {
            Npc npc = (Npc)null;
            foreach (Character character in (IEnumerable<Character>)((IEnumerable<Character>)this.Characters.Values.ToArray<Character>()).OrderBy<Character, int>((Func<Character, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
            {
                if (character != null && character is Npc && character.IsOnScreen && ((character as Npc).Type == Npc.NpcType.NormalMonster || (character as Npc).Type == Npc.NpcType.PassableMonster))
                {
                    npc = character as Npc;
                    break;
                }
            }
            if (npc == null || !this.MapInfo.IsLoaded || this.ServerLocation.DistanceFrom(npc.Location) <= 5)
                return;
            this.MapInfo.UpdateBlocks(this);
            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, npc.Location.X, npc.Location.Y, false);
            if (path.Length != 0 && path.Length < npc.DistanceFrom(this.ServerLocation) * 2)
            {
                for (int index = 0; index < 3 && ((!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0) && (npc != null && npc.IsOnScreen && !this.ServerLocation.WithinSquare(npc.Location, 3))); ++index)
                {
                    if (this.castingoneline)
                    {
                        Thread.Sleep(1000);
                        break;
                    }
                    if (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && (!this.pause && !this.pausewalk && !this.donotwalk) && ((path[index].Passable || (path[index].X == npc.Location.X || path[index].Y == npc.Location.Y)) && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1))
                    {
                        this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                        this.laststep = DateTime.UtcNow;
                        if (this.ClientLocation.X == npc.Location.X && this.ClientLocation.Y == npc.Location.Y)
                        {
                            this.Refresh();
                            Thread.Sleep(1000);
                        }
                        this.MapInfo.UpdateBlocks(this);
                        Thread.Sleep(this.WalkSpeed(false));
                    }
                    else
                        break;
                }
            }
        }

        public void WalkToExact(int x, int y)
        {
            if (DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
            {
                this.Refresh();
                Thread.Sleep(1200);
                this.laststep = DateTime.MinValue;
            }
            if (!this.walkaround && (this.ClientLocation.X == x && this.ClientLocation.Y == y))
            {
                this.Refresh();
                Thread.Sleep(1000);
            }
            if (this.MapInfo == null || !this.MapInfo.IsLoaded)
                return;
            this.MapInfo.UpdateBlocks(this);
            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, false);
            for (int index = 0; index < path.Length && (!this.Tab.walkeverytile.Checked || !this.Tab.actonlyinmobs.Checked || !this.Mobbed); ++index)
            {
                DateTime utcNow;
                TimeSpan timeSpan;
                int num;
                if (this.refreshdelay != DateTime.MinValue)
                {
                    utcNow = DateTime.UtcNow;
                    timeSpan = utcNow.Subtract(this.refreshdelay);
                    num = timeSpan.TotalMilliseconds >= 1200.0 ? 1 : 0;
                }
                else
                    num = 1;
                if (num != 0 && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101)) && (!this.pause && !this.pausewalk && !this.donotwalk && !this.disstopwalk && ((path[index].Passable || (path[index].X == x || path[index].Y == y)) && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1)))
                {
                    this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                    this.laststep = DateTime.UtcNow;
                    this.lastaction = DateTime.UtcNow;
                    utcNow = DateTime.UtcNow;
                    timeSpan = utcNow.Subtract(this.laststep);
                    if (timeSpan.TotalSeconds > 2.0 && (this.ServerLocation.X != this.ClientLocation.X || this.ServerLocation.Y != this.ClientLocation.Y))
                    {
                        this.Refresh();
                        Thread.Sleep(1200);
                        this.laststep = DateTime.MinValue;
                    }
                    if (!this.walkaround && (this.ClientLocation.X == x && this.ClientLocation.Y == y))
                    {
                        this.Refresh();
                        Thread.Sleep(1000);
                    }
                    this.MapInfo.UpdateBlocks(this);
                    Thread.Sleep(this.WalkSpeed(false));
                }
                else
                    break;
            }
        }

        public void AutoWalker(int x, int y)
        {
            if (this.MapInfo == null || !this.MapInfo.IsLoaded)
                return;
            this.MapInfo.UpdateBlocks(this);
            Point[] path1 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, false);
            if (this.MapInfo.Number == 10056 && !this.Tab.vautowalker_locales.Equals("Mt Merry"))
            {
                if (this.ClientLocation.Y >= 13)
                    path1 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, false);
                else if (this.ClientLocation.X >= 10)
                    path1 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.ClientLocation.X, this.RandomNumber(13, 15), false);
            }
            if (path1.Length == 0)
            {
                if (this.autowalkon && this.laststep != DateTime.MinValue && DateTime.UtcNow.Subtract(this.laststep).TotalSeconds > 5.0)
                {
                    foreach (Player player in this.NearbyPlayer())
                    {
                        if (player != null && player.IsOnScreen && player.LastAction != DateTime.MinValue && (DateTime.UtcNow.Subtract(player.LastAction).TotalSeconds > 5.0 && Server.Alts.ContainsKey(player.Name)) && (Server.Alts[player.Name].laststep != DateTime.MinValue && DateTime.UtcNow.Subtract(Server.Alts[player.Name].laststep).TotalSeconds < 3.0 || Server.Alts[player.Name].MapInfo.Number != this.MapInfo.Number))
                        {
                            this.Refresh();
                            this.laststep = DateTime.UtcNow;
                            Thread.Sleep(1200);
                            break;
                        }
                    }
                }
                Point point1 = new Point(0, 0);
                foreach (Point point2 in this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, true))
                {
                    if (point2 != null && point2.HasEntity)
                    {
                        point1 = point2;
                        break;
                    }
                }
                Point[] path2 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, point1.X, point1.Y, false);
                if ((path2.Length <= 0 || (((IEnumerable<Point>)path2).Last<Point>().X != 0 || ((IEnumerable<Point>)path2).Last<Point>().Y != 0)) && path2.Length > 0)
                {
                    for (int index = 0; index <= path2.Length; ++index)
                    {
                        if (this.castingoneline)
                        {
                            Thread.Sleep(1000);
                            break;
                        }
                        if (this.autowalkon && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101)) && (!this.pause && !this.pausewalk && !this.donotwalk && path2[index].Passable && Math.Abs(this.ClientLocation.X - path2[index].X) + Math.Abs(this.ClientLocation.Y - path2[index].Y) == 1))
                        {
                            Direction direction = this.ClientLocation - new Location(path2[index].X, path2[index].Y);
                            if (direction != Direction.None)
                            {
                                this.Walk(direction);
                                this.laststep = DateTime.UtcNow;
                                this.lastaction = DateTime.UtcNow;
                                if (this.ClientLocation.X == x && this.ClientLocation.Y == y || this.ServerLocation.X == x && this.ServerLocation.Y == y)
                                {
                                    this.Refresh();
                                    Thread.Sleep(1200);
                                }
                                if (this.MapInfo != null && this.MapInfo.IsLoaded)
                                    this.MapInfo.UpdateBlocks(this);
                                Thread.Sleep(this.WalkSpeed(false));
                            }
                            else
                                break;
                        }
                        else
                            break;
                    }
                }
            }
            else if ((path1.Length <= 0 || (((IEnumerable<Point>)path1).Last<Point>().X != 0 || ((IEnumerable<Point>)path1).Last<Point>().Y != 0)) && path1.Length > 0)
            {
                for (int index = 0; index <= path1.Length; ++index)
                {
                    if (this.castingoneline)
                    {
                        Thread.Sleep(1000);
                        break;
                    }
                    if (this.autowalkon && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101)) && (!this.pause && !this.pausewalk && !this.donotwalk && ((path1[index].Passable || (path1[index].X == x || path1[index].Y == y)) && Math.Abs(this.ClientLocation.X - path1[index].X) + Math.Abs(this.ClientLocation.Y - path1[index].Y) == 1)))
                    {
                        this.Walk(this.ClientLocation - new Location(path1[index].X, path1[index].Y));
                        this.laststep = DateTime.UtcNow;
                        this.lastaction = DateTime.UtcNow;
                        if (this.ClientLocation.X == x && this.ClientLocation.Y == y || this.ServerLocation.X == x && this.ServerLocation.Y == y)
                        {
                            this.Refresh();
                            Thread.Sleep(1200);
                        }
                        if (this.MapInfo != null && this.MapInfo.IsLoaded)
                            this.MapInfo.UpdateBlocks(this);
                        Thread.Sleep(this.WalkSpeed(false));
                    }
                    else
                        break;
                }
            }
        }

        public void AutoWalkerToAlt(int x, int y)
        {
            if (this.MapInfo == null || !this.MapInfo.IsLoaded)
                return;
            this.MapInfo.UpdateBlocks(this);
            Point[] path1 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, false);
            if (path1.Length == 0)
            {
                Point point1 = new Point(0, 0);
                foreach (Point point2 in this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, x, y, true))
                {
                    if (point2 != null && point2.HasEntity)
                    {
                        point1 = point2;
                        break;
                    }
                }
                Point[] path2 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, point1.X, point1.Y, false);
                if ((path2.Length <= 0 || (((IEnumerable<Point>)path2).Last<Point>().X != 0 || ((IEnumerable<Point>)path2).Last<Point>().Y != 0)) && path2.Length > 0)
                {
                    for (int index = 0; index <= path2.Length && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && (!this.pause && !this.pausewalk && !this.donotwalk && path2[index].Passable && Math.Abs(this.ClientLocation.X - path2[index].X) + Math.Abs(this.ClientLocation.Y - path2[index].Y) == 1)); ++index)
                    {
                        Direction direction = this.ClientLocation - new Location(path2[index].X, path2[index].Y);
                        if (direction != Direction.None)
                        {
                            this.Walk(direction);
                            this.laststep = DateTime.UtcNow;
                            if (this.ClientLocation.X == x && this.ClientLocation.Y == y || this.ServerLocation.X == x && this.ServerLocation.Y == y)
                            {
                                this.Refresh();
                                Thread.Sleep(1200);
                            }
                            if (this.MapInfo != null && this.MapInfo.IsLoaded)
                                this.MapInfo.UpdateBlocks(this);
                            Thread.Sleep(this.WalkSpeed(false));
                        }
                        else
                            break;
                    }
                }
            }
            else if ((path1.Length <= 0 || (((IEnumerable<Point>)path1).Last<Point>().X != 0 || ((IEnumerable<Point>)path1).Last<Point>().Y != 0)) && path1.Length > 0)
            {
                for (int index = 0; index <= path1.Length && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && (!this.pause && !this.pausewalk && !this.donotwalk)) && ((path1[index].Passable || (path1[index].X == x || path1[index].Y == y)) && Math.Abs(this.ClientLocation.X - path1[index].X) + Math.Abs(this.ClientLocation.Y - path1[index].Y) == 1); ++index)
                {
                    this.Walk(this.ClientLocation - new Location(path1[index].X, path1[index].Y));
                    this.laststep = DateTime.UtcNow;
                    if (this.ClientLocation.X == x && this.ClientLocation.Y == y || this.ServerLocation.X == x && this.ServerLocation.Y == y)
                    {
                        this.Refresh();
                        Thread.Sleep(1200);
                    }
                    if (this.MapInfo != null && this.MapInfo.IsLoaded)
                        this.MapInfo.UpdateBlocks(this);
                    Thread.Sleep(this.WalkSpeed(false));
                }
            }
        }

        public void AutoWalkWithinRange(int x, int y, int range)
        {
            if (this.MapInfo == null || !this.MapInfo.IsLoaded)
                return;
            this.MapInfo.UpdateBlocks(this);
            if (this.randomdest == null)
                this.randomdest = new Location(this.RandomNumber(x - range, x + range), this.RandomNumber(y - range, y + range));
            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.randomdest.X, this.randomdest.Y, false);
            if (this.MapInfo.Number == 10055 && x == 44 && y == 21 && this.ClientLocation.Y == 25)
                path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.randomdest.X, 25, false);
            if (path.Length == 0 || !this.MapInfo.Tiles[this.randomdest.X, this.randomdest.Y].Passable)
            {
                this.randomdest = (Location)null;
            }
            else
            {
                for (int index = 0; index < path.Length && this.autowalkon && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && (!this.pause && !this.pausewalk && !this.donotwalk && path[index].Passable && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1)); ++index)
                {
                    this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                    this.laststep = DateTime.UtcNow;
                    this.lastaction = DateTime.UtcNow;
                    this.MapInfo.UpdateBlocks(this);
                    if (this.ClientLocation.X == this.randomdest.X && this.ClientLocation.Y == this.randomdest.Y)
                    {
                        this.Refresh();
                        Thread.Sleep(1100);
                    }
                    Thread.Sleep(this.WalkSpeed(false));
                }
            }
        }

        public void WalkWithinRange(int x, int y, int range)
        {
            if (this.MapInfo == null || !this.MapInfo.IsLoaded)
                return;
            this.MapInfo.UpdateBlocks(this);
            if (this.randomdest == null)
                this.randomdest = new Location(this.RandomNumber(x - range, x + range), this.RandomNumber(y - range, y + range));
            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.randomdest.X, this.randomdest.Y, false);
            if (path.Length == 0 || !this.MapInfo.Tiles[this.randomdest.X, this.randomdest.Y].Passable)
            {
                this.randomdest = (Location)null;
            }
            else
            {
                for (int index = 0; index < path.Length && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && (!this.pause && !this.pausewalk && !this.donotwalk && path[index].Passable && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1)); ++index)
                {
                    this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                    this.laststep = DateTime.UtcNow;
                    this.lastaction = DateTime.UtcNow;
                    this.MapInfo.UpdateBlocks(this);
                    if (this.ClientLocation.X == this.randomdest.X && this.ClientLocation.Y == this.randomdest.Y)
                    {
                        this.Refresh();
                        Thread.Sleep(1100);
                    }
                    Thread.Sleep(this.WalkSpeed(false));
                }
            }
        }

        public bool WithinRange(int x, int y, int range)
        {
            return Math.Abs(this.ServerLocation.X - x) <= range && Math.Abs(this.ServerLocation.Y - y) <= range;
        }

        public void AutoWalker()
        {
            if (!this.Tab.vautowalker_locales.Equals("Veltain Mines") && !this.Tab.vautowalker_locales.Equals("Aman Jungle") && (!this.Tab.vautowalker_locales.Equals("Lost Ruins") && !this.Tab.vautowalker_locales.Equals("Water Dungeon")) && (!this.Tab.vautowalker_locales.Equals("Hwarone") && !this.Tab.vautowalker_locales.Equals("Andor") && (!this.Tab.vautowalker_locales.Equals("Desert Dunes") && !this.Tab.vautowalker_locales.Equals("Noam"))) && (!this.Tab.vautowalker_locales.Equals("Asilon") && !this.Tab.vautowalker_locales.Equals("Lynith")) && !this.Tab.vautowalker_locales.Equals("Mt Merry") && (Server.DAServer[this.Name] == 2617 || this.MapInfo.Number == 3940 && !this.Tab.vautowalker_locales.Equals("Loures") && (this.Tab.vautowalker_locales != "Canal Key 2 (blob)" && this.Tab.vautowalker_locales != "Canal Key 1 (skrull)") && this.Tab.vautowalker_locales != "Canal Ent" || this.MapInfo.Number == 136 && !this.Tab.vautowalker_locales.Equals("Mileth") && this.Tab.vautowalker_locales != "Nearest Bank" && this.Tab.vautowalker_locales != "Nearest Restaurant") && (Server.DAServer[this.Name] != 2617 || this.MapInfo.Number != 10056 && this.MapInfo.Number != 10055 && (this.MapInfo.Number != 10004 && this.MapInfo.Number != 10000) && this.MapInfo.Number != 10999 && this.MapInfo.Number != 10998))
            {
                if (this.Tab.vautowalker_locales.Equals("Loures") && this.HasItem("Loures Song") && this.ItemAmount("Loures Song") > 1U)
                {
                    this.UseItem("Loures Song");
                    Thread.Sleep(1000);
                }
                else if (this.Tab.vautowalker_locales.Equals("Rucesion") && this.HasItem("Rucesion Song") && this.ItemAmount("Rucesion Song") > 1U)
                {
                    this.UseItem("Rucesion Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Abel Song") && this.ItemAmount("Abel Song") > 1U)
                {
                    this.UseItem("Abel Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Mileth Song") && this.ItemAmount("Mileth Song") > 1U)
                {
                    this.UseItem("Mileth Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Piet Song") && this.ItemAmount("Piet Song") > 1U)
                {
                    this.UseItem("Piet Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Loures Song") && this.ItemAmount("Loures Song") > 1U)
                {
                    this.UseItem("Loures Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Rucesion Song") && this.ItemAmount("Rucesion Song") > 1U)
                {
                    this.UseItem("Rucesion Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Undine Song") && this.ItemAmount("Undine Song") > 1U)
                {
                    this.UseItem("Undine Song");
                    Thread.Sleep(1000);
                }
                else if (this.HasItem("Suomi Song") && this.ItemAmount("Suomi Song") > 1U)
                {
                    this.UseItem("Suomi Song");
                    Thread.Sleep(1000);
                }
                else if (this.MapInfo.Number == 3940)
                    this.AutoWalker(19, 13);
                else if (Server.DAServer[this.Name] == 2617 && this.cancast)
                {
                    string str = string.Empty;
                    foreach (Spell spell in this.SpellBook)
                    {
                        if (spell != null && spell.Name.Contains(" Prayer"))
                        {
                            str = spell.Name.Substring(0, spell.Name.IndexOf(' '));
                            break;
                        }
                    }
                    if (this.HasSpell(str + " Prayer", false) && !this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y].HasPrayerSpell)
                    {
                        this.MacroCast(str + " Prayer", new uint?());
                        Thread.Sleep(1200);
                    }
                    if (this.HasItem(str + " Prayer Necklace") && this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y].SafeToDropNecklace)
                    {
                        this.Drop(this.ServerLocation.X, this.ServerLocation.Y, this.ItemSlot(str + " Prayer Necklace"), 1);
                        Thread.Sleep(1200);
                        this.Pickup(this.ServerLocation.X, this.ServerLocation.Y);
                        Thread.Sleep(1200);
                        uint currentnpcpopupId = this.CurrentnpcpopupID;
                        this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)92, (byte)1, (byte)2, (byte)4);
                        if (str == "Gramail")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)109, (byte)1, (byte)5, (byte)4);
                        }
                        else if (str == "Fiosachd")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)94, (byte)1, (byte)7, (byte)4);
                        }
                        else if (str == "Deoch")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)252, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)78, (byte)1, (byte)7, (byte)4);
                        }
                        else if (str == "Luathas")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)42, (byte)1, (byte)6, (byte)4);
                        }
                        else if (str == "Sgrios")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)105, (byte)1, (byte)6, (byte)4);
                        }
                        else if (str == "Glioca")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)80, (byte)1, (byte)8, (byte)4);
                        }
                        else if (str == "Cail")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)2, (byte)45, (byte)1, (byte)6, (byte)4);
                        }
                        else if (str == "Ceannlaidir")
                        {
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)0, (byte)248, (byte)1, (byte)2, (byte)4);
                            this.PopupRespond(new uint?(currentnpcpopupId), Server.Dialogs["Glioca Prayer"], (byte)1, (byte)248, (byte)1, (byte)6, (byte)4);
                        }
                        Thread.Sleep(3000);
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Andor") && this.Tab.vwalklocaleslist.Equals("Andor Lobby") && (Server.DARegged.ContainsKey(this.Name) && Server.DARegged[this.Name]) && this.MapInfo.Number != 10038 && !this.MapInfo.Name.Contains("Andor") && (this.HasItem("Map of Ant Tunnels") && (this.anttunnel == DateTime.MinValue || DateTime.Now.Subtract(this.anttunnel).TotalMinutes > 360.0) || this.HasItem("Map of Ant Guardian Tunnels") && (this.guardiananttunnel == DateTime.MinValue || DateTime.Now.Subtract(this.guardiananttunnel).TotalMinutes > 240.0)))
                return;
            if (!this.Tab.vautowalker_locales.Contains("Nearest"))
            {
                if (this.MapInfo.Number == 10004 && !this.Tab.vautowalker_locales.Equals("Asilon") && this.HasSpell("dachaidh", false) && (long)this.Statistics.CurrentMP > (long)Server.SpellList["dachaidh"].ManaCost)
                {
                    this.CastSpell("dachaidh", new uint?());
                    Thread.Sleep(1000);
                }
                else if (this.MapInfo.Number == 10004)
                    this.AutoWalker(9, 14);
                if (this.MapInfo.Number == 10056 && !this.Tab.vautowalker_locales.Equals("Mt Merry"))
                    this.AutoWalker(4, 17);
                if (this.MapInfo.Number == 10062)
                    this.AutoWalker(13, 15);
                if (this.MapInfo.Number == 10001)
                    this.AutoWalker(11, 14);
                if (this.MapInfo.Number == 10000 && !this.WithinRange(32, 33, 3))
                    this.AutoWalkWithinRange(32, 33, 3);
                if (!this.Tab.vautowalker_locales.Equals("Andor") && !this.Tab.vautowalker_locales.Equals("Desert Dunes") && !this.Tab.vautowalker_locales.Equals("Noam") && !this.Tab.vautowalker_locales.Equals("Mt Merry") && (this.MapInfo.Number == 10055 && !this.WithinRange(44, 21, 3)))
                    this.AutoWalkWithinRange(44, 21, 3);
                if (this.MapInfo.Number == 10999 || this.MapInfo.Number == 10998)
                {
                    this.Walk(Direction.North);
                    Thread.Sleep(500);
                    this.MapInfo.Number = 0;
                }
                if (this.MapInfo.Number == 3079 || this.MapInfo.Number == 3080)
                {
                    int x = 0;
                    if (this.ServerLocation.X > 0)
                        x = this.ServerLocation.X;
                    if (this.Tab.vautowalker_locales.Equals("Mileth"))
                    {
                        if (this.ServerLocation.Y == 1)
                            this.AutoWalker(x, 2);
                        else if (this.ServerLocation.Y == 5)
                            this.AutoWalker(x, 6);
                    }
                    else if (this.ServerLocation.Y == 1)
                        this.AutoWalker(x, 0);
                    else if (this.ServerLocation.Y == 5)
                        this.AutoWalker(x, 6);
                }
                if (this.MapInfo.Number == 5231)
                {
                    int x = 0;
                    if (this.ServerLocation.X > 0)
                        x = this.ServerLocation.X;
                    this.AutoWalker(x, 0);
                }
                if (this.MapInfo.Number == 3081)
                {
                    int x = 0;
                    if (this.ServerLocation.X > 0)
                        x = this.ServerLocation.X;
                    if (this.Tab.vautowalker_locales.Equals("Rucesion"))
                    {
                        if (this.ServerLocation.Y == 1)
                            this.AutoWalker(x, 2);
                        else if (this.ServerLocation.Y == 5)
                            this.AutoWalker(x, 6);
                    }
                    else if (this.ServerLocation.Y == 1)
                        this.AutoWalker(x, 0);
                    else if (this.ServerLocation.Y == 5)
                        this.AutoWalker(x, 6);
                }
            }
            if (!this.Tab.vautowalker_locales.Equals("Loures"))
            {
                if (this.MapInfo.Number == 3012)
                    this.AutoWalker(15, 8);
                if (this.MapInfo.Number == 3271)
                    this.AutoWalker(64, 59);
                if (this.MapInfo.Number == 3926)
                    this.AutoWalker(42, 79);
                if (this.MapInfo.Number == 3272)
                    this.AutoWalker(32, 60);
                if (this.MapInfo.Number == 3073)
                    this.AutoWalker(31, 14);
            }
            if (this.MapInfo.Number == 3010)
                this.AutoWalker(15, 15);
            if (this.MapInfo.Number == 3082 && this.ServerLocation.Y == 1)
            {
                int x = 0;
                if (this.ServerLocation.X > 0)
                    x = this.ServerLocation.X;
                this.AutoWalker(x, 2);
            }
            if (this.MapInfo.Number == 3082 && this.ServerLocation.Y == 5)
            {
                int x = 0;
                if (this.ServerLocation.X > 0)
                    x = this.ServerLocation.X;
                this.AutoWalker(x, 6);
            }
            if (this.MapInfo.Number == 10028)
                this.AutoWalker(41, 0);
            if (this.MapInfo.Number == 10008)
                this.AutoWalker(40, 0);
            if (this.MapInfo.Number == 10009)
                this.AutoWalker(33, 12);
            if (!this.Tab.vautowalker_locales.Equals("Hwarone") && this.MapInfo.Number == 10265)
                this.AutoWalker(79, 43);
            if (this.Tab.vautowalker_locales.Equals("Veltain Mines") || this.Tab.vautowalker_locales.Equals("Aman Jungle") || (this.Tab.vautowalker_locales.Equals("Lost Ruins") || this.Tab.vautowalker_locales.Equals("Water Dungeon")) || (this.Tab.vautowalker_locales.Equals("Hwarone") || this.Tab.vautowalker_locales.Equals("Andor")) || this.Tab.vautowalker_locales.Equals("Desert Dunes") || this.Tab.vautowalker_locales.Equals("tavaly"))
            {
                if (this.MapInfo.Number == 3014)
                    this.AutoWalker(15, 12);
                if (this.MapInfo.Number == 3052)
                    this.AutoWalker(34, 25);
                if (this.Nation == (byte)7 && Server.DARegged[this.Name])
                {
                    if (this.Towns.ContainsKey("Coliseum Arena"))
                        this.SelectTown("Coliseum Arena");
                    else if (this.Towns.ContainsKey("Loures Castle"))
                        this.SelectTown("Loures Castle");
                    else if (this.Towns.ContainsKey("Rucesion"))
                        this.SelectTown("Rucesion");
                    else
                        this.SelectTown("Pravat Cave");
                    if (this.MapInfo.Number == 5231 && this.ServerLocation.Y == 1)
                    {
                        int x = 0;
                        if (this.ServerLocation.X > 0)
                            x = this.ServerLocation.X;
                        this.AutoWalker(x, 0);
                    }
                }
                else if (this.Nation == (byte)7 || this.Medenian == (byte)1)
                {
                    if (this.Towns.ContainsKey("Loures Harbor"))
                        this.SelectTown("Loures Harbor");
                    else if (this.Towns.ContainsKey("Rucesion"))
                        this.SelectTown("Rucesion");
                    else
                        this.SelectTown("Pravat Cave");
                    if (this.MapInfo.Number == 6925)
                        this.AutoWalker(20, 30);
                    if (this.MapInfo.Number == 6926 && !this.WithinRange(7, 7, 3))
                        this.AutoWalkWithinRange(7, 7, 3);
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Mt Merry"))
            {
                if (this.Towns.ContainsKey("Noam"))
                    this.SelectTown("Noam");
                else if (this.Towns.ContainsKey("Rucesion"))
                    this.SelectTown("Rucesion");
                else if (this.Towns.ContainsKey("Loures"))
                    this.SelectTown("Loures");
                else
                    this.SelectTown("Pravat Cave");
                if (this.MapInfo.Number == 3081 && this.ServerLocation.Y == 1)
                    this.AutoWalker(this.ServerLocation.X, 2);
                else if (this.MapInfo.Number == 3081)
                    this.AutoWalker(this.ServerLocation.X, 6);
                if (this.MapInfo.Number == 505)
                    this.AutoWalker(41, 41);
                if (this.MapInfo.Number == 498)
                    this.AutoWalker(0, 10);
                if (this.MapInfo.Number == 496)
                    this.AutoWalker(0, 13);
                if (this.MapInfo.Number == 486)
                    this.AutoWalker(3, 4);
                if (this.MapInfo.Number == 10055)
                    this.AutoWalker(33, 22);
                if (this.MapInfo.Number == 10056)
                    this.AutoWalker(11, 4);
                if (this.MapInfo.Number == 10057)
                    this.AutoWalker(0, 16);
                if (this.MapInfo.Number == 10059)
                    this.AutoWalker(6, 8);
                if (this.MapInfo.Number == 7065)
                    this.AutoWalker(30, 48);
                if (this.Tab.vwalklocaleslist == "Entrance")
                {
                    if (this.MapInfo.Number == 7050 && !this.WithinRange(12, 15, 3))
                        this.AutoWalkWithinRange(12, 15, 3);
                    else if (this.MapInfo.Number == 7050)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                else if (this.Tab.vwalklocaleslist == "Mother Erbie")
                {
                    if (this.MapInfo.Name.StartsWith("Mount Merry 5-"))
                        this.AutoWalker(44, 17);
                    if (this.MapInfo.Number == 7050 && !this.WithinRange(21, 12, 2))
                        this.AutoWalkWithinRange(21, 12, 2);
                    else if (this.MapInfo.Number == 7050)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Andor"))
            {
                if (this.MapInfo.Number == 498)
                    this.AutoWalker(5, 11);
                if (this.MapInfo.Number == 505)
                    this.AutoWalker(27, 44);
                this.SelectTown("Noam");
                if (this.Tab.vwalklocaleslist == "Andor Lobby")
                {
                    if (this.MapInfo.Number == 10056)
                        this.AutoWalker(4, 17);
                    if (this.MapInfo.Number == 10055)
                        this.AutoWalker(0, 20);
                    if (this.MapInfo.Number == 10034)
                        this.AutoWalker(30, 0);
                    if (this.MapInfo.Number == 10038)
                        this.AutoWalker(21, 38);
                    if (this.MapInfo.Number == 10101 && !this.WithinRange(22, 8, 3))
                        this.AutoWalkWithinRange(22, 8, 3);
                    else if (this.MapInfo.Number == 10101)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "Andor 80" && this.SpellBar.Contains((ushort)10))
                {
                    if (this.MapInfo.Number == 10101)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10104)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10111)
                        this.AutoWalker(1, 14);
                    if (this.MapInfo.Number == 10119)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10120)
                        this.AutoWalker(30, 9);
                    if (this.MapInfo.Number == 10112)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10113)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10121)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10126)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10127)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10128)
                        this.AutoWalker(1, 15);
                    if (this.MapInfo.Number == 10132)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10135)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10143)
                        this.AutoWalker(1, 14);
                    if (this.MapInfo.Number == 10148)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10149)
                        this.AutoWalker(1, 23);
                    if (this.MapInfo.Number == 10153)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10154)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10158)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10159)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10166)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10167)
                        this.AutoWalker(1, 15);
                    if (this.MapInfo.Number == 10177)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10187)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10188)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10189)
                        this.AutoWalker(30, 9);
                    if (this.MapInfo.Number == 10179)
                        this.AutoWalker(30, 16);
                    if (this.MapInfo.Number == 10169)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10170)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10180 && !this.WithinRange(10, 22, 3))
                        this.AutoWalkWithinRange(10, 22, 3);
                    else if (this.MapInfo.Number == 10180)
                    {
                        this.UseSkill("Assail", 0U);
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "Andor 140" && this.SpellBar.Contains((ushort)10))
                {
                    if (this.MapInfo.Number == 10180)
                        this.AutoWalker(14, 1);
                    if (this.MapInfo.Number == 10181)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10182)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10183)
                        this.AutoWalker(30, 8);
                    if (this.MapInfo.Number == 10173)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10174)
                        this.AutoWalker(30, 8);
                    if (this.MapInfo.Number == 10164)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10165)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10175)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10176)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10185)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10186)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10193)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10194)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10198)
                        this.AutoWalker(1, 15);
                    if (this.MapInfo.Number == 10202)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10203)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10204)
                        this.AutoWalker(1, 15);
                    if (this.MapInfo.Number == 10209)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10215)
                        this.AutoWalker(15, 1);
                    if (this.MapInfo.Number == 10216)
                        this.AutoWalker(30, 8);
                    if (this.MapInfo.Number == 10210)
                        this.AutoWalker(22, 1);
                    if (this.MapInfo.Number == 10211)
                        this.AutoWalker(1, 7);
                    if (this.MapInfo.Number == 10217)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10225)
                        this.AutoWalker(17, 30);
                    if (this.MapInfo.Number == 10224)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10233)
                        this.AutoWalker(1, 22);
                    if (this.MapInfo.Number == 10242)
                        this.AutoWalker(18, 30);
                    if (this.MapInfo.Number == 10241)
                        this.AutoWalker(16, 30);
                    if (this.MapInfo.Number == 10240 && !this.WithinRange(10, 10, 3))
                        this.AutoWalkWithinRange(10, 10, 3);
                    else if (this.MapInfo.Number == 10240)
                    {
                        this.UseSkill("Assail", 0U);
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Veltain Mines"))
            {
                this.SelectTown("Hwarone");
                if (this.MapInfo.Number == 10265)
                    this.AutoWalker(17, 0);
                if (this.MapInfo.Number == 11021)
                    this.AutoWalker(18, 0);
                if (this.MapInfo.Number == 2908)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2909)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2910)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2911)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2912)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2913)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2914)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2915)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2916)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2900)
                    this.AutoWalker(3, 10);
                if (this.MapInfo.Number == 2901 && !this.WithinRange(15, 10, 3))
                    this.AutoWalkWithinRange(15, 10, 3);
                else if (this.MapInfo.Number == 2901)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Tavaly"))
            {
                this.SelectTown("Tavaly");
                if (this.MapInfo.Number == 10265)
                    this.AutoWalker(17, 0);
                if (this.MapInfo.Number == 11021)
                    this.AutoWalker(18, 0);
                if (this.MapInfo.Number == 2908)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2909)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2910)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2911)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2912)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2913)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2914)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2915)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2916)
                    this.AutoWalker(0, 5);
                if (this.MapInfo.Number == 2900)
                    this.AutoWalker(3, 10);
                if (this.MapInfo.Number == 2901 && !this.WithinRange(15, 10, 3))
                    this.AutoWalkWithinRange(15, 10, 3);
                else if (this.MapInfo.Number == 2901)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Mileth"))
            {
                if (this.Tab.vwalklocaleslist.Equals("ToC Warrior"))
                {
                    if (this.MapInfo.Number == 394)
                        this.AutoWalker(2, 5);
                    if (this.MapInfo.Number == 395)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 7);
                    }
                    if (this.MapInfo.Number == 399)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 5);
                    }
                    if (this.MapInfo.Number == 343)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 7);
                    }
                    if (this.MapInfo.Number == 347)
                    {
                        if (!this.WithinRange(6, 6, 2))
                        {
                            this.AutoWalkWithinRange(6, 6, 2);
                        }
                        else
                        {
                            this.randomdest = (Location)null;
                            this.Tab.autowalker_button.Text = "Start";
                            this.autowalkon = false;
                        }
                    }
                }
                if (this.Tab.vwalklocaleslist.Equals("ToC Monk"))
                {
                    if (this.MapInfo.Number == 394)
                        this.AutoWalker(2, 5);
                    if (this.MapInfo.Number == 395)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 7);
                    }
                    if (this.MapInfo.Number == 399)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 5);
                    }
                    if (this.MapInfo.Number == 343)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 344)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 7);
                    }
                    if (this.MapInfo.Number == 348)
                    {
                        if (!this.WithinRange(6, 6, 2))
                        {
                            this.AutoWalkWithinRange(6, 6, 2);
                        }
                        else
                        {
                            this.randomdest = (Location)null;
                            this.Tab.autowalker_button.Text = "Start";
                            this.autowalkon = false;
                        }
                    }
                }
                if (this.Tab.vwalklocaleslist.Equals("ToC Rogue"))
                {
                    if (this.MapInfo.Number == 394)
                        this.AutoWalker(2, 5);
                    if (this.MapInfo.Number == 395)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 7);
                    }
                    if (this.MapInfo.Number == 399)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 5);
                    }
                    if (this.MapInfo.Number == 343)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 344)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 346)
                    {
                        if (!this.WithinRange(6, 6, 2))
                        {
                            this.AutoWalkWithinRange(6, 6, 2);
                        }
                        else
                        {
                            this.randomdest = (Location)null;
                            this.Tab.autowalker_button.Text = "Start";
                            this.autowalkon = false;
                        }
                    }
                }
                if (this.Tab.vwalklocaleslist.Equals("ToC Priest"))
                {
                    if (this.MapInfo.Number == 394)
                        this.AutoWalker(2, 5);
                    if (this.MapInfo.Number == 395)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 396)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 397)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(1, 5);
                    }
                    if (this.MapInfo.Number == 342)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 345)
                    {
                        if (!this.WithinRange(8, 6, 2))
                        {
                            this.AutoWalkWithinRange(8, 6, 2);
                        }
                        else
                        {
                            this.randomdest = (Location)null;
                            this.Tab.autowalker_button.Text = "Start";
                            this.autowalkon = false;
                        }
                    }
                }
                if (this.Tab.vwalklocaleslist.Equals("ToC Wizard"))
                {
                    if (this.MapInfo.Number == 394)
                        this.AutoWalker(2, 5);
                    if (this.MapInfo.Number == 395)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 396)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(6, 1);
                    }
                    if (this.MapInfo.Number == 397)
                    {
                        if (!this.tocpopup)
                            this.AutoWalker(6, 6);
                        else
                            this.AutoWalker(7, 1);
                    }
                    if (this.MapInfo.Number == 398)
                    {
                        if (!this.WithinRange(8, 6, 2))
                        {
                            this.AutoWalkWithinRange(8, 6, 2);
                        }
                        else
                        {
                            this.randomdest = (Location)null;
                            this.Tab.autowalker_button.Text = "Start";
                            this.autowalkon = false;
                        }
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Mount Giragan"))
            {
                if (this.Tab.vwalklocaleslist == "tauren nose ring")
                {
                    if (this.MapInfo.Number == 2073)
                        this.AutoWalker(6, 0);
                    if (this.MapInfo.Number == 2074)
                    {
                        if (this.nosering == 0 || this.nosering == 2)
                            this.AutoWalker(0, 9);
                        if (this.nosering == 1)
                            this.AutoWalker(19, 9);
                        if (this.nosering == 3)
                            this.AutoWalker(9, 0);
                    }
                    if (this.MapInfo.Number == 2077)
                    {
                        if (this.nosering == 0 || this.nosering == 2)
                            this.AutoWalker(9, 0);
                        if (this.nosering == 1 || this.nosering == 3)
                            this.AutoWalker(19, 9);
                    }
                    if (this.MapInfo.Number == 2078)
                    {
                        if ((this.nosering == 0 || this.nosering == 2) && !this.WithinRange(9, 8, 3))
                            this.AutoWalkWithinRange(9, 8, 3);
                        if (this.nosering == 1 || this.nosering == 3)
                            this.AutoWalker(9, 19);
                    }
                    if (this.MapInfo.Number == 2075)
                    {
                        if (this.nosering == 1)
                            this.AutoWalker(9, 0);
                        if (this.nosering == 2)
                            this.AutoWalker(0, 9);
                    }
                    if (this.MapInfo.Number == 2076)
                    {
                        if (this.nosering == 1)
                        {
                            if (!this.WithinRange(9, 8, 3))
                            {
                                this.AutoWalkWithinRange(9, 8, 3);
                            }
                            else
                            {
                                this.randomdest = (Location)null;
                                this.Tab.autowalker_button.Text = "Start";
                                this.autowalkon = false;
                            }
                        }
                        if (this.nosering == 2)
                            this.AutoWalker(9, 19);
                    }
                    if (this.MapInfo.Number == 2079)
                        this.AutoWalker(9, 0);
                    if (this.MapInfo.Number == 2080)
                        this.AutoWalker(9, 1);
                    if (this.MapInfo.Number == 2081)
                        this.AutoWalker(10, 0);
                    if (this.MapInfo.Number == 2082 && !this.WithinRange(10, 6, 3))
                        this.AutoWalkWithinRange(10, 6, 3);
                    else if (this.MapInfo.Number == 2082)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "tauren horn")
                {
                    if (this.MapInfo.Number == 2060 && this.taurenhorn == 0 && !this.WithinRange(6, 11, 2))
                        this.AutoWalkWithinRange(6, 11, 2);
                    if (this.MapInfo.Number == 2060 && this.taurenhorn == 1)
                        this.AutoWalker(0, 9);
                    if (this.MapInfo.Number == 2061 && this.taurenhorn == 1)
                        this.AutoWalker(9, 0);
                    if (this.MapInfo.Number == 2062 && this.taurenhorn == 1 && !this.WithinRange(9, 7, 2))
                        this.AutoWalkWithinRange(9, 7, 2);
                    if (this.MapInfo.Number == 2062 && this.taurenhorn == 2)
                        this.AutoWalker(0, 9);
                    if (this.MapInfo.Number == 2065 && this.taurenhorn == 2 && !this.WithinRange(11, 8, 2))
                        this.AutoWalkWithinRange(11, 8, 2);
                    if (this.MapInfo.Number == 2065 && this.taurenhorn == 3)
                        this.AutoWalker(9, 0);
                    if (this.MapInfo.Number == 2065 && this.taurenhorn == 4)
                        this.AutoWalker(0, 9);
                    if (this.MapInfo.Number == 2066 && this.taurenhorn == 3 && !this.WithinRange(9, 7, 2))
                        this.AutoWalkWithinRange(9, 7, 2);
                    if (this.MapInfo.Number == 2066 && this.taurenhorn == 4)
                        this.AutoWalker(9, 19);
                    if (this.MapInfo.Number == 2070 && this.taurenhorn == 4 && !this.WithinRange(14, 9, 2))
                        this.AutoWalkWithinRange(14, 9, 2);
                    if (this.MapInfo.Number == 2070 && this.taurenhorn == 5)
                        this.AutoWalker(9, 19);
                    if (this.MapInfo.Number == 2069 && this.taurenhorn == 5)
                        this.AutoWalker(9, 19);
                    if (this.MapInfo.Number == 2071 && this.taurenhorn == 5 && !this.WithinRange(10, 6, 2))
                        this.AutoWalkWithinRange(10, 6, 2);
                    if (this.MapInfo.Number == 2071 && this.taurenhorn == 6)
                        this.AutoWalker(19, 9);
                    if (this.MapInfo.Number == 2067 && this.taurenhorn == 6 && !this.WithinRange(6, 9, 2))
                        this.AutoWalkWithinRange(6, 9, 2);
                    if (this.MapInfo.Number == 2067 && this.taurenhorn == 7)
                        this.AutoWalker(9, 19);
                    if (this.MapInfo.Number == 2067 && this.taurenhorn == 8)
                        this.AutoWalker(19, 9);
                    if (this.MapInfo.Number == 2067 && this.taurenhorn == 9)
                        this.AutoWalker(9, 0);
                    if (this.MapInfo.Number == 2068 && this.taurenhorn == 7 && !this.WithinRange(7, 10, 2))
                        this.AutoWalkWithinRange(7, 10, 2);
                    if (this.MapInfo.Number == 2068 && this.taurenhorn == 8)
                        this.AutoWalker(9, 0);
                    if (this.MapInfo.Number == 2063 && this.taurenhorn == 8 && !this.WithinRange(6, 9, 2))
                        this.AutoWalkWithinRange(6, 9, 2);
                    if (this.MapInfo.Number == 2063 && this.taurenhorn == 9)
                        this.AutoWalker(0, 9);
                    if (this.MapInfo.Number == 2064 && !this.WithinRange(12, 13, 2))
                        this.AutoWalkWithinRange(12, 13, 2);
                    else if (this.MapInfo.Number == 2064)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Desert Dunes"))
            {
                this.SelectTown("Noam");
                if (this.MapInfo.Number == 10056)
                    this.AutoWalker(4, 17);
                if (this.MapInfo.Number == 10055)
                    this.AutoWalker(0, 30);
                if (this.MapInfo.Number == 10034)
                    this.AutoWalker(0, 38);
                if (this.MapInfo.Number == 10052)
                    this.AutoWalker(39, 49);
                if (this.Tab.vwalklocaleslist == "DD ent")
                {
                    if (this.MapInfo.Number == 10051 && !this.WithinRange(22, 41, 3))
                        this.AutoWalkWithinRange(22, 41, 3);
                    else if (this.MapInfo.Number == 10051)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "Pyramid ent")
                {
                    if (this.SpellBar.Contains((ushort)10))
                    {
                        if (this.MapInfo.Number == 10051)
                            this.AutoWalker(22, 49);
                    }
                    else if (this.MapInfo.Number == 10051 && !this.WithinRange(22, 41, 3))
                        this.AutoWalkWithinRange(22, 41, 3);
                    else if (this.MapInfo.Number == 10051)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                    if (this.MapInfo.Number == 10261 && this.SpellBar.Contains((ushort)19))
                        this.AutoWalker(66, 54);
                    if (this.MapInfo.Number == 7300)
                    {
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "Pyramid center")
                {
                    if (this.SpellBar.Contains((ushort)10))
                    {
                        if (this.MapInfo.Number == 10051)
                            this.AutoWalker(22, 49);
                    }
                    else if (this.MapInfo.Number == 10051 && !this.WithinRange(22, 41, 3))
                        this.AutoWalkWithinRange(22, 41, 3);
                    else if (this.MapInfo.Number == 10051)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                    if (this.MapInfo.Number == 10261 && this.SpellBar.Contains((ushort)19))
                        this.AutoWalker(66, 54);
                    if (this.MapInfo.Number == 7300 && !this.WithinRange(47, 43, 2))
                        this.AutoWalkWithinRange(47, 43, 2);
                    else if (this.MapInfo.Number == 7300)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "Oasis")
                {
                    if (this.SpellBar.Contains((ushort)10))
                    {
                        if (this.MapInfo.Number == 10051)
                            this.AutoWalker(22, 49);
                    }
                    else if (this.MapInfo.Number == 10051 && !this.WithinRange(22, 41, 3))
                        this.AutoWalkWithinRange(22, 41, 3);
                    else if (this.MapInfo.Number == 10051)
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                    if (this.MapInfo.Number == 10261)
                        this.AutoWalker(75, 98);
                    if (this.MapInfo.Number == 10262)
                        this.AutoWalker(54, 49);
                    if (this.MapInfo.Number == 10281)
                    {
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Equals("Chaos") && this.MapInfo.Number == 4335)
            {
                if (this.Tab.vwalklocaleslist == "Chaos 34")
                {
                    this.AutoWalker(3, 91);
                    this.AutoWalker(12, 76);
                    this.AutoWalker(50, 37);
                    this.AutoWalker(34, 69);
                    this.AutoWalker(66, 70);
                    this.AutoWalker(81, 46);
                    this.AutoWalker(92, 21);
                    this.AutoWalker(91, 82);
                    this.AutoWalker(9, 6);
                    this.AutoWalker(32, 45);
                    this.AutoWalker(10, 38);
                    if (!this.WithinRange(74, 90, 3))
                    {
                        this.AutoWalkWithinRange(74, 90, 3);
                    }
                    else
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
                if (this.Tab.vwalklocaleslist == "Chaos 34 End")
                {
                    this.AutoWalker(68, 85);
                    this.AutoWalker(5, 33);
                    this.AutoWalker(19, 44);
                    this.AutoWalker(6, 3);
                    this.AutoWalker(90, 74);
                    this.AutoWalker(93, 12);
                    this.AutoWalker(76, 54);
                    this.AutoWalker(61, 64);
                    this.AutoWalker(42, 64);
                    this.AutoWalker(54, 30);
                    this.AutoWalker(3, 68);
                    if (!this.WithinRange(9, 90, 2))
                    {
                        this.AutoWalkWithinRange(9, 90, 2);
                    }
                    else
                    {
                        this.randomdest = (Location)null;
                        this.Tab.autowalker_button.Text = "Start";
                        this.autowalkon = false;
                    }
                }
            }
            if (this.Tab.vautowalker_locales.Contains("Nearest"))
            {
                if (this.MapInfo.Number == 3014)
                    this.AutoWalker(11, 21);
                if (this.MapInfo.Number == 3079 && this.ServerLocation.Y == 1)
                    this.AutoWalker(this.ServerLocation.X, 0);
                if (this.MapInfo.Number == 3079 && this.ServerLocation.Y == 5)
                    this.AutoWalker(this.ServerLocation.X, 6);
                if (this.MapInfo.Number == 3006)
                    this.AutoWalker(0, 8);
                if (this.MapInfo.Number == 136)
                    this.AutoWalker(6, 11);
                if (this.MapInfo.Number == 420)
                    this.AutoWalker(7, 14);
                if (this.MapInfo.Number == 498)
                    this.AutoWalker(5, 11);
            }
            if (this.Tab.vautowalker_locales.Equals("Nearest Bank"))
            {
                if (this.MapInfo.Number == 623)
                    this.AutoWalker(0, 49);
                if (this.MapInfo.Number == 600)
                    this.AutoWalker(12, 24);
                if (this.MapInfo.Number == 502)
                    this.AutoWalker(14, 8);
                if (this.MapInfo.Number == 181)
                    this.AutoWalker(8, 14);
                if (this.MapInfo.Number == 183)
                    this.AutoWalker(7, 14);
                if (this.MapInfo.Number == 184)
                    this.AutoWalker(7, 14);
                if (this.MapInfo.Number == 167 && (this.ServerLocation.Y >= 9 && (this.ServerLocation.X == 5 || this.ServerLocation.X == 6) || this.ServerLocation.Y == 11))
                    this.AutoWalkWithinRange(6, 6, 2);
                else if (this.MapInfo.Number == 167)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
                if (this.Towns.ContainsKey("Abel"))
                    this.SelectTown("Abel");
                else if (this.Towns.ContainsKey("Rucesion"))
                    this.SelectTown("Rucesion");
                else if (this.Towns.ContainsKey("Loures"))
                    this.SelectTown("Loures");
                if (this.MapInfo.Number == 3081 && this.ServerLocation.Y == 1)
                    this.AutoWalker(this.ServerLocation.X, 2);
                if (this.MapInfo.Number == 3081 && this.ServerLocation.Y == 5)
                    this.AutoWalker(this.ServerLocation.X, 6);
                if (this.MapInfo.Number == 3082 && this.ServerLocation.Y == 1)
                    this.AutoWalker(this.ServerLocation.X, 2);
                if (this.MapInfo.Number == 3082 && this.ServerLocation.Y == 5)
                    this.AutoWalker(this.ServerLocation.X, 6);
                if (this.MapInfo.Number == 3010)
                    this.AutoWalker(15, 15);
                if (this.MapInfo.Number == 505)
                    this.AutoWalker(42, 11);
                if (this.MapInfo.Number == 421)
                    this.AutoWalker(11, 8);
                if (this.MapInfo.Number == 422)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
                if (this.MapInfo.Number == 500)
                    this.AutoWalker(54, 69);
                if (this.MapInfo.Number == 135 && (this.ServerLocation.Y >= 9 && (this.ServerLocation.X == 5 || this.ServerLocation.X == 6) || this.ServerLocation.Y == 11))
                    this.AutoWalkWithinRange(6, 6, 2);
                else if (this.MapInfo.Number == 135)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
                if (this.MapInfo.Number == 129)
                    this.AutoWalker(8, 14);
                if (this.MapInfo.Number == 130)
                    this.AutoWalker(7, 14);
                if (this.MapInfo.Number == 150)
                    this.AutoWalker(6, 11);
                if (this.MapInfo.Number == 501)
                    this.AutoWalker(51, 13);
                if (this.MapInfo.Number == 148 && (this.ServerLocation.Y >= 9 && (this.ServerLocation.X == 5 || this.ServerLocation.X == 6) || this.ServerLocation.Y == 11))
                    this.AutoWalkWithinRange(6, 6, 2);
                else if (this.MapInfo.Number == 148)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
                if (this.MapInfo.Number == 1960)
                    this.AutoWalker(6, 13);
                if (this.MapInfo.Number == 662)
                    this.AutoWalker(29, 12);
                if (this.MapInfo.Number == 1966 && this.ServerLocation.Y > 10)
                    this.AutoWalkWithinRange(8, 6, 2);
                else if (this.MapInfo.Number == 1966)
                {
                    this.randomdest = (Location)null;
                    this.Tab.autowalker_button.Text = "Start";
                    this.autowalkon = false;
                }
            }
            if (!this.Tab.vautowalker_locales.Equals("Nearest Restaurant"))
                return;
            if (this.MapInfo.Number == 623)
                this.AutoWalker(0, 49);
            if (this.MapInfo.Number == 600)
                this.AutoWalker(12, 24);
            if (this.Towns.ContainsKey("Abel"))
                this.SelectTown("Abel");
            else if (this.Towns.ContainsKey("Rucesion"))
                this.SelectTown("Rucesion");
            else if (this.Towns.ContainsKey("Piet"))
                this.SelectTown("Piet");
            else if (this.Towns.ContainsKey("Loures"))
                this.SelectTown("Loures");
            if (this.MapInfo.Number == 500)
                this.AutoWalker(62, 60);
            if (this.MapInfo.Number == 135)
                this.AutoWalker(6, 11);
            if (this.MapInfo.Number == 130)
                this.AutoWalker(7, 14);
            if (this.MapInfo.Number == 129 && !this.WithinRange(8, 10, 2))
                this.AutoWalkWithinRange(8, 10, 2);
            else if (this.MapInfo.Number == 129)
            {
                this.randomdest = (Location)null;
                this.Tab.autowalker_button.Text = "Start";
                this.autowalkon = false;
            }
            if (this.MapInfo.Number == 502)
                this.AutoWalker(7, 50);
            if (this.MapInfo.Number == 168)
                this.AutoWalker(14, 5);
            if (this.MapInfo.Number == 167)
                this.AutoWalker(6, 11);
            if (this.MapInfo.Number == 181 && !this.WithinRange(8, 10, 2))
                this.AutoWalkWithinRange(8, 10, 2);
            else if (this.MapInfo.Number == 181)
            {
                this.randomdest = (Location)null;
                this.Tab.autowalker_button.Text = "Start";
                this.autowalkon = false;
            }
            if (this.MapInfo.Number == 3020)
                this.AutoWalker(23, 10);
            if (this.MapInfo.Number == 501)
                this.AutoWalker(11, 46);
            if (this.MapInfo.Number == 162 && !this.WithinRange(8, 10, 2))
                this.AutoWalkWithinRange(8, 10, 2);
            else if (this.MapInfo.Number == 162)
            {
                this.randomdest = (Location)null;
                this.Tab.autowalker_button.Text = "Start";
                this.autowalkon = false;
            }
            if (this.MapInfo.Number == 3012)
                this.AutoWalker(15, 8);
            if (this.MapInfo.Number == 505)
                this.AutoWalker(28, 44);
            if (this.MapInfo.Number == 3081 && this.ServerLocation.Y == 1)
                this.AutoWalker(this.ServerLocation.X, 0);
            if (this.MapInfo.Number == 3081 && this.ServerLocation.Y == 5)
                this.AutoWalker(this.ServerLocation.X, 6);
        }

        public void repair()
        {
            this.goldbefore = this.Statistics.Gold;
            this.SkillSpellCaption("repair all");
        }

        public void Red(Player e)
        {
            this.oktofollow = false;
            try
            {
                bool flag = Server.StaticCharacters[e.ID].IsSkulled;
                do
                {
                    this.MapInfo.UpdateBlocks(this);
                    if (Server.StaticCharacters[e.ID] != null && (int)e.ID != (int)this.PlayerID && (Server.StaticCharacters[e.ID].isskulled || Server.StaticCharacters[e.ID].IsSkulled) && (this.ClientLocation.DistanceFrom(e.Location) > 1 && this.IsClosestToYou(e.Location)) && !this.IsSurrounded(e.Location))
                    {
                        Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, e.Location.X, e.Location.Y, false);
                        for (int index = 0; index < path.Length && (!(this.refreshdelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.refreshdelay).TotalMilliseconds >= 1200.0); ++index)
                        {
                            if (Server.StaticCharacters[e.ID].IsSkulled)
                                flag = true;
                            if (this.Tab.walktored.Checked && (!this.pause && !this.pausewalk && e.IsOnScreen) && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && this.Tab.vredaislings && (path[index].Passable && this.IsClosestToYou(e.Location)) && (!this.IsSurrounded(e.Location) && Math.Abs(this.ClientLocation.X - path[index].X) + Math.Abs(this.ClientLocation.Y - path[index].Y) == 1)))
                            {
                                this.Walk(this.ClientLocation - new Location(path[index].X, path[index].Y));
                                this.MapInfo.UpdateBlocks(this);
                                Thread.Sleep(this.WalkSpeed(false));
                                if ((!flag || Server.StaticCharacters[e.ID].IsSkulled) && Server.StaticCharacters[e.ID].isskulled)
                                {
                                    if (this.ClientLocation.DistanceFrom(e.Location) == 1)
                                    {
                                        this.Refresh();
                                        Thread.Sleep(1200);
                                    }
                                }
                                else
                                    break;
                            }
                            else
                                break;
                        }
                    }
                    if (flag && !Server.StaticCharacters[e.ID].IsSkulled && this.redwaittime == DateTime.MinValue)
                        this.redwaittime = DateTime.UtcNow;
                    if (!Server.StaticCharacters[e.ID].isskulled && this.redwaittime == DateTime.MinValue)
                        this.redwaittime = DateTime.UtcNow;
                    Thread.Sleep(200);
                }
                while (this.redwaittime == DateTime.MinValue || DateTime.UtcNow.Subtract(this.redwaittime).TotalSeconds <= 3.0);
                this.redwaittime = DateTime.MinValue;
                this.oktofollow = true;
            }
            catch
            {
                this.oktofollow = true;
            }
            finally
            {
                this.oktofollow = true;
            }
        }

        public void FaceTarget(Location loc)
        {
            if (!this.oktofollow && !this.PlayerAtLocation(loc.X, loc.Y))
                return;
            if (loc.X == this.ServerLocation.X)
            {
                if (loc.Y > this.ServerLocation.Y && this.ServerLocation.Direction != Direction.South)
                {
                    this.Turn(Direction.South);
                    Thread.Sleep(250);
                }
                else
                {
                    if (loc.Y >= this.ServerLocation.Y || this.ServerLocation.Direction == Direction.North)
                        return;
                    this.Turn(Direction.North);
                    Thread.Sleep(250);
                }
            }
            else
            {
                if (loc.Y != this.ServerLocation.Y)
                    return;
                if (loc.X > this.ServerLocation.X && this.ServerLocation.Direction != Direction.East)
                {
                    this.Turn(Direction.East);
                    Thread.Sleep(250);
                }
                else if (loc.X < this.ServerLocation.X && this.ServerLocation.Direction != Direction.West)
                {
                    this.Turn(Direction.West);
                    Thread.Sleep(250);
                }
            }
        }

        public void MoveOver()
        {
            this.MapInfo.UpdateBlocks(this);
            if (this.MapInfo.Tiles[this.ServerLocation.X - 1, this.ServerLocation.Y] != null && this.MapInfo.Tiles[this.ServerLocation.X - 1, this.ServerLocation.Y].Passable)
            {
                this.Walk(this.ServerLocation - new Location(this.ServerLocation.X - 1, this.ServerLocation.Y));
                Thread.Sleep(420);
            }
            else if (this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y - 1] != null && this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y - 1].Passable)
            {
                this.Walk(this.ServerLocation - new Location(this.ServerLocation.X, this.ServerLocation.Y - 1));
                Thread.Sleep(420);
            }
            else if (this.MapInfo.Tiles[this.ServerLocation.X + 1, this.ServerLocation.Y] != null && this.MapInfo.Tiles[this.ServerLocation.X + 1, this.ServerLocation.Y].Passable)
            {
                this.Walk(this.ServerLocation - new Location(this.ServerLocation.X + 1, this.ServerLocation.Y));
                Thread.Sleep(420);
            }
            else
            {
                if (this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y + 1] == null || !this.MapInfo.Tiles[this.ServerLocation.X, this.ServerLocation.Y + 1].Passable)
                    return;
                this.Walk(this.ServerLocation - new Location(this.ServerLocation.X, this.ServerLocation.Y + 1));
                Thread.Sleep(420);
            }
        }

        public void WayRegion()
        {
            if (Program.MainForm.alarm_walk.Checked && this.lastaction != DateTime.MinValue && DateTime.UtcNow.Subtract(this.lastaction).TotalSeconds > (double)Program.MainForm.alarm_walkval.Value && !this.Mobbed)
            {
                this.lastaction = DateTime.UtcNow;
                if (!Server.SentryAlarm)
                {
                    this.SendMessage(this.Name + " has been stopped for a while!", "red", true);
                    User32.FlashWindow(this.mainProc.MainWindowHandle, false);
                    Server.SentryAlarm = true;
                    Server.alarm = new SoundPlayer(Assembly.GetExecutingAssembly().GetManifestResourceStream("ProxyBase.MotherElevatorMuzak.wav"));
                    Server.alarmTimer = DateTime.UtcNow;
                    Server.alarm.PlayLooping();
                }
            }
            else if (this.Mobbed)
                this.lastaction = DateTime.UtcNow;
            if (this.Tab.looton.Checked && this.Tab.walktoloot.Checked && this.InventoryIsFull())
            {
                this.SendMessage("Your inventory is full, stopped walking!", "red", false);
            }
            else
            {
                int number = this.MapInfo.Number;
                this.MapInfo.UpdateBlocks(this);
                this.WayRegions = this.TempRegions[number].Regions;
                if (this.nearest != null && this.WayRegions.ContainsKey(this.nearest) && this.nearest != this.WayRegions.ElementAt<KeyValuePair<Location, string>>(0).Key && this.WayRegions[this.nearest].Equals("WayPoint") && this.nearest.DistanceFrom(this.ClientLocation) <= 1)
                {
                    if (this.nearest.DistanceFrom(this.ClientLocation) <= 2 && this.ServerLocation.DistanceFrom(this.ClientLocation) > 5)
                    {
                        this.Refresh();
                        Thread.Sleep(1200);
                        return;
                    }
                    this.ignorewaitatdoors = false;
                    this.Previous.Add(this.nearest);
                }
                if (!this.ignorewaitatdoors && (!this.Tab.vactonlyinmobs || this.Tab.vactonlyinmobs && !this.Mobbed))
                {
                    if (this.Tab.Wayregion.waitonplayers.Checked && !this.WaitOnPlayersInRange() || this.Tab.vactonlyinmobs && this.Mobbed)
                        return;
                    if (this.Tab.vwalktoloot && this.loot && this.walktoloot)
                    {
                        Npc i = this.NearestItem();
                        if (i != null && i.IsOnScreen && !this.ServerLocation.WithinSquare(i.Location, 2))
                        {
                            Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, i.Location.X, i.Location.Y, false);
                            if (path.Length == 0)
                                i.OutofReach = true;
                            if (path.Length != 0 && path.Length < i.DistanceFrom(this.ServerLocation) * 2)
                            {
                                this.WalkToLoot(i);
                                return;
                            }
                            if (this.walktoloot)
                                this.walktoloot = false;
                        }
                        else if (i == null && this.walktoloot)
                            this.walktoloot = false;
                    }
                }
                if (this.itemdroppeddelay != DateTime.MinValue && DateTime.UtcNow.Subtract(this.itemdroppeddelay).TotalSeconds <= 3.0 || (!this.walk || this.WayRegions.Count <= 0))
                    return;
                this.nearest = (Location)null;
                if (this.Previous.Count == 0)
                {
                    if (this.TempRegions[number].LastPoint != null)
                    {
                        this.Previous.Add(this.TempRegions[number].LastPoint);
                        this.TempRegions[number].LastPoint = (Location)null;
                    }
                    else
                        this.Previous.Add(this.WayRegions.Keys.Last<Location>());
                }
                if (this.Previous.Count > 0)
                {
                    int index = 0;
                    foreach (KeyValuePair<Location, string> wayRegion in this.WayRegions)
                    {
                        if (wayRegion.Key != null)
                        {
                            ++index;
                            if (this.Previous.Last<Location>() == wayRegion.Key)
                            {
                                if (this.Previous.Last<Location>() == this.WayRegions.Keys.Last<Location>())
                                {
                                    this.Previous.Clear();
                                    this.Previous.Add(wayRegion.Key);
                                    this.nearest = this.WayRegions.ElementAt<KeyValuePair<Location, string>>(0).Key;
                                    if (this.DistanceFrom(this.nearest) > 15)
                                    {
                                        this.ignorewaitatdoors = false;
                                        break;
                                    }
                                    break;
                                }
                                this.nearest = this.WayRegions.ElementAt<KeyValuePair<Location, string>>(index).Key;
                                break;
                            }
                        }
                    }
                }
                if (this.WayRegions[this.nearest].Equals("Block"))
                {
                    this.Previous.Add(this.nearest);
                }
                else
                {
                    if (this.NorajoBesideMe)
                        return;
                    if (this.Tab.vwaitonmonsters || this.Tab.lurewithspells.Checked || this.Tab.lurewithlamh.Checked)
                    {
                        foreach (Npc target in this.TargetArray())
                        {
                            if (target != null && target.IsOnScreen && (!this.HasInfiniteMR(target.Image) && target.IsBehind(this.ServerLocation)) && (target.DistanceFrom(this.ServerLocation) >= 7 && target.IsInMaxView(this.ServerLocation, 12)) && target.DistanceFrom(this.nearest) >= this.DistanceFrom(this.nearest) && (!Server.StaticCharacters[target.ID].hasdion && !Server.StaticCharacters[target.ID].hasmonsterdion))
                            {
                                Point[] path = this.MapInfo.FindPath(this.ServerLocation.X, this.ServerLocation.Y, target.Location.X, target.Location.Y, true);
                                if (path != null && path.Length <= target.DistanceFrom(this.ServerLocation))
                                    return;
                            }
                        }
                    }
                    Point[] path1 = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, this.nearest.X, this.nearest.Y, false);
                    if (path1.Length == 0)
                    {
                        if (this.WayRegions[this.nearest].Equals("Door"))
                            this.TempRegions[number].LastPoint = this.nearest;
                        if (this.WayRegions[this.nearest].Equals("WayPoint") && this.nearest.DistanceFrom(this.ClientLocation) <= 1)
                        {
                            if (this.nearest.DistanceFrom(this.ClientLocation) <= 2 && this.ServerLocation.DistanceFrom(this.ClientLocation) > 5)
                            {
                                this.Refresh();
                                Thread.Sleep(1200);
                                return;
                            }
                            this.ignorewaitatdoors = false;
                            this.Previous.Add(this.nearest);
                            return;
                        }
                    }
                    if (path1.Length > 0)
                    {
                        if (this.WayRegions[this.nearest].Equals("Door"))
                            this.TempRegions[number].LastPoint = this.nearest;
                        for (int index = 0; index < path1.Length; ++index)
                        {
                            if (this.WayRegions[this.nearest].Equals("Door"))
                                this.TempRegions[number].LastPoint = this.nearest;
                            if (!this.ignorewaitatdoors)
                            {
                                if (this.Tab.vwaitonmonsters || this.Tab.lurewithspells.Checked || this.Tab.lurewithlamh.Checked)
                                {
                                    foreach (Npc target in this.TargetArray())
                                    {
                                        if (target != null && target.IsOnScreen && (!this.HasInfiniteMR(target.Image) && target.IsBehind(this.ServerLocation)) && target.DistanceFrom(this.ServerLocation) >= 7 && target.IsInMaxView(this.ServerLocation, 12) && (!Server.StaticCharacters[target.ID].hasdion && !Server.StaticCharacters[target.ID].hasmonsterdion))
                                        {
                                            Point[] path2 = this.MapInfo.FindPath(this.ServerLocation.X, this.ServerLocation.Y, target.Location.X, target.Location.Y, true);
                                            if (path2 != null && path2.Length <= target.DistanceFrom(this.ServerLocation))
                                                return;
                                        }
                                    }
                                }
                                if ((!this.Tab.Wayregion.waitonplayers.Checked || this.WaitOnPlayersInRange()) && (!this.Tab.vwalktoloot || !this.loot || !this.walktoloot))
                                {
                                    if (this.castingoneline)
                                    {
                                        Thread.Sleep(1000);
                                        break;
                                    }
                                    if (!this.Tab.vactonlyinmobs || !this.Mobbed)
                                    {
                                        if (this.WaitOnBlankNames())
                                        {
                                            this.lastaction = DateTime.UtcNow;
                                            break;
                                        }
                                    }
                                    else
                                        break;
                                }
                                else
                                    break;
                            }
                            if (number == this.MapInfo.Number && (!this.IsSkulled && !this.IsStunned && (!this.IsSuained && !this.SpellBar.Contains((ushort)90)) && !this.SpellBar.Contains((ushort)97) && !this.SpellBar.Contains((ushort)101) && this.Tab.vwayregionson) && (!this.pause && !this.pausewalk && !this.donotwalk && ((!(this.itemdroppeddelay != DateTime.MinValue) || DateTime.UtcNow.Subtract(this.itemdroppeddelay).TotalSeconds > 3.0) && !this.disstopwalk && (path1[index].Passable && Math.Abs(this.ClientLocation.X - path1[index].X) + Math.Abs(this.ClientLocation.Y - path1[index].Y) == 1))) && (!this.Tab.haltwalknonfriends.Checked || this.SafeToWalkFast || this.MapInfo.Number == 2141))
                            {
                                this.Walk(this.ClientLocation - new Location(path1[index].X, path1[index].Y));
                                this.laststep = DateTime.UtcNow;
                                this.lastaction = DateTime.UtcNow;
                                if (this.WayRegions[this.nearest].Equals("WayPoint") && this.nearest.DistanceFrom(this.ClientLocation) <= 1)
                                {
                                    if (this.nearest.DistanceFrom(this.ClientLocation) <= 2 && this.ServerLocation.DistanceFrom(this.ClientLocation) > 5)
                                    {
                                        this.Refresh();
                                        Thread.Sleep(1200);
                                        break;
                                    }
                                    this.ignorewaitatdoors = false;
                                    this.Previous.Add(this.nearest);
                                    break;
                                }
                                if (this.WayRegions[this.nearest].Equals("Door") && (this.ClientLocation.X == this.nearest.X && this.ClientLocation.Y == this.nearest.Y))
                                {
                                    this.Refresh();
                                    Thread.Sleep(1200);
                                }
                                this.MapInfo.UpdateBlocks(this);
                                Thread.Sleep(this.WalkSpeed(false));
                            }
                            else
                                break;
                        }
                    }
                }
            }
        }

        public bool WaitOnPlayersInRange()
        {
            int num = 0;
            foreach (object obj in this.Tab.Wayregion.waitonplayerslistbox.Items)
            {
                if (obj != null)
                {
                    Player characterByName = this.FindCharacterByName<Player>(obj.ToString());
                    if (characterByName == null)
                    {
                        if (!this.missing.Contains(obj.ToString()))
                            this.missing.Add(obj.ToString());
                        ++num;
                    }
                    else if (characterByName.IsOnScreen && this.ServerLocation.DistanceFrom(characterByName.Location) < 9)
                    {
                        if (this.missing.Contains(obj.ToString()))
                            this.missing.Remove(obj.ToString());
                    }
                    else if (!characterByName.IsOnScreen)
                    {
                        if (!this.missing.Contains(obj.ToString()))
                            this.missing.Add(obj.ToString());
                        ++num;
                    }
                    else if (this.ServerLocation.DistanceFrom(characterByName.Location) >= 9)
                        ++num;
                }
            }
            return num <= 0;
        }

        public void SpellAlbumEdit()
        {
        }

        public void DisableBlind()
        {
            this.stream.Position = this.dall;
            this.stream.WriteByte((byte)117);
        }

        public void EnableBlind()
        {
            this.stream.Position = this.dall;
            this.stream.WriteByte((byte)116);
        }

        public void DisableWalls()
        {
            this.stream.Position = this.walls;
            this.stream.WriteByte((byte)185);
            this.stream.WriteByte((byte)0);
            this.stream.WriteByte((byte)0);
            this.stream.WriteByte((byte)0);
            this.stream.WriteByte((byte)0);
            this.stream.WriteByte((byte)144);
        }

        public void EnableWalls()
        {
            this.stream.Position = this.walls;
            this.stream.WriteByte((byte)139);
            this.stream.WriteByte((byte)136);
            this.stream.WriteByte((byte)176);
            this.stream.WriteByte((byte)0);
            this.stream.WriteByte((byte)0);
            this.stream.WriteByte((byte)0);
        }

        public void EnableSeeInvis()
        {
        }

        public void DisableSeeInvis()
        {
        }

        public void LogOff()
        {
            IntPtr mainWindowHandle = this.mainProc.MainWindowHandle;
            if ((Program.MainForm.loglabormules.Checked || Program.MainForm.getmentored.Checked || (Program.MainForm.logpigchase.Checked || Program.MainForm.frostylog.Checked)) && Program.MainForm.labormulelist.Items.Count > 0 && Program.MainForm.labormulelist.Items.Contains((object)(this.Name + "," + Server.Stuff[this.Name])))
                Program.MainForm.labormulelist.Items.RemoveAt(Program.MainForm.labormulelist.Items.IndexOf((object)(this.Name + "," + Server.Stuff[this.Name])));
            User32._PostMessage(mainWindowHandle, 256, 27, User32.MakeLParam(1, User32.MapVirtualKey(27, 0)));
            User32._PostMessage(mainWindowHandle, 257, 27, User32.MakeLParam(1, User32.MapVirtualKey(27, 0)));
            Thread.Sleep(100);
            User32._PostMessage(mainWindowHandle, 256, 27, User32.MakeLParam(1, User32.MapVirtualKey(27, 0)));
            User32._PostMessage(mainWindowHandle, 257, 27, User32.MakeLParam(1, User32.MapVirtualKey(27, 0)));
            Thread.Sleep(100);
            User32._PostMessage(mainWindowHandle, 256, 27, User32.MakeLParam(1, User32.MapVirtualKey(27, 0)));
            User32._PostMessage(mainWindowHandle, 257, 27, User32.MakeLParam(1, User32.MapVirtualKey(27, 0)));
            Thread.Sleep(500);
            User32._PostMessage(mainWindowHandle, 256, 81, User32.MakeLParam(1, User32.MapVirtualKey(81, 0)));
            User32._PostMessage(mainWindowHandle, 257, 81, User32.MakeLParam(1, User32.MapVirtualKey(81, 0)));
            Thread.Sleep(1000);
            User32._PostMessage(mainWindowHandle, 256, 88, User32.MakeLParam(1, User32.MapVirtualKey(88, 0)));
            User32._PostMessage(mainWindowHandle, 257, 88, User32.MakeLParam(1, User32.MapVirtualKey(88, 0)));
            new Thread(new ParameterizedThreadStart(this.logout)).Start((object)mainWindowHandle);
        }

        public void logout(object hwnd)
        {
            while (!this.logoff)
                Thread.Sleep(200);
            Thread.Sleep(1000);
            User32._MouseClick((IntPtr)hwnd, 599, 165, (int)this.windowSize);
            if (!Program.MainForm.loglabormules.Checked && !Program.MainForm.getmentored.Checked && (!Program.MainForm.logpigchase.Checked && !Program.MainForm.frostylog.Checked) || Program.MainForm.labormulelist.Items.Count <= 0)
                return;
            new Thread(new ParameterizedThreadStart(this.LogNext)).Start(hwnd);
        }

        public void LogNext(object hwnd)
        {
            if (!Program.MainForm.loglabormules.Checked && !Program.MainForm.getmentored.Checked && (!Program.MainForm.logpigchase.Checked && !Program.MainForm.frostylog.Checked) || Program.MainForm.labormulelist.Items.Count <= 0)
                return;
            string[] strArray = Program.MainForm.labormulelist.Items[0].ToString().Split(',');
            string text = strArray[0];
            string keys = strArray[1];
            Thread.Sleep(3000);
            User32._MouseClick((IntPtr)hwnd, 120, 318, (int)this.windowSize);
            Thread.Sleep(500);
            User32._SendText((IntPtr)hwnd, text);
            Thread.Sleep(200);
            User32.PopupHitReturn((IntPtr)hwnd);
            Thread.Sleep(200);
            User32._SendKeys((IntPtr)hwnd, keys);
            Thread.Sleep(200);
            User32.PopupHitReturn((IntPtr)hwnd);
        }

        public void LogAfterDC()
        {
            string name = this.Name;
            string keys = Server.Stuff[this.Name];
            Process process = Server.Relog[name].Process;
            IntPtr mainWindowHandle = Server.Relog[name].Process.MainWindowHandle;
            if (Server.Relog[name].ServerReset)
                Thread.Sleep(120000);
            Thread.Sleep(1500);
            User32._MouseClick(mainWindowHandle, 292, 228, (int)this.windowSize);
            do
            {
                Thread.Sleep(200);
                if (process.HasExited)
                {
                    Server.Relog.Remove(name);
                    this.RelogThread.Abort();
                    this.RelogThread = (Thread)null;
                }
                if (!Program.MainForm.relog.Checked)
                {
                    this.RelogThread.Abort();
                    this.RelogThread = (Thread)null;
                }
                if (!Server.Relog.ContainsKey(name))
                {
                    this.RelogThread.Abort();
                    this.RelogThread = (Thread)null;
                }
            }
            while (Server.Relog[name].WaitForOk);
            Thread.Sleep(200);
            User32._MouseClick(mainWindowHandle, 234, 391, (int)this.windowSize);
            Thread.Sleep(1000);
            User32._MouseClick(mainWindowHandle, 120, 318, (int)this.windowSize);
            Thread.Sleep(500);
            User32._SendText(mainWindowHandle, name);
            Thread.Sleep(200);
            User32.PopupHitReturn(mainWindowHandle);
            Thread.Sleep(200);
            User32._SendKeys(mainWindowHandle, keys);
            Thread.Sleep(200);
            User32.PopupHitReturn(mainWindowHandle);
        }

        public void Relogged()
        {
            if (!Directory.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower()))
                return;
            if (System.IO.File.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\" + this.Name.ToLower() + "_dc.xml"))
            {
                XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\" + this.Name.ToLower() + "_dc.xml");
                List<string> stringList = new List<string>();
                if (xdocument.Element((XName)"Settings").Element((XName)"GroupCount") != null)
                {
                    for (int index = 0; (long)index < (long)Convert.ToUInt32(xdocument.Element((XName)"Settings").Element((XName)"GroupCount").Value); ++index)
                    {
                        if (xdocument.Element((XName)"Settings").Element((XName)("GroupMember_" + (object)index)).Value != string.Empty)
                            stringList.Add(xdocument.Element((XName)"Settings").Element((XName)("GroupMember_" + (object)index)).Value);
                    }
                }
                if (Server.Relog.ContainsKey(this.Name) && !Server.Relog[this.Name].Redirected)
                {
                    foreach (string name in stringList)
                    {
                        if (name != "")
                        {
                            if (Server.Alts.ContainsKey(name.ToLower()))
                            {
                                this.ForceGroup(name, (byte)3);
                                break;
                            }
                            if (Server.friendlist != null && Server.friendlist.Contains(name.ToLower()))
                            {
                                this.ForceGroup(name, (byte)3);
                                break;
                            }
                        }
                    }
                }
                Server.Relog.Remove(this.Name);
                if (xdocument.Element((XName)"Settings").Element((XName)"PlayState") != null)
                    this.pause = Convert.ToBoolean(xdocument.Element((XName)"Settings").Element((XName)"PlayState").Value);
                if (this.pause)
                {
                    this.Tab.btnPlay.Enabled = true;
                    this.Tab.btnStop.Enabled = false;
                }
                else
                {
                    this.Tab.btnPlay.Enabled = false;
                    this.Tab.btnStop.Enabled = true;
                }
            }
        }

        public void DAFind()
        {
            this.disablelegend = true;
            uint num1 = uint.Parse(this.Tab.DAid1.Text);
            uint num2 = uint.Parse(this.Tab.DAid2.Text);
            if (num1 < num2)
            {
                if (Math.Abs((long)(num2 - num1)) > 100000L)
                {
                    this.SendMessage("Search 100k or less at a time", "red", false);
                    this.Tab.button4.Enabled = true;
                }
                else
                {
                    for (uint id = num1; id <= num2; ++id)
                    {
                        if ((int)id != (int)this.PlayerID)
                            this.ClickEntity(id);
                    }
                    this.Whisper("zz", " ");
                }
            }
            else
            {
                this.SendMessage("Search error.", "red", false);
                this.Tab.button4.Enabled = true;
            }
        }

        public void PopupOption1()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 333, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption2()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 315, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption3()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 295, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption4()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 280, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption5()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 261, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption6()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 241, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption7()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 226, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption8()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 207, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public void PopupOption9()
        {
            User32._MouseClick(this.mainProc.MainWindowHandle, 604, 187, (int)this.windowSize);
            Thread.Sleep(350);
        }

        public Skill GetSkill(string name)
        {
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skill.Name == name)
                    return skill;
            }
            return (Skill)null;
        }

        public string GetSkillName(int skillSlot)
        {
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skill.SkillSlot == skillSlot)
                    return skill.Name;
            }
            return string.Empty;
        }

        public int SkillSlot(string skillName)
        {
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skillName.Equals(skill.Name, StringComparison.CurrentCultureIgnoreCase))
                    return skill.SkillSlot;
            }
            return 0;
        }

        public int MedSkillSlot(string skillName)
        {
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skill.Name.ToLower().Contains(skillName.ToLower()))
                    return skill.SkillSlot;
            }
            return 0;
        }

        public bool UseSkill(string skillName, uint targetid = 0)
        {
            if (!this.HasSkill(skillName, false) || (!this.canskill || !this.skillmap))
                return false;
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skill.Name.Equals(skillName, StringComparison.CurrentCultureIgnoreCase) && DateTime.UtcNow > skill.NextUse)
                {
                    if (targetid != 0U && !this.Characters[targetid].IsInFront(this.ServerLocation))
                        this.FaceTarget(this.Characters[targetid].Location);
                    if (!string.IsNullOrEmpty(skill.Caption))
                        this.SkillSpellCaption(skill.Caption);
                    this.UseSkill(skill.SkillSlot);
                    return true;
                }
            }
            return false;
        }

        public bool UseMedSkill(string skillName)
        {
            if (!this.HasSkill(skillName, true) || (!this.canskill || !this.skillmap))
                return false;
            foreach (Skill skill in this.SkillBook)
            {
                if (skill != null && skill.Name.ToLower().Contains(skillName.ToLower()) && DateTime.UtcNow > skill.NextUse)
                {
                    if (!string.IsNullOrEmpty(skill.Caption))
                        this.SkillSpellCaption(skill.Caption);
                    this.UseSkill(skill.SkillSlot);
                    return true;
                }
            }
            return false;
        }

        public bool CanSkill(string name, bool mednum = false)
        {
            if (!this.HasSkill(name, mednum))
                return false;
            foreach (Skill skill in this.SkillBook)
            {
                if (mednum)
                {
                    if (skill != null && (skill.Name.Contains(name) && DateTime.UtcNow > skill.NextUse))
                        return true;
                }
                else if (skill != null && (skill.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase) && DateTime.UtcNow > skill.NextUse))
                    return true;
            }
            return false;
        }

        public bool HasSkill(string name, bool mednum = false)
        {
            foreach (Skill skill in this.SkillBook)
            {
                if (mednum)
                {
                    if (skill != null && skill.Name.ToLower().Contains(name.ToLower()))
                        return true;
                }
                else if (skill != null && skill.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                    return true;
            }
            return false;
        }

        public void MacroCast(string spellName, uint? target)
        {
            Spell s = this.GetSpell(spellName);
            if (s == null)
                return;
            DateTime nextUse;
            if (s.CastLines > 0)
            {
                DateTime utcNow = DateTime.UtcNow;
                nextUse = s.NextUse;
                DateTime dateTime = nextUse.Subtract(new TimeSpan(0, 0, s.CastLines));
                if (utcNow > dateTime)
                {
                    new Thread((ThreadStart)(() => this.StartCast(s.CastLines))).Start();
                    for (int index = 0; index < s.CastLines; ++index)
                    {
                        if (!string.IsNullOrEmpty(s.Captions[index]))
                            this.SkillSpellCaption(s.Captions[index]);
                        if (s.CastLines == 1 && !this.SafeToWalkFast && !this.Tab.vimpskillbutton)
                            Thread.Sleep(1000);
                        else if (!this.Tab.halfcast.Checked && s.CastLines == 1 && this.SafeToWalkFast && !s.Name.Contains(" Prayer"))
                            Thread.Sleep(500);
                        else
                            Thread.Sleep(1000);
                    }
                    this.SkillSpellCaption(s.Name);
                }
            }
            if (s.Name.StartsWith("Regeneration "))
            {
                DateTime utcNow = DateTime.UtcNow;
                nextUse = s.NextUse;
                DateTime dateTime = nextUse.Subtract(new TimeSpan(0, 0, s.CastLines));
                if (utcNow > dateTime)
                    this.CastSpell(s.SpellSlot, target);
            }
            else
                this.CastSpell(s.SpellSlot, target);
        }

        public bool Cast(string spellName, uint? target)
        {
            if (this.autowalkon && spellName != "dachaidh" && (spellName != "ard ioc" && spellName != "mor ioc") && (spellName != "ioc" && spellName != "beag ioc" && (spellName != "Leafhopper Chirp" && !spellName.Contains("ao "))) && (spellName != "dion" && spellName != "mor dion" && spellName != "Draco Stance") && !spellName.Contains(" Skin") || this.MapInfo.Number == 3014 && !spellName.Contains(" Prayer") && !spellName.Equals("Gem Polishing") || this.MapInfo.Name.Contains(" Inn") && spellName != "dachaidh" && !spellName.Contains(" Prayer"))
                return false;
            TimeSpan timeSpan = DateTime.UtcNow.Subtract(this.mancastdelay);
            if (timeSpan.TotalSeconds < 1.0)
                return false;
            this.IsCasting = true;
            if (spellName != "Hide" && spellName != "White Bat Stance" && spellName != "Leafhopper Chirp" && this.SpellBar.Contains((ushort)10) || this.IsSuained && this.Tab.vselfaosuain && spellName != "ao suain" && spellName != "Leafhopper Chirp")
                return false;
            if (this.cancast && this.spellmap)
            {
                int num1;
                if (!this.SafeToWalkFast)
                {
                    timeSpan = DateTime.UtcNow.Subtract(this.newmapdelay);
                    if (timeSpan.TotalSeconds < 1.5 && !spellName.Contains("ao suain"))
                    {
                        num1 = !(spellName != "Leafhopper Chirp") ? 1 : 0;
                        goto label_11;
                    }
                }
                num1 = 1;
                label_11:
                if (num1 == 0)
                    return false;
                if (this.Tab.vstaffswitch && (spellName == "ao suain" || spellName == "Leafhopper Chirp" ? (!target.HasValue ? 1 : ((int)target.Value == (int)this.PlayerID ? 1 : 0)) : (spellName.Contains("ao suain") ? 0 : (spellName != "Leafhopper Chirp" ? 1 : 0))) != 0)
                {
                    if (this.Path != (byte)3 && this.Path != (byte)4 && (spellName.Equals("dion") || spellName.Equals("Draco Stance") || spellName.Equals("Stone Skin")) && this.staffnow.Contains("Staff of "))
                    {
                        if (this.HasSpell("Iron Skin", false))
                        {
                            this.MacroCast("Iron Skin", new uint?());
                            return false;
                        }
                        if (this.HasSpell("mor dion", false))
                        {
                            this.MacroCast("mor dion", new uint?());
                            return false;
                        }
                    }
                    if (this.Path != (byte)3 && this.Path != (byte)4 && (spellName.Equals("Iron Skin") || spellName.Equals("mor dion")) && !this.staffnow.Contains("Staff of "))
                    {
                        if (this.HasSpell("Draco Stance", false))
                        {
                            this.MacroCast("Draco Stance", new uint?());
                            return false;
                        }
                        if (this.HasSpell("dion", false))
                        {
                            this.MacroCast("dion", new uint?());
                            return false;
                        }
                        if (this.HasSpell("Stone Skin", false))
                        {
                            this.MacroCast("Stone Skin", new uint?());
                            return false;
                        }
                    }
                    if (this.staffnow.Contains("Staff of ") && (spellName.Contains("Karura") || spellName.Contains("Feral") || spellName.Contains("Komodas")))
                        return false;
                    string staffnow = this.staffnow;
                    Spell spell = this.GetSpell(spellName);
                    if (spell != null && spell.CastLines > 0)
                    {
                        int num2;
                        if (this.shakeyhands)
                        {
                            timeSpan = DateTime.UtcNow.Subtract(this.shakeyhandsdelay);
                            num2 = timeSpan.TotalSeconds <= 1.0 ? 1 : 0;
                        }
                        else
                            num2 = 1;
                        if (num2 == 0)
                            this.shakeyhands = false;
                        if (!this.SpellBar.Contains((ushort)90) && !this.IsSuained && !this.shakeyhands)
                        {
                            if (this.Path == (byte)3)
                            {
                                if ((spell.Name == "ard naomh aite" || spell.Name == "mor fas nadur") && this.HasItem("Magus Zeus") && this.staffnow != "Magus Zeus")
                                {
                                    this.UseItem("Magus Zeus");
                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                    Thread.Sleep(500);
                                    for (int index = 0; index < 10; ++index)
                                    {
                                        Thread.Sleep(200);
                                        if (this.shakeyhands || staffnow != this.staffnow)
                                            break;
                                    }
                                    goto label_160;
                                }
                                else if ((spell.Name == "cradh" || spell.Name == "mor cradh" || spell.Name == "ard cradh") && this.HasItem("Magus Ares") && this.staffnow != "Magus Ares")
                                {
                                    this.UseItem("Magus Ares");
                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                    Thread.Sleep(500);
                                    for (int index = 0; index < 10; ++index)
                                    {
                                        Thread.Sleep(200);
                                        if (this.shakeyhands || staffnow != this.staffnow)
                                            break;
                                    }
                                    goto label_160;
                                }
                            }
                            if (this.staffnow.Contains("Staff of ") && Server.SpellList[spellName].BaseLines == 0 && ((this.Path != (byte)3 || this.Path != (byte)4) && this.BestWeapon() != string.Empty))
                            {
                                int num3;
                                if (!(this.EquipWeaponDelay == DateTime.MinValue))
                                {
                                    timeSpan = DateTime.UtcNow.Subtract(this.EquipWeaponDelay);
                                    num3 = timeSpan.TotalMilliseconds <= 2000.0 ? 1 : 0;
                                }
                                else
                                    num3 = 0;
                                if (num3 == 0)
                                {
                                    if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                                        this.MacroCast(this.druidform.Name, new uint?());
                                    this.UseItem(this.BestWeapon());
                                    this.EquipWeaponDelay = DateTime.UtcNow;
                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                    Thread.Sleep(500);
                                    for (int index = 0; index < 10; ++index)
                                    {
                                        Thread.Sleep(200);
                                        if (this.shakeyhands || staffnow != this.staffnow)
                                            break;
                                    }
                                    goto label_160;
                                }
                            }
                            bool flag1;
                            if (spell.Name.Equals("Shock Arrow") || spell.Name.Contains("Frost Arrow"))
                            {
                                if (!this.staffnow.Contains("Bow"))
                                {
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (obj != null && (obj.Name.Contains("Yumi Bow") || obj.Name == "Andor Bow" || (obj.Name.Equals("Sen Bow") || obj.Name.Equals("Jenwir Bow")) || obj.Name.Equals("Royal Bow") || obj.Name.Equals("Wooden Bow")))
                                        {
                                            this.UseItem(obj.InventorySlot);
                                            this.StaffSwitchDelay = DateTime.UtcNow;
                                            Thread.Sleep(500);
                                            for (int index = 0; index < 10; ++index)
                                            {
                                                Thread.Sleep(200);
                                                if (this.shakeyhands || staffnow != this.staffnow)
                                                    break;
                                            }
                                            goto label_160;
                                        }
                                    }
                                }
                            }
                            else if (spell.CastLines > 0)
                            {
                                if (spell.Name == "ard cradh" || spell.Name == "mor cradh" || spell.Name == "cradh")
                                {
                                    bool flag2 = false;
                                    foreach (Item obj in this.Inventory)
                                    {
                                        if (obj != null && obj.Name == "Empowered Holy Gnarl")
                                        {
                                            this.StaffSwitchDelay = DateTime.UtcNow;
                                            this.UseItem(obj.InventorySlot);
                                            Thread.Sleep(500);
                                            for (int index = 0; index < 10; ++index)
                                            {
                                                Thread.Sleep(200);
                                                if (this.shakeyhands || staffnow != this.staffnow)
                                                    goto label_160;
                                            }
                                            goto label_160;
                                        }
                                    }
                                    if (!flag2)
                                    {
                                        if (this.Tab.vfollowplayer && !this.pausewalk && !this.Tab.vcastwhilefollow && !this.keepcasting)
                                        {
                                            Player characterByName = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                                            if (characterByName != null && characterByName.IsOnScreen && this.ServerLocation.DistanceFrom(characterByName.Location) > 9)
                                            {
                                                if (spellName != "ao suain" && spellName != "Leafhopper Chirp")
                                                    return false;
                                                goto label_160;
                                            }
                                        }
                                        foreach (Item obj in this.Inventory)
                                        {
                                            if (obj != null && (!this.staffnow.Contains("Dragon Emberwood Staff") && !this.staffnow.Contains("Star Crafted Staff") && !this.staffnow.Contains("Dragon Infused Staff") && (!this.staffnow.Contains("Yowien Tree Staff") && !this.staffnow.Contains("Glimmering Wand")) && (!this.staffnow.Contains("Brute's Quill") && !this.staffnow.Contains("Holy Hy-brasyl Baton") && (!this.staffnow.Equals("Empowered Magus Orb") && !this.staffnow.Equals("Enchanted Magus Orb"))) && (!this.staffnow.Contains("Staff of ") && !this.staffnow.Contains("Sphere") && (!this.staffnow.Contains("Hwarone Lute") && !this.staffnow.Contains("Harp")) && (!this.staffnow.Equals("Master Divine Staff") && !this.staffnow.Equals("Master Celestial Staff") && (!this.staffnow.Equals("Assassin's Cross") && !this.staffnow.Equals("Holy Diana")))) && (!this.staffnow.Equals("Andor Staff") && !this.staffnow.Equals("Veltain Staff") && !this.staffnow.Equals("Dark Star")) && !this.staffnow.Equals("Divinities Staff")) && !this.staffnow.Equals("Skylight Staff"))
                                            {
                                                if (obj.Name == "Skylight Staff" || obj.Name == "Dark Star" || obj.Name == "Divinities Staff" || (obj.Name == "Master Divine Staff" || obj.Name == "Assassin's Cross") || (obj.Name == "Holy Diana" || obj.Name == "Andor Staff") || obj.Name == "Veltain Staff")
                                                {
                                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                                    this.UseItem(obj.InventorySlot);
                                                    Thread.Sleep(500);
                                                    for (int index = 0; index < 10; ++index)
                                                    {
                                                        Thread.Sleep(200);
                                                        if (this.shakeyhands || staffnow != this.staffnow)
                                                            break;
                                                    }
                                                    goto label_160;
                                                }
                                                else if (Server.SpellList[spellName].BaseLines > 1 && obj.Name.Contains("Staff of"))
                                                {
                                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                                    if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                                                        this.MacroCast(this.druidform.Name, new uint?());
                                                    this.UseItem(obj.InventorySlot);
                                                    Thread.Sleep(500);
                                                    for (int index = 0; index < 10; ++index)
                                                    {
                                                        Thread.Sleep(200);
                                                        if (this.shakeyhands || staffnow != this.staffnow)
                                                            break;
                                                    }
                                                    goto label_160;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (Server.SpellList[spellName].BaseLines < 3)
                                {
                                    bool flag2 = false;
                                    if (spellName == "beag cradh")
                                        flag2 = true;
                                    bool flag3 = false;
                                    if (!flag2)
                                    {
                                        foreach (Item obj in this.Inventory)
                                        {
                                            if (obj != null && obj.Name == "Master Divine Staff")
                                            {
                                                this.StaffSwitchDelay = DateTime.UtcNow;
                                                this.UseItem(obj.InventorySlot);
                                                Thread.Sleep(500);
                                                for (int index = 0; index < 10; ++index)
                                                {
                                                    Thread.Sleep(200);
                                                    if (this.shakeyhands || staffnow != this.staffnow)
                                                        goto label_160;
                                                }
                                                flag1 = true;
                                                goto label_160;
                                            }
                                        }
                                    }
                                    if (!flag3)
                                    {
                                        foreach (Item obj in this.Inventory)
                                        {
                                            if (obj != null)
                                            {
                                                if (obj.Name == "Star Crafted Staff" || obj.Name == "Skylight Staff" || obj.Name == "Dark Star" || obj.Name == "Divinities Staff" || (obj.Name == "Assassin's Cross" || obj.Name == "Holy Diana") || (obj.Name == "Magus Diana" || obj.Name == "Andor Staff") || obj.Name == "Veltain Staff")
                                                {
                                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                                    this.UseItem(obj.InventorySlot);
                                                    Thread.Sleep(500);
                                                    for (int index = 0; index < 10; ++index)
                                                    {
                                                        Thread.Sleep(200);
                                                        if (this.shakeyhands || staffnow != this.staffnow)
                                                            break;
                                                    }
                                                    goto label_160;
                                                }
                                                else if (Server.SpellList[spellName].BaseLines == 2 && obj.Name.Contains("Staff of"))
                                                {
                                                    this.StaffSwitchDelay = DateTime.UtcNow;
                                                    if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                                                        this.MacroCast(this.druidform.Name, new uint?());
                                                    this.UseItem(obj.InventorySlot);
                                                    Thread.Sleep(500);
                                                    for (int index = 0; index < 10; ++index)
                                                    {
                                                        Thread.Sleep(200);
                                                        if (this.shakeyhands || staffnow != this.staffnow)
                                                            break;
                                                    }
                                                    goto label_160;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (this.Tab.vfollowplayer && !this.pausewalk && !this.Tab.vcastwhilefollow && !this.keepcasting)
                                    {
                                        Player characterByName = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                                        if (characterByName != null && characterByName.IsOnScreen && this.ServerLocation.DistanceFrom(characterByName.Location) > 9)
                                        {
                                            if (spellName != "ao suain" && spellName != "Leafhopper Chirp")
                                                return false;
                                            goto label_160;
                                        }
                                    }
                                    bool flag2 = false;
                                    if (Server.SpellList[spellName].BaseLines >= 3)
                                    {
                                        foreach (Item obj in this.Inventory)
                                        {
                                            if (obj != null && obj.Name == "Master Divine Staff")
                                            {
                                                this.StaffSwitchDelay = DateTime.UtcNow;
                                                this.UseItem(obj.InventorySlot);
                                                Thread.Sleep(500);
                                                for (int index = 0; index < 10; ++index)
                                                {
                                                    Thread.Sleep(200);
                                                    if (this.shakeyhands || staffnow != this.staffnow)
                                                        goto label_160;
                                                }
                                                flag1 = true;
                                                goto label_160;
                                            }
                                        }
                                    }
                                    if (!flag2 && spell.CastLines != 1)
                                    {
                                        foreach (Item obj in this.Inventory)

                                        {
                                            if (obj != null && (obj.Name.Contains("Starcrafted Staff") || obj.Name.Contains("Dragon Emberwood Staff") || obj.Name.Contains("Dragon Infused Staff") || (obj.Name.Contains("Yowien Tree Staff") || obj.Name.Contains("Glimmering Wand")) || (obj.Name.Contains("Brute's Quill") || obj.Name.Contains("Holy Hy-brasyl Baton") || (obj.Name == "Master Celestial Staff" || obj.Name.Contains("Staff of "))) || (obj.Name.Contains("Serpant Sphere") || obj.Name == "Chernol Sphere" || (obj.Name == "Maron Sphere" || obj.Name == "Shaine Sphere") || (obj.Name == "Sphere" || obj.Name.Contains("Hwarone Lute") || (obj.Name == "Goldberry Harp" || obj.Name == "Ironwood Harp"))) || (obj.Name == "Rosewood Harp" || obj.Name == "Wooden Harp" || obj.Name == "Empowered Magus Orb") || obj.Name == "Enchanted Magus Orb"))
                                            {
                                                this.StaffSwitchDelay = DateTime.UtcNow;
                                                if ((int)this.ClientForm - 16384 > 0 && this.Tab.druidform.Checked && this.druidform != null)
                                                    this.MacroCast(this.druidform.Name, new uint?());
                                                this.UseItem(obj.InventorySlot);
                                                Thread.Sleep(500);
                                                for (int index = 0; index < 10; ++index)
                                                {
                                                    Thread.Sleep(200);
                                                    if (this.shakeyhands || staffnow != this.staffnow)
                                                        break;
                                                }
                                                goto label_160;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                label_160:
                Spell s = this.GetSpell(spellName);
                if (s != null)
                {
                    int num2;
                    if (s.CastLines == 0)
                    {
                        timeSpan = DateTime.UtcNow.Subtract(this.GlobalSpellCD);
                        num2 = timeSpan.TotalMilliseconds >= 335.0 ? 1 : 0;
                    }
                    else
                        num2 = 1;
                    if (num2 == 0)
                        return false;
                    int num3;
                    if (!target.HasValue && this.PreventSpam.ContainsKey(s.Name))
                    {
                        timeSpan = DateTime.UtcNow.Subtract(this.PreventSpam[s.Name]);
                        num3 = timeSpan.TotalMilliseconds >= 1000.0 ? 1 : 0;
                    }
                    else
                        num3 = 1;
                    if (num3 == 0)
                        return false;
                    int num4;
                    if (target.HasValue && this.Characters.ContainsKey(target.Value) && (this.Characters[target.Value] != null && this.Characters[target.Value].PreventSpam.ContainsKey(s.Name)))
                    {
                        timeSpan = DateTime.UtcNow.Subtract(this.Characters[target.Value].PreventSpam[s.Name]);
                        num4 = timeSpan.TotalMilliseconds >= 1000.0 ? 1 : 0;
                    }
                    else
                        num4 = 1;
                    if (num4 == 0)
                        return false;
                    int num5;
                    if (s.CastLines == 0 && !this.SafeToWalkFast && (target.HasValue && this.LastTarget != 0U) && ((int)this.LastTarget != (int)target.Value && this.newtargetdelay != DateTime.MinValue))
                    {
                        timeSpan = DateTime.UtcNow.Subtract(this.newtargetdelay);
                        num5 = timeSpan.TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.switchtargetdelaya.Value, (int)this.Tab.switchtargetdelayb.Value) ? 1 : 0;
                    }
                    else
                        num5 = 1;
                    if (num5 == 0)
                        return false;
                    int num6;
                    if (s.CastLines == 0 && s.Name.Equals("ard cradh"))
                    {
                        timeSpan = DateTime.UtcNow.Subtract(s.NextUse);
                        num6 = timeSpan.TotalMilliseconds > (!this.SafeToWalkFast ? (double)this.RandomNumber(325, 500) : 0.0) ? 1 : 0;
                    }
                    else
                        num6 = 1;
                    if (num6 == 0)
                        return false;
                    int num7;
                    if (s.CastLines == 0 && !this.SafeToWalkFast)
                    {
                        timeSpan = DateTime.UtcNow.Subtract(s.NextUse);
                        if (timeSpan.TotalMilliseconds <= (double)this.RandomNumber(125, 325))
                        {
                            num7 = this.Tab.vimpskillbutton ? 1 : 0;
                            goto label_190;
                        }
                    }
                    num7 = 1;
                    label_190:
                    if (num7 == 0)
                        return false;
                    if (DateTime.UtcNow > s.NextUse.Subtract(new TimeSpan(0, 0, s.CastLines)))
                    {
                        if (s.CastLines > 0)
                        {
                            this.stopwalk = true;
                            if (this.Tab.vstaffswitch && s.CastLines > 2)
                            {
                                Thread.Sleep(200);
                                return false;
                            }
                            int num8;
                            if (!this.SafeToWalkFast)
                            {
                                timeSpan = DateTime.UtcNow.Subtract(this.laststep);
                                if (timeSpan.TotalSeconds < 1.0 && spellName != "ao suain" && spellName != "Leafhopper Chirp")
                                {
                                    num8 = spellName.Contains("Gem Polishing") ? 1 : 0;
                                    goto label_200;
                                }
                            }
                            num8 = 1;
                            label_200:
                            if (num8 == 0)
                                return false;
                            if (this.Tab.vcastwhilefollow)
                                this.castingoneline = true;
                            if (this.Tab.vfollowplayer && !this.pausewalk && !this.Tab.vcastwhilefollow && !this.keepcasting)
                            {
                                Player characterByName = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                                if (characterByName != null && characterByName.IsOnScreen && this.ServerLocation.DistanceFrom(characterByName.Location) > 9 && (spellName != "ao suain" && spellName != "Leafhopper Chirp"))
                                    return false;
                            }
                            if (this.SafeToWalkFast)
                                new Thread((ThreadStart)(() => this.StartCast(s.CastLines))).Start();
                            else
                                this.StartCast(s.CastLines);
                            for (int index1 = 0; index1 < s.CastLines; ++index1)
                            {
                                if (!string.IsNullOrEmpty(s.Captions[index1]))
                                    this.SkillSpellCaption(s.Captions[index1]);
                                for (int index2 = 0; index2 < 5; ++index2)
                                {
                                    if (s.CastLines == 1 && !this.SafeToWalkFast && !this.Tab.vimpskillbutton)
                                        Thread.Sleep(this.RandomNumber(202, 206));
                                    else if (!this.Tab.halfcast.Checked && s.CastLines == 1 && this.SafeToWalkFast)
                                        Thread.Sleep(100);
                                    else
                                        Thread.Sleep(200);
                                    if (spellName != "Hide" && spellName != "White Bat Stance" && this.SpellBar.Contains((ushort)10) || this.IsSuained && this.Tab.vselfaosuain && spellName != "ao suain" && spellName != "Leafhopper Chirp")
                                        return false;
                                    int num9;
                                    if (!target.HasValue && this.PreventSpam.ContainsKey(s.Name))
                                    {
                                        timeSpan = DateTime.UtcNow.Subtract(this.PreventSpam[s.Name]);
                                        num9 = timeSpan.TotalMilliseconds >= 1000.0 ? 1 : 0;
                                    }
                                    else
                                        num9 = 1;
                                    if (num9 == 0)
                                        return false;
                                    int num10;
                                    if (target.HasValue && this.Characters.ContainsKey(target.Value) && (this.Characters[target.Value] != null && this.Characters[target.Value] is Player) && this.Characters[target.Value].PreventSpam.ContainsKey(s.Name))
                                    {
                                        timeSpan = DateTime.UtcNow.Subtract(this.Characters[target.Value].PreventSpam[s.Name]);
                                        num10 = timeSpan.TotalMilliseconds >= 1000.0 ? 1 : 0;
                                    }
                                    else
                                        num10 = 1;
                                    if (num10 == 0)
                                        return false;
                                    int num11;
                                    if (spellName == "Disenchanter")
                                    {
                                        timeSpan = DateTime.UtcNow.Subtract(this.distime);
                                        if (timeSpan.TotalSeconds < 361.0)
                                        {
                                            num11 = !this.disIsSummoned ? 1 : 0;
                                            goto label_235;
                                        }
                                    }
                                    num11 = 1;
                                    label_235:
                                    if (num11 == 0)
                                        return false;
                                    int num12;
                                    if (!this.SafeToWalkFast)
                                    {
                                        timeSpan = DateTime.UtcNow.Subtract(this.laststep);
                                        if (timeSpan.TotalSeconds < 1.0)
                                        {
                                            num12 = spellName.Contains("Gem Polishing") ? 1 : 0;
                                            goto label_241;
                                        }
                                    }
                                    num12 = 1;
                                    label_241:
                                    if (num12 == 0)
                                        return false;
                                    if (!this.IsCasting)
                                    {
                                        this.IsCasting = true;
                                        return false;
                                    }
                                    if (s.Name == "fas spiorad" && (double)this.Statistics.CurrentMP > (double)this.Statistics.MaximumMP / 1.1)
                                        return false;
                                    timeSpan = DateTime.UtcNow.Subtract(this.laststep);
                                    if (timeSpan.TotalMilliseconds < 200.0 && spellName != "ao suain" && spellName != "Leafhopper Chirp")
                                        return false;
                                    timeSpan = DateTime.UtcNow.Subtract(this.mancastdelay);
                                    if (timeSpan.TotalSeconds < 1.0)
                                        return false;
                                }
                                int num13;
                                if (this.shakeyhands)
                                {
                                    timeSpan = DateTime.UtcNow.Subtract(this.shakeyhandsdelay);
                                    num13 = timeSpan.TotalSeconds <= 3.0 ? 1 : 0;
                                }
                                else
                                    num13 = 1;
                                if (num13 == 0)
                                {
                                    Thread.Sleep(200);
                                    return false;
                                }
                            }
                            this.SkillSpellCaption(s.Name);
                        }
                        else
                            this.stopwalk = false;
                        this.newtargetdelay = DateTime.UtcNow;
                        if (this.castonghosttimer == DateTime.MinValue)
                            this.castonghosttimer = DateTime.UtcNow;
                        this.LastSpell = spellName;
                        this.LastTarget = !target.HasValue ? 0U : target.Value;
                        if (target.HasValue && this.Characters.ContainsKey(target.Value) && (this.Characters[target.Value] != null && this.Characters[target.Value] is Npc) && this.Characters[target.Value].IsOnScreen)
                            this.LastMonsterId = target.Value;
                        this.CastSpell(s.SpellSlot, target);
                        if (s.Name.Contains("beannaich") || s.Name.Contains("fas nadur") || (s.Name.Contains("aite") || s.Name.Contains("fas deireas")) || (s.Name == "creagwheel kick neart" || s.Name.Contains("ao ") && s.Name != "ao suain") || (s.Name == "Mist" || s.Name.Contains("armachd") || (s.Name.Contains(" Form") || s.Name.Contains("Disenchanter")) || (s.Name.Contains("searg gar") || s.Name.Contains("pian gar") || (s.Name == "Reflection" || s.Name.Contains("faileas")))) || (s.Name == "Aegis Sphere" || s.Name.Contains("slan") || s.Name.Contains("Regeneration")) || s.Name.Contains("Counter Attack"))
                        {
                            if (!target.HasValue)
                            {
                                if (this.PreventSpam.ContainsKey(s.Name))
                                    this.PreventSpam[s.Name] = DateTime.UtcNow;
                                else
                                    this.PreventSpam.Add(s.Name, DateTime.UtcNow);
                            }
                            if (target.HasValue && this.Characters.ContainsKey(target.Value) && this.Characters[target.Value] != null)
                            {
                                if (this.Characters[target.Value] is Player)
                                {
                                    if (this.Characters[target.Value].PreventSpam.ContainsKey(s.Name))
                                        this.Characters[target.Value].PreventSpam[s.Name] = DateTime.UtcNow;
                                    else
                                        this.Characters[target.Value].PreventSpam.Add(s.Name, DateTime.UtcNow);
                                }
                                if (this.Characters[target.Value] is Npc && (s.Name.Contains("pian gar") || s.Name.Contains("fas nadur")))
                                {
                                    if (this.Characters[target.Value].PreventSpam.ContainsKey(s.Name))
                                        this.Characters[target.Value].PreventSpam[s.Name] = DateTime.UtcNow;
                                    else
                                        this.Characters[target.Value].PreventSpam.Add(s.Name, DateTime.UtcNow);
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }

        public Spell GetSpell(string name)
        {
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name == name)
                    return spell;
            }
            return (Spell)null;
        }

        public int SpellSlot(string spellName)
        {
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spellName.Equals(spell.Name, StringComparison.CurrentCultureIgnoreCase))
                    return spell.SpellSlot;
            }
            return 0;
        }

        public bool CanSpell(string name, bool mednum = false)
        {
            if (!this.HasSpell(name, mednum))
                return false;
            foreach (Spell spell in this.SpellBook)
            {
                if (mednum)
                {
                    if (spell != null && (spell.Name.Contains(name) && DateTime.UtcNow > spell.NextUse))
                        return true;
                }
                else if (spell != null && (spell.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase) && DateTime.UtcNow > spell.NextUse))
                    return true;
            }
            return false;
        }

        public bool HasSpell(string name, bool mednum = false)
        {
            foreach (Spell spell in this.SpellBook)
            {
                if (mednum)
                {
                    if (spell != null && spell.Name.ToLower().Contains(name.ToLower()))
                        return true;
                }
                else if (spell != null && spell.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                    return true;
            }
            return false;
        }

        public bool CastMedSpell(string spellName, uint? target = null)
        {
            foreach (Spell spell in this.SpellBook)
            {
                if (spell != null && spell.Name.ToLower().Contains(spellName.ToLower()))
                {
                    this.CastSpell(spell.Name, target);
                    return true;
                }
            }
            return false;
        }

        public bool CastSpell(string spellName, uint? target = null)
        {
            if (this.cancast && this.spellmap && this.HasSpell(spellName, false))
            {
                if (this.IsCasting)
                    this.ImCasting = false;
                if (!this.ImCasting)
                {
                    this.ImCasting = true;
                    if (this.Cast(spellName, target))
                    {
                        this.castingoneline = false;
                        this.ImCasting = false;
                        return true;
                    }
                }
                this.ImCasting = false;
                this.castingoneline = false;
            }
            return false;
        }

        public bool HasLowDuraDN()
        {
            if (this.Necklace.Contains("Gold Jade Necklace"))
            {
                this.SendMessage("Not repairing because gold jade necklace is equipped", (byte)0, false);
                return true;
            }
            if (this.Necklace.Contains("Amber Necklace"))
            {
                this.SendMessage("Not repairing because amber necklace is equipped", (byte)0, false);
                return true;
            }
            foreach (Item obj in this.Inventory)
            {
                if (obj != null)
                {
                    if (obj.Name.Contains("Gold Jade Necklace") && obj.CurrentDurability < 1700U)
                    {
                        this.SendMessage("Not repairing because of low dura gold jade necklace", (byte)0, false);
                        return true;
                    }
                    if (obj.Name.Contains("Amber Necklace") && obj.CurrentDurability < 2500U)
                    {
                        this.SendMessage("Not repairing because of low dura amber necklace", (byte)0, false);
                        return true;
                    }
                }
            }
            return false;
        }

        public bool HasCailDeochItems()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (obj.Name.StartsWith("Cail ") || obj.Name.StartsWith("Deoch ")))
                    return true;
            }
            return false;
        }

        public bool HasPersonaca()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 55 || obj.Name == "Personaca deum"))
                    return true;
            }
            return false;
        }

        public bool HasHydele()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 54 || obj.Name == "Hydele deum"))
                    return true;
            }
            return false;
        }

        public bool HasBetony()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (obj.Name == "Vanilla Potion" || obj.Name == "Betony deum"))
                    return true;
            }
            return false;
        }

        public bool HasAllPotions()
        {
            bool flag1 = false;
            bool flag2 = false;
            bool flag3 = false;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null)
                {
                    if (obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 54 || obj.Name == "Hydele deum")
                        flag1 = true;
                    else if (obj.Name == "Brown Potion" && (int)obj.Icon - 32768 == 55 || obj.Name == "Personaca deum")
                        flag2 = true;
                    else if (obj.Name == "Vanilla Potion" || obj.Name == "Betony deum")
                        flag3 = true;
                }
            }
            if (flag1 && flag2 && flag3)
                return true;
            if (!flag1)
                this.SendMessage("You need Hydele", (byte)0, false);
            if (!flag2)
                this.SendMessage("You need Personaca", (byte)0, false);
            if (!flag3)
                this.SendMessage("You need Betony", (byte)0, false);
            this.molo = false;
            return false;
        }

        public bool OutOfGems()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (obj.Name == "Raw Beryl" || obj.Name == "Raw Coral" || (obj.Name == "Raw Ruby" || obj.Name == "Raw Talgonite") || (obj.Name == "Raw Hy-brasyl" || obj.Name == "Beryl Fragment" || (obj.Name == "Coral Fragment" || obj.Name == "Ruby Fragment")) || (obj.Name == "Talos Fragment" || obj.Name == "Hy-brasyl Fragment" || (obj.Name == "Flawed Beryl" || obj.Name == "Flawed Coral") || (obj.Name == "Flawed Ruby" || obj.Name == "Flawed Talos" || (obj.Name == "Flawed Hy-brasyl" || obj.Name == "Uncut Beryl"))) || (obj.Name == "Uncut Coral" || obj.Name == "Uncut Ruby" || obj.Name == "Uncut Talos") || obj.Name == "Uncut Hy-brasyl"))
                    return false;
            }
            return true;
        }

        public bool HasMPig()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.Name.StartsWith("Male Pig Token"))
                    return true;
            }
            return false;
        }

        public bool HasFPig()
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.Name.StartsWith("Female Pig Token"))
                    return true;
            }
            return false;
        }

        public string BestWeapon()
        {
            string str = string.Empty;
            if (this.Path == (byte)1)
            {
                if (this.staffnow != "Hellreavers Blade" && this.staffnow != "Eclipse" && (this.staffnow != "Hwarone Guandao" && this.staffnow != "Empowered Hwarone Guandao") && !this.staffnow.Contains("Crystal Blade") && !this.staffnow.Contains("Yowien Hatchet"))
                {
                    if (this.HasItem("Hellreavers Blade"))
                        str = "Hellreavers Blade";
                    else if (this.HasItem("Yowien Hatchet"))
                        str = "Yowien Hatchet";
                    else if (this.HasItem("Yowien Hatchet1"))
                        str = "Yowien Hatchet1";
                    else if (this.HasItem("Crystal Blade"))
                        str = "Crystal Blade";
                    else if (this.HasItem("Crystal Blade1"))
                        str = "Crystal Blade1";
                    else if (this.HasItem("Empowered Hwarone Guandao"))
                        str = "Empowered Hwarone Guandao";
                    else if (this.HasItem("Hwarone Guandao"))
                        str = "Hwarone Guandao";
                    else if (this.HasItem("Eclipse"))
                        str = "Eclipse";
                }
            }
            else if (this.Path == (byte)2)
            {
                if (this.staffnow != "Thunderfury" && this.staffnow != "Andor Bow" && this.staffnow != "Yumi Bow" && this.staffnow != "Empowered Yumi Bow")
                {
                    if (this.HasItem("Thunderfury"))
                        str = "Thunderfury";
                    else if (this.HasItem("Empowered Yumi Bow"))
                        str = "Empowered Yumi Bow";
                    else if (this.HasItem("Yumi Bow"))
                        str = "Yumi Bow";
                    else if (this.HasItem("Andor Bow"))
                        str = "Andor Bow";
                    else if (this.HasItem("Sen Bow"))
                        str = "Sen Bow";
                    else if (this.HasItem("Jenwir Bow"))
                        str = "Jenwir Bow";
                    else if (this.HasItem("Royal Bow"))
                        str = "Royal Bow";
                    else if (this.HasItem("Wooden Bow"))
                        str = "Wooden Bow";
                }
            }
            else if (this.Path == (byte)5 && (this.staffnow != "BlackStar Claw" && this.staffnow != "Eagles Grasp" && this.staffnow != "Wolf Claw" && (this.staffnow != "Tilian Claw" && this.staffnow != "Nunchaku") && (this.staffnow != "Obsidian" && !this.staffnow.Contains("Yowien's Claw")) && !this.staffnow.Contains("Yowien's Fist")))
            {
                if (this.HasItem("BlackStar Claw"))
                    str = "BlackStar Claw";
                else if (this.HasItem("Eagles Grasp"))
                    str = "Eagles Grasp";
                else if (this.HasItem("Yowien's Fist"))
                    str = "Yowien's Fist";
                else if (this.HasItem("Yowien's Fist1"))
                    str = "Yowien's Fist1";
                else if (this.HasItem("Yowien's Claw"))
                    str = "Yowien's Claw";
                else if (this.HasItem("Yowien's Claw1"))
                    str = "Yowien's Claw1";
                else if (this.HasItem("Obsidian"))
                    str = "Obsidian";
                else if (this.HasItem("Nunchaku"))
                    str = "Nunchaku";
                else if (this.HasItem("Tilian Claw"))
                    str = "Tilian Claw";
                else if (this.HasItem("Wolf Claw"))
                    str = "Wolf Claw";
            }
            return str;
        }

        public Npc NearestItem()
        {
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)this.ItemsWithinReach()).OrderBy<Npc, int>((Func<Npc, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && !npc.Looted && !npc.OutofReach)
                {
                    if (!this.pause)
                    {
                        if (this.Tab.vlootlocale.Equals("Custom #s") && Server.CustomLoot.Contains(npc.Image - 16384) || this.Tab.vlootlocale.Equals("Everything") || this.Tab.vlootlocale.Equals("Event") && (npc.Image == 18707 || npc.Image == 17835 || npc.Image == 17986 && npc.Color == (byte)41 || npc.Image == 28362 || npc.Image == 17857 || (npc.Image == 24509 || npc.Image == 24528 || (npc.Image == 24527 || npc.Image == 24526) || (npc.Image == 24525 || npc.Image == 24524 || (npc.Image == 24523 || npc.Image == 24522)) || (npc.Image == 24521 || npc.Image == 24520 || (npc.Image == 24519 || npc.Image == 24518) || (npc.Image == 24517 || npc.Image == 24516 || (npc.Image == 24515 || npc.Image == 24514))) || (npc.Image == 24513 || npc.Image == 24512 || npc.Image == 24510) || npc.Image == 24511) && !this.ItemStackFull(npc.Image, 10U)) || (this.Tab.vlootlocale.Equals("Pyramid") && (npc.Image == 17937 || npc.Image == 17856 || npc.Image == 18779 || npc.Image == 17857) || this.Tab.vlootlocale.Equals("Desert Dunes") && (npc.Image == 18592 || npc.Image == 18469) || (this.Tab.vlootlocale.Equals("Noam") && (npc.Image == 17877 || npc.Image == 17888) || this.Tab.vlootlocale.Equals("Blossom Garden") && npc.Image == 18613)) || (this.Tab.vlootlocale.Equals("Lost Ruins") && (npc.Image == 17772 || npc.Image == 21712 || (npc.Image == 21978 || npc.Image == 21977) || (npc.Image == 18662 || npc.Image == 18482 || (npc.Image == 16731 || npc.Image == 18458)) || (npc.Image == 18618 || npc.Image == 18457 || (npc.Image == 18463 || npc.Image == 17945) || (npc.Image == 17786 || npc.Image == 16698 || npc.Image == 16725)) || npc.Image == 18594) || this.Tab.vlootlocale.Equals("Andor") && (npc.Image == 18165 || npc.Image == 17738 || (npc.Image == 18405 || npc.Image == 18377) || (npc.Image == 18393 || npc.Image == 18321 || (npc.Image == 18337 || npc.Image == 18722)) || (npc.Image == 18349 || npc.Image == 18356 || (npc.Image == 18359 || npc.Image == 18331) || (npc.Image == 18348 || npc.Image == 18335 || (npc.Image == 18418 || npc.Image == 18407))) || (npc.Image == 18383 || npc.Image == 18728 || (npc.Image == 18669 || npc.Image == 18671) || (npc.Image == 18673 || npc.Image == 18723 || (npc.Image == 17809 || npc.Image == 17808)) || (npc.Image == 17807 || npc.Image == 17806 || (npc.Image == 16524 || npc.Image == 18729) || (npc.Image == 18620 || npc.Image == 18444 || (npc.Image == 18780 || npc.Image == 18781)))) || npc.Image == 18724 || npc.Image == 18725) || (npc.Image == 16525 || npc.Image == 16524 || npc.Image == 16521 || this.Tab.vlootlocale.Equals("Veltain Mines") && (npc.Image == 17860 || npc.Image == 16524)) || (this.Tab.vlootlocale.Equals("Aman Jungle") && (npc.Image == 17934 || npc.Image == 17932 || (npc.Image == 19584 || npc.Image == 19794) || npc.Image == 20377 || npc.Image == 21174) || this.Tab.vlootlocale.Equals("Shinewood Fruits") && (npc.Image == 17882 || npc.Image == 17879 || (npc.Image == 16719 || npc.Image == 17866) || npc.Image == 17887 || npc.Image == 17871))))
                            return npc;
                    }
                    else
                        break;
                }
            }
            return (Npc)null;
        }

        public Npc[] ItemsWithinReach()
        {
            List<Npc> npcList = new List<Npc>();
            try
            {
                foreach (Character character1 in this.Characters.Values.ToArray<Character>())
                {
                    if (character1 != null && character1 is Npc && (character1.IsOnScreen && (character1 as Npc).Image > 16384) && this.ServerLocation.DistanceFrom(character1.Location) <= 12)
                    {
                        if (this.Tab.recorditemdata.Checked)
                        {
                            if (character1.Name != string.Empty)
                            {
                                int num1 = 0;
                                int num2 = 0;
                                bool flag = false;
                                foreach (Character character2 in this.Characters.Values.ToArray<Character>())
                                {
                                    if (character2 != null && character2 is Npc && (character2.IsOnScreen && (character2 as Npc).Image > 16384) && (int)character2.ID != (int)character1.ID && (character2.Location.X == character1.Location.X && character2.Location.Y == character1.Location.Y))
                                    {
                                        DateTime utcNow;
                                        int num3;
                                        if (character2.Name == "Gold Pile" || character2.Name == "Silver Pile")
                                        {
                                            utcNow = DateTime.UtcNow;
                                            num3 = utcNow.Subtract(character2.CreateTime).TotalSeconds >= 10.0 ? 1 : 0;
                                        }
                                        else
                                            num3 = 1;
                                        if (num3 == 0)
                                        {
                                            flag = true;
                                            break;
                                        }
                                        ++num1;
                                        int num4;
                                        if (!(character2.Name != string.Empty))
                                        {
                                            utcNow = DateTime.UtcNow;
                                            num4 = utcNow.Subtract(character2.CreateTime).TotalSeconds < 10.0 ? 1 : 0;
                                        }
                                        else
                                            num4 = 0;
                                        if (num4 == 0)
                                            ++num2;
                                    }
                                }
                                if (num1 == num2 && !flag)
                                    npcList.Add((Npc)character1);
                            }
                        }
                        else
                            npcList.Add((Npc)character1);
                    }
                }
            }
            catch
            {
            }
            return npcList.ToArray();
        }

        public bool ItemStackFull(int image, uint amount = 1)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && (!(obj.Name != string.Empty) || !(obj.Name == "Komadium")) && ((int)obj.Icon - 16384 == image && Server.ItemList.ContainsKey(obj.Name) && (long)obj.Amount >= (long)Server.ItemList[obj.Name].MaxStack || (int)obj.Icon - 16384 == image && amount > 1U && obj.Amount >= amount))
                    return true;
            }
            return false;
        }

        public bool InventoryIsFull()
        {
            int num = 0;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null)
                    ++num;
            }
            return num == 59;
        }

        public int OpenSlotsCount()
        {
            int num = 0;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null)
                    ++num;
            }
            return 59 - num;
        }

        public int TrashInInventoryCount()
        {
            int num = 0;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && Server.TrashList.Contains(obj.Name.ToLower()))
                    ++num;
            }
            return num;
        }

        private void CheckLoot()
        {
            if (!this.Tab.vwalktoloot || this.InventoryIsFull())
                return;
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)this.ItemsWithinReach()).OrderBy<Npc, int>((Func<Npc, int>)(c => c.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen)
                {
                    if (this.Tab.vlootlocale.Equals("Custom #s") && Server.CustomLoot.Contains(npc.Image - 16384))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Everything"))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Event"))
                    {
                        if (npc.Image == 18707 || npc.Image == 17835 || npc.Image == 17986 && npc.Color == (byte)41 || npc.Image == 28362 || npc.Image == 17857)
                            this.walktoloot = true;
                        else if ((npc.Image == 24509 || npc.Image == 24528 || (npc.Image == 24527 || npc.Image == 24526) || (npc.Image == 24525 || npc.Image == 24524 || (npc.Image == 24523 || npc.Image == 24522)) || (npc.Image == 24521 || npc.Image == 24520 || (npc.Image == 24519 || npc.Image == 24518) || (npc.Image == 24517 || npc.Image == 24516 || (npc.Image == 24515 || npc.Image == 24514))) || (npc.Image == 24513 || npc.Image == 24512 || npc.Image == 24510) || npc.Image == 24511) && !this.ItemStackFull(npc.Image, 10U))
                            this.walktoloot = true;
                    }
                    if (this.Tab.vlootlocale.Equals("Pyramid") && (npc.Image == 17937 || npc.Image == 17856 || npc.Image == 18779 || npc.Image == 17857))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Desert Dunes") && (npc.Image == 18592 || npc.Image == 18469 || npc.Image == 16524))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Noam") && (npc.Image == 17877 || npc.Image == 17888))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Blossom Garden") && npc.Image == 18613)
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Lost Ruins") && (npc.Image == 17772 || npc.Image == 21712 || (npc.Image == 21978 || npc.Image == 21977) || (npc.Image == 18662 || npc.Image == 18482 || (npc.Image == 16731 || npc.Image == 18458)) || (npc.Image == 18618 || npc.Image == 18457 || (npc.Image == 18463 || npc.Image == 17945) || (npc.Image == 17786 || npc.Image == 16698 || npc.Image == 16725)) || npc.Image == 18594))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Andor") && (npc.Image == 18165 || npc.Image == 17738 || (npc.Image == 18405 || npc.Image == 18377) || (npc.Image == 18393 || npc.Image == 18321 || (npc.Image == 18337 || npc.Image == 18722)) || (npc.Image == 18349 || npc.Image == 18356 || (npc.Image == 18359 || npc.Image == 18331) || (npc.Image == 18348 || npc.Image == 18335 || (npc.Image == 18418 || npc.Image == 18407))) || (npc.Image == 18383 || npc.Image == 18728 || (npc.Image == 18669 || npc.Image == 18671) || (npc.Image == 18673 || npc.Image == 18723 || (npc.Image == 17809 || npc.Image == 17808)) || (npc.Image == 17807 || npc.Image == 17806 || (npc.Image == 16524 || npc.Image == 18729) || (npc.Image == 18620 || npc.Image == 18444 || (npc.Image == 18780 || npc.Image == 18781)))) || npc.Image == 18724 || npc.Image == 18725))
                        this.walktoloot = true;
                    if (npc.Image == 16525 || npc.Image == 16524 || npc.Image == 16521)
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Veltain Mines") && (npc.Image == 17860 || npc.Image == 16524))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Aman Jungle") && (npc.Image == 17934 || npc.Image == 17932 || (npc.Image == 19584 || npc.Image == 19794) || npc.Image == 20377 || npc.Image == 21174))
                        this.walktoloot = true;
                    if (this.Tab.vlootlocale.Equals("Shinewood Fruits") && (npc.Image == 17882 || npc.Image == 17879 || (npc.Image == 16719 || npc.Image == 17866) || npc.Image == 17887 || npc.Image == 17871))
                        this.walktoloot = true;
                }
            }
        }

        public bool SlotHasItem(int slot)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.InventorySlot == slot)
                    return true;
            }
            return false;
        }

        public int ItemSlot(string itemName)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && itemName.Equals(obj.Name, StringComparison.CurrentCultureIgnoreCase))
                    return obj.InventorySlot;
            }
            return 0;
        }

        public uint ItemAmount(string itemName)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && itemName.Equals(obj.Name, StringComparison.CurrentCultureIgnoreCase))
                    return obj.Amount;
            }
            return 0;
        }

        public bool CanItem(string itemName)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && itemName.Equals(obj.Name, StringComparison.CurrentCultureIgnoreCase) && DateTime.UtcNow > obj.NextUse)
                    return this.DARegged || !(itemName == "Sprint Potion") && !(itemName == "Damage Scroll");
            }
            return false;
        }

        public bool HasItem(string itemName)
        {
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && itemName.Equals(obj.Name, StringComparison.CurrentCultureIgnoreCase) && (itemName == "Treasure Chest" ? ((int)obj.Icon - 32768 != 3234 ? 1 : 0) : 1) != 0)
                    return true;
            }
            return false;
        }

        public uint ItemCount(string itemName)
        {
            int num = 0;
            if (itemName.Equals("cursed cathonic shield", StringComparison.CurrentCultureIgnoreCase))
                itemName = "cathonic shield";
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && itemName.Equals(obj.Name, StringComparison.CurrentCultureIgnoreCase))
                {
                    ++num;
                    if (obj.Stackable == (byte)1 && itemName.ToLower() != "golden starfish")
                        return obj.Amount;
                }
            }
            return (uint)num;
        }

        public bool UseItem(string itemName)
        {
            if (!this.HasItem(itemName))
                return false;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && itemName.Equals(obj.Name, StringComparison.CurrentCultureIgnoreCase) && DateTime.UtcNow > obj.NextUse)
                {
                    if ((itemName == "Treasure Chest" ? ((int)obj.Icon - 32768 != 3234 ? 1 : 0) : 1) != 0)
                        this.UseItem(obj.InventorySlot);
                    if (obj.Name.Contains("Bonus") || obj.Name.Contains("Double") || (obj.Name.Contains("Ability") || obj.Name.Contains("Experience")) || obj.Name.Contains("Song"))
                        obj.NextUse = !obj.Name.Equals("Experience Gem") ? DateTime.UtcNow.AddMilliseconds(5000.0) : DateTime.UtcNow.AddMilliseconds(50000.0);
                    else if (obj.Name == "Sprint Potion")
                        obj.NextUse = DateTime.UtcNow.AddMilliseconds(16000.0);
                    else if (obj.Name == "Grime Scent")
                        obj.NextUse = DateTime.UtcNow.AddMilliseconds(11000.0);
                    else if (obj.Name == "Damage Scroll")
                        obj.NextUse = DateTime.UtcNow.AddMilliseconds(31000.0);
                    else if (obj.Name.Contains("Two Move Combo"))
                    {
                        if (!this.comboscrollused)
                            ++this.comboscrolluse;
                        if (this.comboscrolluse >= 2)
                        {
                            obj.NextUse = DateTime.UtcNow.AddMilliseconds(121000.0);
                            this.ComboScrollTimer.Start();
                            this.comboscrolluse = 0;
                            this.comboscrollused = true;
                        }
                    }
                    else if (obj.Name.Contains("Three Move Combo"))
                    {
                        if (!this.comboscrollused)
                            ++this.comboscrolluse;
                        if (this.comboscrolluse >= 3)
                        {
                            obj.NextUse = DateTime.UtcNow.AddMilliseconds(121000.0);
                            this.ComboScrollTimer.Start();
                            this.comboscrolluse = 0;
                            this.comboscrollused = true;
                        }
                    }
                    else
                        obj.NextUse = DateTime.UtcNow.AddMilliseconds(325.0);
                    return true;
                }
            }
            return false;
        }

        public bool FirstItemHasNoDurability
        {
            get
            {
                foreach (Item obj in this.Inventory)
                {
                    if (obj != null && obj.InventorySlot == 1 && obj.Name != "Warranty Bag" && obj.MaximumDurability == 0U)
                        return true;
                }
                return false;
            }
        }

        public string ItemInSlot(int slot)
        {
            string empty = string.Empty;
            foreach (Item obj in this.Inventory)
            {
                if (obj != null && obj.InventorySlot == slot)
                    return obj.Name;
            }
            return empty;
        }

        public bool IsGem(string itemName)
        {
            return itemName == "Raw Beryl" || itemName == "Raw Coral" || (itemName == "Raw Ruby" || itemName == "Raw Talgonite") || itemName == "Raw Hy-brasyl";
        }

        public bool IsArmor(string itemName)
        {
            return itemName == "Gardcorp" || itemName == "Journeyman" || (itemName == "Lorum" || itemName == "Mane") || (itemName == "Duin-uasal" || itemName == "Leather Tunic" || (itemName == "Jupe" || itemName == "Lorica")) || (itemName == "Kasmanium Armor" || itemName == "Chainmail" || (itemName == "Iplet Mail" || itemName == "Platemail") || (itemName == "Hy-brasyl Plate" || itemName == "Dobok" || (itemName == "Culotte" || itemName == "Earth Garb"))) || (itemName == "Wind Garb" || itemName == "Mountain Garb" || (itemName == "Cowl" || itemName == "Galuchat Coat") || (itemName == "Mantle" || itemName == "Hierophant" || (itemName == "Dalmatica" || itemName == "Scout Leather")) || (itemName == "Dwarvish Leather" || itemName == "Paluten" || (itemName == "Keaton" || itemName == "Bardocle") || (itemName == "Magi Skirt" || itemName == "Benusta" || (itemName == "Stoller" || itemName == "Clymouth")))) || (itemName == "Clamyth" || itemName == "Leather Bliaut" || (itemName == "Cuirass" || itemName == "Cotehardie") || (itemName == "Kasmanium Hauberk" || itemName == "Surplice Blouse" || (itemName == "Labyrinth Mail" || itemName == "Phoenix Mail")) || (itemName == "Hy-brasyl Plate" || itemName == "Earth Bodice" || (itemName == "Lotus Bodice" || itemName == "Moon Bodice") || (itemName == "Lightning Garb" || itemName == "Sea Garb" || (itemName == "Gorget Gown" || itemName == "Mystic Gown"))) || (itemName == "Elle" || itemName == "Dolman" || (itemName == "Bansagart" || itemName == "Cotte") || (itemName == "Brigandine" || itemName == "Corsette" || (itemName == "Pebble Rose" || itemName == "Kagum"))));
        }

        public bool HasArmors()
        {
            return this.HasMArmors() || this.HasFArmors();
        }

        public bool HasMArmors()
        {
            return this.HasItem("Gardcorp") || this.HasItem("Journeyman") || (this.HasItem("Lorum") || this.HasItem("Mane")) || (this.HasItem("Duin-uasal") || this.HasItem("Leather Tunic") || (this.HasItem("Jupe") || this.HasItem("Lorica"))) || (this.HasItem("Kasmanium Armor") || this.HasItem("Chainmail") || (this.HasItem("Iplet Mail") || this.HasItem("Platemail")) || (this.HasItem("Hy-brasyl Plate") || this.HasItem("Dobok") || (this.HasItem("Culotte") || this.HasItem("Earth Garb")))) || (this.HasItem("Wind Garb") || this.HasItem("Mountain Garb") || (this.HasItem("Cowl") || this.HasItem("Galuchat Coat")) || (this.HasItem("Mantle") || this.HasItem("Hierophant") || (this.HasItem("Dalmatica") || this.HasItem("Scout Leather"))) || (this.HasItem("Dwarvish Leather") || this.HasItem("Paluten") || (this.HasItem("Keaton") || this.HasItem("Bardocle"))));
        }

        public bool HasFArmors()
        {
            return this.HasItem("Magi Skirt") || this.HasItem("Benusta") || (this.HasItem("Stoller") || this.HasItem("Clymouth")) || (this.HasItem("Clamyth") || this.HasItem("Leather Bliaut") || (this.HasItem("Cuirass") || this.HasItem("Cotehardie"))) || (this.HasItem("Kasmanium Hauberk") || this.HasItem("Surplice Blouse") || (this.HasItem("Labyrinth Mail") || this.HasItem("Phoenix Mail")) || (this.HasItem("Hy-brasyl Armor") || this.HasItem("Earth Bodice") || (this.HasItem("Lotus Bodice") || this.HasItem("Moon Bodice")))) || (this.HasItem("Lightning Garb") || this.HasItem("Sea Garb") || (this.HasItem("Gorget Gown") || this.HasItem("Mystic Gown")) || (this.HasItem("Elle") || this.HasItem("Dolman") || (this.HasItem("Bansagart") || this.HasItem("Cotte"))) || (this.HasItem("Brigandine") || this.HasItem("Corsette") || (this.HasItem("Pebble Rose") || this.HasItem("Kagum"))));
        }

        public void DropArmors()
        {
            this.DropItems("Gardcorp");
            this.DropItems("Journeyman");
            this.DropItems("Magi Skirt");
            this.DropItems("Benusta");
            this.DropItems("Leather Bliaut");
            this.DropItems("Cuirass");
            this.DropItems("Leather Tunic");
            this.DropItems("Jupe");
            this.DropItems("Dobok");
            this.DropItems("Culotte");
            this.DropItems("Earth Bodice");
            this.DropItems("Lotus Bodice");
            this.DropItems("Cowl");
            this.DropItems("Galuchat Coat");
            this.DropItems("Gorget Gown");
            this.DropItems("Mystic Gown");
            this.DropItems("Scout Leather");
            this.DropItems("Dwarvish Leather");
            this.DropItems("Cotte");
            this.DropItems("Brigandine");
        }

        public T FindCharacterByName<T>(string name) where T : Character
        {
            try
            {
                foreach (Character character in this.Characters.Values.ToArray<Character>())
                {
                    if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && character.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase) && character is T)
                        return (T)character;
                }
            }
            catch
            {
            }
            return default(T);
        }

        public Player[] AnyPlayer()
        {
            List<Player> playerList = new List<Player>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && character is Player && character.IsOnScreen && this.ServerLocation.DistanceFrom(character.Location) <= 20)
                            playerList.Add((Player)character);
                    }
                }
            }
            catch
            {
            }
            return playerList.ToArray();
        }

        public Player[] NearbyPlayer()
        {
            List<Player> playerList = new List<Player>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && (character.IsOnScreen && character is Player) && this.ServerLocation.DistanceFrom(character.Location) <= 12)
                            playerList.Add((Player)character);
                    }
                }
            }
            catch
            {
            }
            return playerList.ToArray();
        }

        public Player[] NearbyNonAlts()
        {
            List<Player> playerList = new List<Player>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && (!Server.Alts.ContainsKey(character.Name.ToLower()) && character.IsOnScreen) && character is Player && this.ServerLocation.DistanceFrom(character.Location) <= 12)
                            playerList.Add((Player)character);
                    }
                }
            }
            catch
            {
            }
            return playerList.ToArray();
        }

        public Player[] LyliacTargets()
        {
            List<Player> playerList = new List<Player>();
            try
            {
                lock (this.Characters)
                {
                    Dictionary<uint, Character> dictionary = new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters);
                    foreach (targetPlayer targetPlayer in this.targetplayer)
                    {
                        if (targetPlayer != null && targetPlayer.lyliacplayer.Checked)
                        {
                            foreach (Character character in dictionary.Values)
                            {
                                if (character != null && character.Name.Equals(targetPlayer.Text, StringComparison.OrdinalIgnoreCase) && (Server.StaticCharacters.ContainsKey(character.ID) && !Server.Alts.ContainsKey(character.Name.ToLower())) && (DateTime.UtcNow.Subtract(character.LyliacTime).TotalMilliseconds > double.Parse(targetPlayer.lyliacplayercond.Text) && character.IsOnScreen && character is Player) && this.ServerLocation.DistanceFrom(character.Location) <= 12)
                                    playerList.Add((Player)character);
                            }
                        }
                    }
                    if (this.Tab.respondflower.Checked)
                    {
                        foreach (Character character in dictionary.Values)
                        {
                            if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && (Server.StaticCharacters[character.ID].wantsflowered && !Server.Alts.ContainsKey(character.Name.ToLower())) && (character.IsOnScreen && character is Player) && this.ServerLocation.DistanceFrom(character.Location) <= 12)
                                playerList.Add((Player)character);
                        }
                    }
                }
            }
            catch
            {
            }
            return playerList.ToArray();
        }

        public void RemoveCharacterByName(string name)
        {
            try
            {
                foreach (Character character in this.Characters.Values.ToArray<Character>())
                {
                    if (character != null && character.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                        this.Characters.Remove(character.ID);
                }
            }
            catch
            {
            }
        }

        public bool GMsNearby
        {
            get
            {
                foreach (Player player in this.AnyPlayer())
                {
                    if (player != null && (Server.gmlist != null && Server.gmlist.Contains(player.Name.ToLower())))
                        return true;
                }
                return false;
            }
        }

        public bool SafeToWalkFast
        {
            get
            {
                if (MainForm.usefriends)
                {
                    if (this.MapInfo.Number == 10056 || this.lawquest && this.MapInfo.Number == 10004)
                        return false;
                    foreach (Player player in this.AnyPlayer())
                    {
                        if (player != null && !Server.Alts.ContainsKey(player.Name.ToLower()) && (player.Name == string.Empty || Server.friendlist != null && !Server.friendlist.Contains(player.Name.ToLower())))
                            return false;
                    }
                }
                return true;
            }
        }

        public bool GroupIsInRange(int range)
        {
            int num = 0;
            List<Player> playerList = new List<Player>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && character is Player && (this.GroupMembers.Contains(character.Name) && character.IsOnScreen) && this.ServerLocation.DistanceFrom(character.Location) <= range)
                            ++num;
                    }
                }
            }
            catch
            {
            }
            return num != 0 && num == this.GroupMembers.Count;
        }

        public bool IsClosestToYou(Location loc)
        {
            int num = 0;
            Player[] playerArray = this.NearbyPlayer();
            foreach (Player player in playerArray)
            {
                if (player != null && player.IsOnScreen && (player != null && this.ServerLocation.DistanceFrom(loc) <= player.Location.DistanceFrom(loc)) && (!Server.StaticCharacters[player.ID].isskulled && !Server.StaticCharacters[player.ID].IsSkulled) && !this.IsSurrounded(player.Location))
                    ++num;
            }
            return num == playerArray.Length - 1;
        }

        public bool PlayerAtLocation(int x, int y)
        {
            foreach (Player player in this.AnyPlayer())
            {
                if (player != null && player.IsOnScreen && (player.Location.X == x && player.Location.Y == y))
                    return true;
            }
            return false;
        }

        public bool NonAltAtLocation(int x, int y)
        {
            foreach (Player nearbyNonAlt in this.NearbyNonAlts())
            {
                if (nearbyNonAlt != null && nearbyNonAlt.IsOnScreen && (nearbyNonAlt.Location.X == x && nearbyNonAlt.Location.Y == y))
                    return true;
            }
            return false;
        }

        public bool SomeoneElseIsCloserTo(Npc e)
        {
            if (this.MapInfo.Name.Contains("Training Dojo") || this.MapInfo.Name.Equals("Count Macabre Mansion") || this.MapInfo.Name.Equals("Balanced Arena"))
                return false;
            foreach (Player player in this.AnyPlayer())
            {
                if (player != null && player.IsOnScreen && player.DistanceFrom(e.Location) < 5 && ((player.DistanceFrom(e.Location) < 3 || this.ServerLocation.DistanceFrom(e.Location) > player.DistanceFrom(e.Location)) && (!Server.Alts.ContainsKey(player.Name.ToLower()) && !Server.friendlist.Contains(player.Name.ToLower()))) && !this.GroupMembers.Contains(player.Name.ToLower()))
                    return true;
            }
            return false;
        }

        public bool WaitOnBlankNames()
        {
            if (this.Tab.recorditemdata.Checked)
            {
                foreach (Character character in this.Characters.Values.ToArray<Character>())
                {
                    if (character != null && character.IsOnScreen && character.IsInMaxView(this.ServerLocation, 12) && character is Npc && (((character as Npc).Type == Npc.NpcType.NormalMonster && (character as Npc).Image != 552 || (character as Npc).Type == Npc.NpcType.PassableMonster && (character as Npc).Image != 451 && (character as Npc).Image != 3) && (!character.Moved && !character.wassummoned || character.Name == string.Empty || DateTime.UtcNow.Subtract(character.CreateTime).TotalSeconds <= 16.0)))
                        return true;
                }
            }
            return false;
        }

        private void CheckMob()
        {
            if (this.Tab.vactonlyinmobs)
            {
                int num = 0;
                if (this.TargetArray() != null)
                {
                    foreach (Npc target in this.TargetArray())
                    {
                        if (target != null && !this.IgnoreAtLocation(target.Location) && (!this.SomeoneElseIsCloserTo(target) && target.IsOnScreen) && target.IsInMaxView(this.ServerLocation, (int)this.Tab.mobdistance.Value) && (!this.Tab.attackinfinitemr.Checked ? (!this.HasInfiniteMR(target.Image) ? 1 : 0) : 1) != 0 && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(target.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0 && (!Server.StaticCharacters[target.ID].hasdion && !Server.StaticCharacters[target.ID].hasmonsterdion))
                        {
                            if (this.Tab.wayregionson.Checked && this.Tab.walktomonster.Checked && this.nearest != null && this.Tab.walkclosebyonly.Checked)
                            {
                                if (target.DistanceFrom(this.nearest) < 10)
                                    ++num;
                            }
                            else if (this.Tab.walktowards.Checked)
                            {
                                if (target.DistanceFrom(this.nearest) < 8)
                                    ++num;
                            }
                            else if (!target.OutofReach)
                            {
                                ++num;
                            }
                            else
                            {
                                Point[] path = this.MapInfo.FindPath(this.ClientLocation.X, this.ClientLocation.Y, target.Location.X, target.Location.Y, false);
                                if (path.Length > 0 && path.Length < target.DistanceFrom(this.ServerLocation) * 2)
                                {
                                    target.OutofReach = false;
                                    ++num;
                                }
                            }
                        }
                    }
                }
                this.MobCount = num;
                if (this.Mobbed && (Decimal)num <= this.Tab.nolongermobbed.Value)
                {
                    this.Mobbed = false;
                    this.lastaction = DateTime.UtcNow;
                }
                else if ((Decimal)num >= this.Tab.mobsize.Value)
                    this.Mobbed = true;
                if (!this.Mobbed)
                    return;
                this.walktoloot = false;
            }
            else
            {
                if (!this.Mobbed)
                    return;
                this.Mobbed = false;
            }
        }

        public Npc[] IgnoreLureArray()
        {
            Npc[] npcArray = this.TargetArray();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in npcArray)
            {
                if (npc != null && this.IgnoreLure(npc.Image))
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] TargetArray()
        {
            Npc[] R = this.NearestMonsters();
            if (this.MapInfo != null && this.MapInfo.IsLoaded)
            {
                if (this.Tab.allMonsters != null)
                {
                    if (this.Tab.openmedchest.Checked)
                    {
                        R = this.Asilon();
                    }
                    else
                    {
                        R = !this.Tab.allMonsters.targettype.Text.Equals("Highest Hp") ? (!this.Tab.allMonsters.targettype.Text.Equals("Lowest Hp") ? (!this.Tab.allMonsters.targettype.Text.Equals("Farthest") ? this.NearestMonsters() : this.farthestMonsters()) : this.LowestHPMonster()) : this.HighestHPMonster();
                        if (this.MapInfo.Name.Contains("Chaos"))
                            R = this.ChaosAI(R);
                        else if (this.MapInfo.Name.Contains("Mount Giragan"))
                            R = this.MTGAI(R);
                        else if (this.MapInfo.Name.Contains("Shinewood Forest 2") && this.MapInfo.Name != "Shinewood Forest 2" || this.MapInfo.Name.Contains("Shinewood Forest 3") && this.MapInfo.Name != "Shinewood Forest 3" || this.MapInfo.Name.Contains("Shinewood Forest 4") && this.MapInfo.Name != "Shinewood Forest 4")
                            R = this.SWAI(R);
                        else if (this.MapInfo.Name.Contains("Oren Ruins"))
                            R = this.NobisAI(R);
                        else if (this.MapInfo.Name.Contains("Chadul"))
                            R = this.ChadulAI(R);
                        else if (this.MapInfo.Name.Contains("Andor"))
                            R = this.AndorAI(R);
                        else if (this.MapInfo.Name.Contains("Desert Dunes"))
                            R = this.DesertDunesAI(R);
                        else if (this.MapInfo.Name.Contains("Water"))
                            R = this.WaterDungeonAI(R);
                        else if (this.MapInfo.Name.Contains("Macabre Grave Yard"))
                            R = this.ZombieEventAI();
                        else if (this.MapInfo.Name.Contains("Lost Ruin"))
                            R = this.LRAI(R);
                        else if (this.MapInfo.Name.Contains("Dung Field"))
                            R = this.DungAI(R);
                        else if (this.MapInfo.Name.Contains("Assassin Dungeon"))
                            R = this.AssDungAI(R);
                        else if (this.MapInfo.Name.Contains("Preserved Vault"))
                            R = this.VaultAI(R);
                        else if (this.MapInfo.Name.Contains("Yowien"))
                            R = this.YowienAI(R);
                        else if (this.MapInfo.Name.Contains("Sacred Forest"))
                            R = this.TavalyAI(R);
                        else if (this.MapInfo.Name.Contains("Low Tides"))
                            R = (this.LowTideAI(R));
                    }
                }
                
                
            List<Npc> list = ((IEnumerable<Npc>)R).ToList<Npc>();
                if (this.Tab.Monsters != null)
                {
                    foreach (TargetMonster targetMonster in this.targetmonster)
                    {
                        if (targetMonster != null)
                        {
                            foreach (Npc npc in ((IEnumerable<Npc>)this.NearbyMonstersByImage(targetMonster.Text)).ToArray<Npc>())
                            {
                                if (npc != null)
                                    list.Add(npc);
                            }
                        }
                    }
                    return list.ToArray();
                }
            }
            return R;
        }

        public T FindNpcByName<T>(string name) where T : Npc
        {
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && (character.IsOnScreen && character.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase)) && character is T && character.IsInMaxView(this.ServerLocation, 12))
                            return (T)character;
                    }
                }
            }
            catch
            {
            }
            return default(T);
        }

        public T[] GetNearbyCharacters<T>(int range) where T : Character
        {
            List<T> objList = new List<T>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && (character.IsOnScreen && character.IsInMaxView(this.ServerLocation, range)) && character is T)
                            objList.Add((T)character);
                    }
                }
            }
            catch
            {
            }
            return objList.ToArray();
        }

        public T BestTarget<T>(int number, Npc[] R) where T : Character
        {
            if (((IEnumerable<Npc>)R).Count<Npc>() > 0)
            {
                Character[] nearbyCharacters = this.GetNearbyCharacters<Character>(12);
                foreach (Character character in nearbyCharacters)
                {
                    int num;
                    if (character != null && character.IsOnScreen)
                    {
                        switch (character)
                        {
                            case Player _:
                                label_5:
                                num = !character.IsInMaxView(this.ServerLocation, 12) ? 1 : 0;
                                goto label_7;
                            case Npc _:
                                if ((character as Npc).Type == Npc.NpcType.NormalMonster || (character as Npc).Type == Npc.NpcType.PassableMonster)
                                    goto label_5;
                                else
                                    break;
                        }
                    }
                    num = 1;
                    label_7:
                    if (num == 0)
                    {
                        character.BestTargetCount = !((IEnumerable<Character>)R).Contains<Character>(character) ? 0 : 1;
                        foreach (Npc npc in R)
                        {
                            if (npc != null && npc.IsOnScreen && ((int)character.ID != (int)npc.ID && npc.IsInMaxView(character.Location, number)) && Server.StaticCharacters.ContainsKey(npc.ID) && Server.StaticCharacters[npc.ID] != null && ((this.Tab.allMonsters == null || npc == null || npc.Image != 422 || (npc.HpAmount <= 20.0 ? (!npc.isGrimeSpawn ? 1 : 0) : 0) == 0) && (this.Tab.allMonsters == null || !this.HasInfiniteMR(npc.Image)) && ((this.Tab.allMonsters == null || !this.Tab.allMonsters.fasedonly.Checked || Server.StaticCharacters[npc.ID].hasfas) && (this.Tab.allMonsters == null || !this.Tab.allMonsters.ardedonly.Checked || Server.StaticCharacters[npc.ID].hascurse)) && ((!this.MapInfo.Name.Contains("Chaos") || npc.Image != 204 && npc.Image != 208 || !Server.StaticCharacters[npc.ID].hasmonsterdion) && (!this.MapInfo.Name.Contains("Chaos") || npc.Image != 202 && npc.Image != 315 || !Server.StaticCharacters[npc.ID].hasdion) && (!this.MapInfo.Name.Contains("Chadul") || npc.Image != 356 && npc.Image != 357 || !Server.StaticCharacters[npc.ID].hasmonsterdion))))
                                ++character.BestTargetCount;
                        }
                    }
                }
                if (((IEnumerable<Npc>)R).Count<Npc>() > 0)
                {
                    foreach (Character character in (IEnumerable<Character>)((IEnumerable<Character>)nearbyCharacters).OrderByDescending<Character, int>((Func<Character, int>)(d => d.BestTargetCount)))
                    {
                        if (character != null)
                        {
                            if (character.BestTargetCount == 1)
                            {
                                foreach (Npc npc in R)
                                {
                                    if (npc != null && npc.IsOnScreen && (npc.Image != 668 && npc.IsInMaxView(this.ServerLocation, 12)) && Server.StaticCharacters.ContainsKey(npc.ID) && Server.StaticCharacters[npc.ID] != null && ((npc == null || this.Tab.allMonsters == null || npc.Image != 422 || (npc.HpAmount <= 30.0 ? (!npc.isGrimeSpawn ? 1 : 0) : 0) == 0) && (npc == null || this.Tab.allMonsters == null || !this.HasInfiniteMR(npc.Image)) && ((npc == null || !Server.StaticCharacters[npc.ID].hasmonsterdion && !Server.StaticCharacters[npc.ID].hasdion) && (npc == null || this.Tab.allMonsters == null || !this.Tab.allMonsters.fasedonly.Checked || Server.StaticCharacters[npc.ID].hasfas)) && (npc == null || this.Tab.allMonsters == null || !this.Tab.allMonsters.ardedonly.Checked || Server.StaticCharacters[npc.ID].hascurse)))
                                        return (T)character;
                                }
                            }
                            else
                            {
                                int num;
                                if (character.IsOnScreen)
                                {
                                    switch (character)
                                    {
                                        case Player _:
                                            label_28:
                                            if (character.IsInMaxView(this.ServerLocation, 12))
                                            {
                                                num = character.BestTargetCount == 0 ? 1 : 0;
                                                goto label_31;
                                            }
                                            else
                                                break;
                                        case Npc _:
                                            if ((character as Npc).Type == Npc.NpcType.NormalMonster || (character as Npc).Type == Npc.NpcType.PassableMonster)
                                                goto label_28;
                                            else
                                                break;
                                    }
                                }
                                num = 1;
                                label_31:
                                if (num == 0)
                                    return (T)character;
                            }
                        }
                    }
                }
            }
            return default(T);
        }

        public Npc[] NearbyNpcs(Npc.NpcType npcType)
        {
            List<Npc> npcList = new List<Npc>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && (character.IsOnScreen && character is Npc) && this.ServerLocation.DistanceFrom(character.Location) <= 12 && (character as Npc).Type == npcType)
                            npcList.Add((Npc)character);
                    }
                }
            }
            catch
            {
            }
            return npcList.ToArray();
        }

        public Npc[] BestTargets(int number, Npc[] R)
        {
            Character character = this.BestTarget<Character>(number, R);
            List<Npc> npcList = new List<Npc>();
            if (R != null && character != null && ((IEnumerable<Npc>)R).Count<Npc>() > 0)
            {
                foreach (Npc npc in R)
                {
                    if (npc != null && npc.IsOnScreen && npc.DistanceFrom(character.Location) <= number)
                        npcList.Add(npc);
                }
            }
            return npcList.ToArray();
        }

        public Npc[] DionFilter()
        {
            bool flag = false;
            Npc[] npcArray = this.NearbyNormalMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.IsOnScreen && (!this.HasInfiniteMR(npc.Image) && npc.Image != 553) && (npc.Image != 552 && npc.Image != 705) && npc.Image != 583)
                {
                    npcList.Add(npc);
                    if ((this.MapInfo.Name.Contains("Chaos") || this.MapInfo.Name.Contains("Chadul")) && (npc.Image == 208 || npc.Image == 204 || (npc.Image == 356 || npc.Image == 357) || (npc.Image == 202 || npc.Image == 315)) && npc.DistanceFrom(this.ServerLocation) == 1)
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (flag)
                npcList.Clear();
            return npcList.ToArray();
        }

        public Npc[] AllNearbyMonsters()
        {
            List<Npc> npcList = new List<Npc>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && ((this.Tab.recorditemdata.Checked ? (character.Name != string.Empty ? 1 : 0) : 1) != 0 && !character.IsDead && (character.IsOnScreen && character is Npc) && character.IsInMaxView(this.ServerLocation, 12)) && (character as Npc).Type == Npc.NpcType.NormalMonster)
                        {
                            if ((character as Npc).Image != 648 && (character as Npc).Image != 412 && ((character as Npc).Image != 641 && (character as Npc).Image != 543) && ((character as Npc).Image != 456 && (character as Npc).Image != 414 && ((character as Npc).Image != 160 && (character as Npc).Image != 79)) && (character as Npc).Image != 510 && (!this.MapInfo.Name.StartsWith("Crypt ") ? ((character as Npc).Image != 53 ? 1 : 0) : 1) != 0)
                            {
                                if (this.Tab.allMonsters != null && this.Tab.allMonsters.fasamancrystals.Checked || this.Tab.attackinfinitemr.Checked)
                                    npcList.Add((Npc)character);
                                else if (!this.HasInfiniteMR((character as Npc).Image) && (this.MapInfo.Number == 8994 ? ((character as Npc).Image != 547 ? 1 : 0) : 1) != 0)
                                    npcList.Add((Npc)character);
                            }
                        }
                        else if (character != null && Server.StaticCharacters.ContainsKey(character.ID) && ((this.Tab.recorditemdata.Checked ? (character.Name != string.Empty ? 1 : 0) : 1) != 0 && character is Npc && (character.IsOnScreen && (character as Npc).Type == Npc.NpcType.PassableMonster)) && character.IsInMaxView(this.ServerLocation, 12))
                        {
                            if ((character as Npc).Image == 740 && this.MapInfo.Number == 2141 && !this.HasFPig())
                                npcList.Add((Npc)character);
                            else if ((character as Npc).Image == 741 && this.MapInfo.Number == 2141 && !this.HasMPig())
                                npcList.Add((Npc)character);
                            else if ((character as Npc).Image == 864 || (character as Npc).Image == 190 || ((character as Npc).Image == 865 || (character as Npc).Image == 873) || ((character as Npc).Image == 874 || (character as Npc).Image == 875 || ((character as Npc).Image == 394 || (character as Npc).Image == 460)) || ((character as Npc).Image == 649 || (character as Npc).Image == 321 || ((character as Npc).Image == 266 || (character as Npc).Image == 273) || ((character as Npc).Image == 46 || (character as Npc).Image == 815 || ((character as Npc).Image == 814 || (character as Npc).Image == 788))) || ((character as Npc).Image == 782 || (character as Npc).Image == 779 || ((character as Npc).Image == 422 || (character as Npc).Image == 544) || ((character as Npc).Image == 404 || (character as Npc).Image == 790 || ((character as Npc).Image == 791 || (character as Npc).Image == 818)) || ((character as Npc).Image == 262 || (character as Npc).Image == 821 || ((character as Npc).Image == 822 || (character as Npc).Image == 826))) || (character as Npc).Image == 827)
                                npcList.Add((Npc)character);
                            else if ((character as Npc).Image == 329 || (character as Npc).Image == 256 || ((character as Npc).Image == 489 || (character as Npc).Image == 255) || ((character as Npc).Image == 331 || (character as Npc).Image == 211 || ((character as Npc).Image == 481 || (character as Npc).Image == 263)) || ((character as Npc).Image == 330 || (character as Npc).Image == 321 || ((character as Npc).Image == 266 || (character as Npc).Image == 273) || ((character as Npc).Image == 46 || (character as Npc).Image == 815 || ((character as Npc).Image == 814 || (character as Npc).Image == 788))) || ((character as Npc).Image == 782 || (character as Npc).Image == 779 || ((character as Npc).Image == 422 || (character as Npc).Image == 544) || ((character as Npc).Image == 404 || (character as Npc).Image == 790 || ((character as Npc).Image == 791 || (character as Npc).Image == 818)) || ((character as Npc).Image == 262 || (character as Npc).Image == 821 || ((character as Npc).Image == 822 || (character as Npc).Image == 826))) || (character as Npc).Image == 827)
                                npcList.Add((Npc)character);
                        }
                    }
                }
            }
            catch
            {
            }
            return npcList.ToArray();
        }

        public Npc[] NearbyNormalMonsters()
        {
            List<Npc> npcList = new List<Npc>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        if (character != null && character is Npc && ((this.Tab.recorditemdata.Checked ? (character.Name != string.Empty ? 1 : 0) : 1) != 0 && character.IsOnScreen && (!character.IsDead && character.IsInMaxView(this.ServerLocation, 12))) && Server.StaticCharacters.ContainsKey(character.ID))
                        {
                            if ((character as Npc).Type == Npc.NpcType.NormalMonster)
                            {
                                if (this.Tab.openmedchest.Checked)
                                {
                                    if ((character as Npc).Image == 456 && !this.Characters[character.ID].WrongKey)
                                        npcList.Add((Npc)character);
                                }
                                else
                                {
                                    DateTime utcNow;
                                    int num1;
                                    if ((character as Npc).Image != 563 && (character as Npc).Image != 412 && ((character as Npc).Image != 564 && (character as Npc).Image != 565) && ((character as Npc).Image != 566 && (character as Npc).Image != 641 && ((character as Npc).Image != 648 && (character as Npc).Image != 543)) && ((character as Npc).Image != 456 && (character as Npc).Image != 414 && (character as Npc).Image != 510) && (!this.MapInfo.Name.StartsWith("Crypt ") ? ((character as Npc).Image != 53 ? 1 : 0) : 1) != 0)
                                    {
                                        int num2;
                                        if ((character as Npc).Image != 511)
                                            num2 = 1;
                                        else if (!(this.losterbiedelay == DateTime.MinValue))
                                        {
                                            utcNow = DateTime.UtcNow;
                                            num2 = utcNow.Subtract(this.losterbiedelay).TotalSeconds > 180.0 ? 1 : 0;
                                        }
                                        else
                                            num2 = 1;
                                        num1 = num2 == 0 ? 1 : 0;
                                    }
                                    else
                                        num1 = 1;
                                    if (num1 == 0)
                                    {
                                        if (this.Tab.allMonsters != null && this.Tab.allMonsters.fasamancrystals.Checked || this.Tab.attackinfinitemr.Checked)
                                            npcList.Add((Npc)character);
                                        else if (!this.HasInfiniteMR((character as Npc).Image) && (this.MapInfo.Number == 8994 ? ((character as Npc).Image != 547 ? 1 : 0) : 1) != 0)
                                        {
                                            if (this.Tab.recorditemdata.Checked)
                                            {
                                                int num2;
                                                if (!character.Moved || character.wassummoned)
                                                {
                                                    utcNow = DateTime.UtcNow;
                                                    num2 = utcNow.Subtract(character.CreateTime).TotalSeconds <= 16.0 ? 1 : 0;
                                                }
                                                else
                                                    num2 = 0;
                                                if (num2 == 0 && !character.Name.Contains("Chandi"))
                                                    npcList.Add((Npc)character);
                                            }
                                            else
                                                npcList.Add((Npc)character);
                                        }
                                    }
                                }
                            }
                            else if ((character as Npc).Type == Npc.NpcType.PassableMonster)
                            {
                                if ((character as Npc).Image == 740 && this.MapInfo.Number == 2141 && !this.HasFPig())
                                    npcList.Add((Npc)character);
                                else if ((character as Npc).Image == 741 && this.MapInfo.Number == 2141 && !this.HasMPig())
                                    npcList.Add((Npc)character);
                                else if ((character as Npc).Image == 878 && this.ItemAmount("Fir Log") < 12U)
                                    npcList.Add((Npc)character);
                                else if ((character as Npc).Image == 876 && this.ItemAmount("Cedar Log") < 12U)
                                    npcList.Add((Npc)character);
                                else if ((character as Npc).Image == 864 || (character as Npc).Image == 190 || ((character as Npc).Image == 634 || (character as Npc).Image == 661) || ((character as Npc).Image == 664 || (character as Npc).Image == 865 || ((character as Npc).Image == 856 || (character as Npc).Image == 873)) || ((character as Npc).Image == 874 || (character as Npc).Image == 875 || ((character as Npc).Image == 394 || (character as Npc).Image == 460) || ((character as Npc).Image == 649 || (character as Npc).Image == 321 || ((character as Npc).Image == 266 || (character as Npc).Image == 273))) || ((character as Npc).Image == 46 || (character as Npc).Image == 815 || ((character as Npc).Image == 814 || (character as Npc).Image == 788) || ((character as Npc).Image == 782 || (character as Npc).Image == 779 || ((character as Npc).Image == 422 || (character as Npc).Image == 544)) || ((character as Npc).Image == 404 || (character as Npc).Image == 610 || ((character as Npc).Image == 611 || (character as Npc).Image == 612) || ((character as Npc).Image == 790 || (character as Npc).Image == 791 || ((character as Npc).Image == 818 || (character as Npc).Image == 262)))) || ((character as Npc).Image == 821 || (character as Npc).Image == 822 || (character as Npc).Image == 826) || (character as Npc).Image == 827)
                                    npcList.Add((Npc)character);
                            }
                        }
                    }
                }
            }
            catch
            {
            }
            return npcList.ToArray();
        }

        public Npc[] NearbyMonstersByImage(string image)
        {
            List<Npc> npcList = new List<Npc>();
            try
            {
                lock (this.Characters)
                {
                    foreach (Character character in new Dictionary<uint, Character>((IDictionary<uint, Character>)this.Characters).Values)
                    {
                        DateTime utcNow;
                        int num1;
                        if (character != null && ((this.Tab.recorditemdata.Checked ? (character.Name != string.Empty ? 1 : 0) : 1) != 0 && Server.StaticCharacters.ContainsKey(character.ID) && (character.IsOnScreen && character is Npc) && (character.IsInMaxView(this.ServerLocation, 12) && ((character as Npc).Type == Npc.NpcType.NormalMonster || (character as Npc).Type == Npc.NpcType.PassableMonster))))
                        {
                            utcNow = DateTime.UtcNow;
                            num1 = utcNow.Subtract(character.CreateTime).TotalMilliseconds <= (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0;
                        }
                        else
                            num1 = 1;
                        if (num1 == 0 && ((image != null || image != string.Empty) && int.Parse(image) == (character as Npc).Image))
                        {
                            if (this.Tab.recorditemdata.Checked)
                            {
                                int num2;
                                if (!character.Moved)
                                {
                                    utcNow = DateTime.UtcNow;
                                    num2 = utcNow.Subtract(character.CreateTime).TotalSeconds <= 16.0 ? 1 : 0;
                                }
                                else
                                    num2 = 0;
                                if (num2 == 0)
                                    npcList.Add((Npc)character);
                            }
                            else
                                npcList.Add((Npc)character);
                        }
                    }
                }
            }
            catch
            {
            }
            return npcList.ToArray();
        }

        public Npc[] NearestMonsters()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                {
                    if (npc.WithinSquare(this.ServerLocation, 1))
                        npcList.Add(npc);
                    foreach (Character character in this.Characters.Values.ToArray<Character>())
                    {
                        if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 1))
                            npcList.Add(npc);
                    }
                }
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (Server.StaticCharacters[npc.ID] != null && Server.StaticCharacters[npc.ID].IsCupping) && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (int)npc.ID == (int)this.LastMonsterId && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] farthestMonsters()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderByDescending<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID].IsCupping && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderByDescending<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (int)npc.ID == (int)this.LastMonsterId && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderByDescending<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.IsOnScreen && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] HighestHPMonster()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderByDescending<Npc, double>((Func<Npc, double>)(e => Server.StaticCharacters[e.ID].HpAmount)))
            {
                if (npc != null && npc.IsOnScreen && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] LowestHPMonster()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, double>((Func<Npc, double>)(e => Server.StaticCharacters[e.ID].HpAmount)))
            {
                if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID].IsCupping && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, double>((Func<Npc, double>)(e => Server.StaticCharacters[e.ID].HpAmount)))
            {
                if (npc != null && npc.IsOnScreen && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] DiondOnlyMonsters()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.IsOnScreen && (Server.StaticCharacters[npc.ID].hasmonsterdion || Server.StaticCharacters[npc.ID].hasdion) && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(npc.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc NearestMonster()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            Npc npc = (Npc)null;
            foreach (Npc e in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (e != null && !this.IgnoreAtLocation(e.Location) && (e.IsOnScreen && e.IsInMaxView(this.ServerLocation, 12)) && (e.Image != 892 && e.Image != 820 && e.Image != 634) && (this.MapInfo.Name.StartsWith("Crypt ") ? 1 : (e.Image != 46 ? 1 : 0)) != 0 && ((this.MapInfo.Name.Contains("Manor") ? 1 : (e.Image != 321 ? 1 : 0)) != 0 && !this.SomeoneElseIsCloserTo(e)) && !e.OutofReach && (((IEnumerable<Npc>)npcArray).Count<Npc>() == 1 ? 1 : (Server.StaticCharacters[e.ID].hasdion ? 0 : (!Server.StaticCharacters[e.ID].hasmonsterdion ? 1 : 0))) != 0)
                {
                    if (this.Tab.vfollowplayer && this.Tab.vfollowtarget != string.Empty)
                    {
                        Player characterByName = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                        if (characterByName != null && e.IsInMaxView(characterByName.Location, 7))
                        {
                            npc = e;
                            break;
                        }
                    }
                    else if (this.Tab.wayregionson.Checked && this.Tab.walktomonster.Checked && this.nearest != null && this.Tab.walkclosebyonly.Checked)
                    {
                        if (e.DistanceFrom(this.nearest) < 10)
                        {
                            npc = e;
                            break;
                        }
                    }
                    else
                    {
                        npc = e;
                        break;
                    }
                }
            }
            return npc;
        }

        public Npc NearestMonstertoLeader()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            Npc npc1 = (Npc)null;
            Player leader = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
            if (leader != null)
            {
                foreach (Npc npc2 in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(leader.Location))))
                {
                    if (npc2 != null && !this.IgnoreAtLocation(npc2.Location) && (npc2.IsOnScreen && npc2.IsInMaxView(this.ServerLocation, 12)) && (npc2.Image != 892 && npc2.Image != 820 && npc2.Image != 634) && (this.MapInfo.Name.StartsWith("Crypt ") ? 1 : (npc2.Image != 46 ? 1 : 0)) != 0 && (this.MapInfo.Name.Contains("Manor") ? 1 : (npc2.Image != 321 ? 1 : 0)) != 0 && (((IEnumerable<Npc>)npcArray).Count<Npc>() == 1 ? 1 : (Server.StaticCharacters[npc2.ID].hasdion ? 0 : (!Server.StaticCharacters[npc2.ID].hasmonsterdion ? 1 : 0))) != 0)
                    {
                        if (this.Tab.vfollowplayer && this.Tab.vfollowtarget != string.Empty)
                        {
                            leader = this.FindCharacterByName<Player>(this.Tab.vfollowtarget);
                            if (leader != null && npc2.IsInMaxView(leader.Location, 7))
                            {
                                npc1 = npc2;
                                break;
                            }
                        }
                        else
                        {
                            npc1 = npc2;
                            break;
                        }
                    }
                }
            }
            return npc1;
        }

        public Npc HighestHPBesideMe()
        {
            Npc[] npcArray = this.NearbyNormalMonsters();
            Npc npc = (Npc)null;
            foreach (Npc e in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderByDescending<Npc, double>((Func<Npc, double>)(e => Server.StaticCharacters[e.ID].HpAmount)))
            {
                if (e != null && !this.IgnoreAtLocation(e.Location) && (e.IsOnScreen && e.Image != 820) && (e.Image != 892 && e.Image != 634) && (this.MapInfo.Name.StartsWith("Crypt ") ? 1 : (e.Image != 46 ? 1 : 0)) != 0 && ((this.MapInfo.Name.Contains("Manor") ? 1 : (e.Image != 321 ? 1 : 0)) != 0 && e.DistanceFrom(this.ServerLocation) == 1 && !this.SomeoneElseIsCloserTo(e)) && (!this.SafeToWalkFast ? (DateTime.UtcNow.Subtract(e.CreateTime).TotalMilliseconds > (double)this.RandomNumber((int)this.Tab.newtargetdelaya.Value, (int)this.Tab.newtargetdelayb.Value) ? 1 : 0) : 1) != 0 && (((IEnumerable<Npc>)npcArray).Count<Npc>() == 1 ? 1 : (Server.StaticCharacters[e.ID].hasdion ? 0 : (!Server.StaticCharacters[e.ID].hasmonsterdion ? 1 : 0))) != 0)
                {
                    npc = e;
                    break;
                }
            }
            return npc;
        }

        public int FasCount(Npc[] R)
        {
            this.fascount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && (this.IgnoreFas(npc.Image) || Server.StaticCharacters[npc.ID].hasfas))
                    ++this.fascount;
            }
            return this.fascount;
        }

        public bool FasCountLesser(Npc[] R)
        {
            this.MobCount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen)
                {
                    if (npc.WithinSquare(this.ServerLocation, 3))
                        ++this.MobCount;
                    foreach (Character character in this.Characters.Values.ToArray<Character>())
                    {
                        if ((int)character.ID != (int)this.PlayerID && (this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 3))
                            ++this.MobCount;
                    }
                }
            }
            this.fascount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && (this.IgnoreFas(npc.Image) || Server.StaticCharacters[npc.ID].hasfas))
                {
                    if (npc.WithinSquare(this.ServerLocation, 3))
                        ++this.fascount;
                    foreach (Character character in this.Characters.Values.ToArray<Character>())
                    {
                        if ((int)character.ID != (int)this.PlayerID && (this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 3))
                            ++this.fascount;
                    }
                }
            }
            return this.fascount != this.MobCount;
        }

        public int CradhCount(Npc[] R)
        {
            this.cradhcount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && (Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasdarkseal || (Server.StaticCharacters[npc.ID].hasardcradh || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo) || Server.StaticCharacters[npc.ID].hasbeagcradh))
                    ++this.cradhcount;
            }
            return this.cradhcount;
        }

        public bool CradhCountLesser(Npc[] R)
        {
            this.MobCount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen)
                {
                    if (npc.WithinSquare(this.ServerLocation, 3))
                        ++this.MobCount;
                    foreach (Character character in this.Characters.Values.ToArray<Character>())
                    {
                        if ((int)character.ID != (int)this.PlayerID && (this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 3))
                            ++this.MobCount;
                    }
                }
            }
            this.cradhcount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && (Server.StaticCharacters[npc.ID].hasdemise || Server.StaticCharacters[npc.ID].hasdarkerseal || Server.StaticCharacters[npc.ID].hasdarkseal || (Server.StaticCharacters[npc.ID].hasardcradh || Server.StaticCharacters[npc.ID].hasmorcradh) || (Server.StaticCharacters[npc.ID].hascradh || Server.StaticCharacters[npc.ID].hasbardo) || Server.StaticCharacters[npc.ID].hasbeagcradh))
                {
                    if (npc.WithinSquare(this.ServerLocation, 3))
                        ++this.cradhcount;
                    foreach (Character character in this.Characters.Values.ToArray<Character>())
                    {
                        if ((int)character.ID != (int)this.PlayerID && (this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>)StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 3))
                            ++this.cradhcount;
                    }
                }
            }
            return this.cradhcount != this.MobCount;
        }

        public int CTCount(Npc[] R)
        {
            this.ctcount = 0;
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID].hasct)
                    ++this.ctcount;
            }
            return this.ctcount;
        }

        public bool IsSurrounded(Location loc)
        {
            int num = 0;
            if (this.MonsterAtLocation(loc.X, loc.Y - 1) || this.PlayerAtLocation(loc.X, loc.Y - 1))
                ++num;
            if (this.MonsterAtLocation(loc.X, loc.Y + 1) || this.PlayerAtLocation(loc.X, loc.Y + 1))
                ++num;
            if (this.MonsterAtLocation(loc.X + 1, loc.Y) || this.PlayerAtLocation(loc.X + 1, loc.Y))
                ++num;
            if (this.MonsterAtLocation(loc.X - 1, loc.Y) || this.PlayerAtLocation(loc.X - 1, loc.Y))
                ++num;
            return num == 4;
        }

        public int SurroundedCount
        {
            get
            {
                int num = 0;
                if (this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y - 1))
                    ++num;
                if (this.MonsterAtLocation(this.ServerLocation.X, this.ServerLocation.Y + 1))
                    ++num;
                if (this.MonsterAtLocation(this.ServerLocation.X + 1, this.ServerLocation.Y))
                    ++num;
                if (this.MonsterAtLocation(this.ServerLocation.X - 1, this.ServerLocation.Y))
                    ++num;
                return num;
            }
        }

        public bool MonsterAtLocation(int x, int y)
        {
            foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
            {
                if (nearbyNormalMonster != null && nearbyNormalMonster.IsOnScreen && (nearbyNormalMonster.Location.X == x && nearbyNormalMonster.Location.Y == y))
                    return true;
            }
            return false;
        }

        public bool NorajoBesideMe
        {
            get
            {
                foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
                {
                    if (nearbyNormalMonster != null && nearbyNormalMonster.IsOnScreen && nearbyNormalMonster.Name == "Norajo" && nearbyNormalMonster.DistanceFrom(this.ServerLocation) == 1)
                        return true;
                }
                return false;
            }
        }

        public bool ImFacingMonster
        {
            get
            {
                foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
                {
                    if (nearbyNormalMonster != null && nearbyNormalMonster.IsOnScreen && (nearbyNormalMonster.Image != 820 && nearbyNormalMonster.Image != 892) && nearbyNormalMonster.Image != 634 && (this.MapInfo.Name.StartsWith("Crypt ") ? 1 : (nearbyNormalMonster.Image != 46 ? 1 : 0)) != 0 && (this.MapInfo.Name.Contains("Manor") ? 1 : (nearbyNormalMonster.Image != 321 ? 1 : 0)) != 0 && nearbyNormalMonster.IsInFront(this.ServerLocation))
                        return true;
                }
                return false;
            }
        }

        public bool ImFacingAnything
        {
            get
            {
                foreach (Character character in this.Characters.Values.ToArray<Character>())
                {
                    if (character != null && character.IsOnScreen && character.IsInFront(this.ServerLocation) && (!(character is Npc) || (character as Npc).Type != Npc.NpcType.Item))
                        return true;
                }
                return false;
            }
        }

        public Npc MonsterInFront()
        {
            Npc npc = (Npc)null;
            if (this.ImFacingMonster)
            {
                Npc[] npcArray = this.NearbyNormalMonsters();
                foreach (Npc e in npcArray)
                {
                    if (e != null && e.IsOnScreen && (e.Image != 820 && e.Image != 892) && e.Image != 634 && (this.MapInfo.Name.StartsWith("Crypt ") ? 1 : (e.Image != 46 ? 1 : 0)) != 0 && ((this.MapInfo.Name.Contains("Manor") ? 1 : (e.Image != 321 ? 1 : 0)) != 0 && e.IsInFront(this.ServerLocation)) && !this.SomeoneElseIsCloserTo(e) && (((IEnumerable<Npc>)npcArray).Count<Npc>() == 1 ? 1 : (Server.StaticCharacters[e.ID].hasdion ? 0 : (!Server.StaticCharacters[e.ID].hasmonsterdion ? 1 : 0))) != 0)
                        npc = e;
                }
            }
            return npc;
        }

        public Npc ImOnAMonster()
        {
            Npc npc = (Npc)null;
            foreach (Npc nearbyNormalMonster in this.NearbyNormalMonsters())
            {
                if (nearbyNormalMonster != null && nearbyNormalMonster.IsOnScreen && nearbyNormalMonster.DistanceFrom(this.ServerLocation) == 0)
                    npc = nearbyNormalMonster;
            }
            return npc;
        }

        public bool MonsterInWall(Npc c)
        {
            Point[,] tiles = this.MapInfo.Tiles;
            int upperBound1 = tiles.GetUpperBound(0);
            int upperBound2 = tiles.GetUpperBound(1);
            for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
            {
                for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
                {
                    Point point = tiles[lowerBound1, lowerBound2];
                    if (point.X == c.Location.X && point.Y == c.Location.Y && point.IsWall && c.Location.DistanceFrom(this.ServerLocation) > 1)
                        return true;
                }
            }
            return false;
        }

        public Npc[] AssDungAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 468 || npc.Image == 469 || npc.Image == 470) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] VaultAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 382 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] LRAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 547 || npc.Image == 468 || (npc.Image == 270 || npc.Image == 422) || (npc.Image == 469 || npc.Image == 470 || (npc.Image == 788 || npc.Image == 779)) || (npc.Image == 782 || npc.Image == 785 || (npc.Image == 784 || npc.Image == 760))) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] NobisAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 343 || npc.Image == 337 || (npc.Image == 153 || npc.Image == 204) || (npc.Image == 324 || npc.Image == 209)) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] SWAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 266 || npc.Image == 272 || (npc.Image == 273 || npc.Image == 240)) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] MTGAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 278 || npc.Image == 345 || (npc.Image == 243 || npc.Image == 12) || (npc.Image == 376 || npc.Image == 378 || npc.Image == 18)) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] SWDarkDefAI()
        {
            Npc[] npcArray = this.AllNearbyMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.Image == 266 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.Image == 272 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.Image != 273 && npc.Image != 240 && npc.IsOnScreen)
                {
                    if (this.Tab.recorditemdata.Checked)
                    {
                        if ((npc.Moved && !npc.wassummoned || DateTime.UtcNow.Subtract(npc.CreateTime).TotalSeconds > 16.0) && !npc.Name.Contains("Chandi"))
                            npcList.Add(npc);
                    }
                    else
                        npcList.Add(npc);
                }
            }
            return npcList.ToArray();
        }

        public Npc[] SWLightDefAI()
        {
            Npc[] npcArray = this.AllNearbyMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.Image == 273 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in (IEnumerable<Npc>)((IEnumerable<Npc>)npcArray).OrderBy<Npc, int>((Func<Npc, int>)(e => e.Location.DistanceFrom(this.ServerLocation))))
            {
                if (npc != null && npc.Image == 240 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] Asilon()
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Character character in this.Characters.Values.ToArray<Character>())
            {
                if (character != null && character is Npc && character.IsOnScreen && ((character as Npc).Image == 419 || (character as Npc).Image == 418 || ((character as Npc).Image == 416 || (character as Npc).Image == 421) || ((character as Npc).Image == 422 || (character as Npc).Image == 420 || ((character as Npc).Image == 414 || (character as Npc).Image == 423)) || ((character as Npc).Image == 452 || (character as Npc).Image == 415 || (character as Npc).Image == 424) || (character as Npc).Image == 472))
                    npcList.Add((Npc)character);
            }
            return npcList.ToArray();
        }

        public Npc[] DungAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 452 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 411 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] ZombieEventAI()
        {
            Npc[] npcArray = this.AllNearbyMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.Image == 164 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.Image == 165 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.Image == 166 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.Image == 167 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.Image == 170 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] CountMacabreAI(Npc[] R)
        {
            bool flag = false;
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 46 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 814 && npc.IsOnScreen)
                {
                    npcList.Add(npc);
                    flag = true;
                }
            }
            if (!flag)
            {
                foreach (Npc npc in R)
                {
                    if (npc != null && npc.Image == 321 && npc.IsOnScreen)
                        npcList.Add(npc);
                }
                foreach (Npc npc in R)
                {
                    if (npc != null && npc.Image == 815 && npc.IsOnScreen)
                        npcList.Add(npc);
                }
            }
            return npcList.ToArray();
        }

        public Npc[] ChadulAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 398 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 356 || npc.Image == 357) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 595 || npc.Image == 596 || npc.Image == 597) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 346 || npc.Image == 350) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 348 || npc.Image == 353) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 347 || npc.Image == 354) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 355 || npc.Image == 351) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] ChaosAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen && Server.StaticCharacters[npc.ID] != null && (Server.StaticCharacters[npc.ID].hasmonsterdion || Server.StaticCharacters[npc.ID].hasdion))
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 199 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 204 || npc.Image == 208) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 198 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && (npc.Image == 196 || npc.Image == 209) && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 315 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image != 315 && (npc.Image != 208 && npc.Image != 204) && (npc.Image != 198 && npc.Image != 209 && (npc.Image != 199 && npc.Image != 196)) && npc.IsOnScreen && npc.Type == Npc.NpcType.NormalMonster && (npc.Image == 197 || npc.Image == 189 || (npc.Image == 200 || npc.Image == 203) || (npc.Image == 211 || npc.Image == 205 || (npc.Image == 201 || npc.Image == 242)) || (npc.Image == 320 || npc.Image == 243 || (npc.Image == 240 || npc.Image == 210) || (npc.Image == 325 || npc.Image == 190 || (npc.Image == 206 || npc.Image == 324))) || (npc.Image == 323 || npc.Image == 202 || npc.Image == 317) || npc.Image == 313))
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] DesertDunesAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 491 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 188 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 593 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 467 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 592 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 460 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 594 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 462 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }

        public Npc[] WaterDungeonAI(Npc[] R)
        {
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 704 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 716 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 715 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 706 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 703 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 705 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 492 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            return npcList.ToArray();
        }


    


    public Npc[] AndorAI(Npc[] R)
    {
      List<Npc> npcList = new List<Npc>();
      foreach (Npc npc in (IEnumerable<Npc>) ((IEnumerable<Npc>) R).OrderByDescending<Npc, int>((Func<Npc, int>) (e => e.Location.DistanceFrom(this.ServerLocation))))
      {
        if (npc != null && npc.Image == 541 && (npc.Name == string.Empty && npc.IsOnScreen) && (!this.clickedamonster || DateTime.UtcNow.Subtract(this.clickentitytime).TotalSeconds > 2.0) && (npc.Name != "Norajo" || npc.Name != "Kaze" || !npc.Name.Contains("Worker")))
        {
          this.clickentitytime = DateTime.UtcNow;
          this.ClickEntity(npc.ID);
          this.lastclickentityID = npc.ID;
          this.clickedamonster = true;
        }
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 542 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 544 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 541 && (npc.IsOnScreen && npc.Name == "Norajo") && npc.Location.DistanceFrom(this.ServerLocation) > 1)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 553 && npc.IsOnScreen && npc.Location.DistanceFrom(this.ServerLocation) <= 5)
          npcList.Add(npc);
      }
      foreach (Npc npc in (IEnumerable<Npc>) ((IEnumerable<Npc>) R).OrderBy<Npc, int>((Func<Npc, int>) (e => e.Location.DistanceFrom(this.ServerLocation))))
      {
        if (npc != null && npc.Image == 539 && npc.IsOnScreen)
        {
          if (npc.WithinSquare(this.ServerLocation, 1))
            npcList.Add(npc);
          foreach (Character character in this.Characters.Values.ToArray<Character>())
          {
            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>) StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 1))
              npcList.Add(npc);
          }
        }
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 539 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in (IEnumerable<Npc>) ((IEnumerable<Npc>) R).OrderBy<Npc, int>((Func<Npc, int>) (e => e.Location.DistanceFrom(this.ServerLocation))))
      {
        if (npc != null && npc.Image == 540 && npc.IsOnScreen)
        {
          if (npc.WithinSquare(this.ServerLocation, 1))
            npcList.Add(npc);
          foreach (Character character in this.Characters.Values.ToArray<Character>())
          {
            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>) StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 1))
              npcList.Add(npc);
          }
        }
      }
      foreach (Npc npc in (IEnumerable<Npc>) ((IEnumerable<Npc>) R).OrderBy<Npc, int>((Func<Npc, int>) (e => e.Location.DistanceFrom(this.ServerLocation))))
      {
        if (npc != null && npc.Image == 538 && npc.IsOnScreen)
        {
          if (npc.WithinSquare(this.ServerLocation, 1))
            npcList.Add(npc);
          foreach (Character character in this.Characters.Values.ToArray<Character>())
          {
            if ((this.GroupMembers.Contains<string>(character.Name, (IEqualityComparer<string>) StringComparer.CurrentCultureIgnoreCase) || Server.Alts.ContainsKey(character.Name)) && npc.WithinSquare(character.Location, 1))
              npcList.Add(npc);
          }
        }
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 540 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 538 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 555 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 554 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 492 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in (IEnumerable<Npc>) ((IEnumerable<Npc>) R).OrderByDescending<Npc, int>((Func<Npc, int>) (e => e.Location.DistanceFrom(this.ServerLocation))))
      {
        if (npc != null && npc.Image == 537 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 541 && (npc.IsOnScreen && npc.Name != "Norajo") && npc.Name != string.Empty)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 553 && npc.IsOnScreen && npc.Location.DistanceFrom(this.ServerLocation) > 5)
          npcList.Add(npc);
      }
      return npcList.ToArray();
    }


    public Npc[] YowienAI(Npc[] R)
    {
      Npc[] npcArray = this.AllNearbyMonsters();
      List<Npc> npcList = new List<Npc>();
      foreach (Npc npc in npcArray)
      {
        if (npc != null && npc.Image == 634 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && (npc.Image == 873 || npc.Image == 874 || npc.Image == 875) && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 856 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && (npc.Image == 668 || npc.Image == 666) && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 661 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.Image == 664 && npc.IsOnScreen)
          npcList.Add(npc);
      }
      foreach (Npc npc in R)
      {
        if (npc != null && npc.IsOnScreen)
          npcList.Add(npc);
      }
      return npcList.ToArray();
    }
        //hardcoded maps
        public Npc[] TavalyAI(Npc[] R)
        {
            Npc[] npcArray = this.AllNearbyMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in npcArray)

            {
                if (npc != null && (npc.Image == 937 || npc.Image == 938 || npc.Image == 255) && npc.IsOnScreen)
                    npcList.Add(npc);
            }


            return npcList.ToArray();
        }

        public Npc[] LowTideAI(Npc[] R)
        {
            Npc[] npcArray = this.AllNearbyMonsters();
            List<Npc> npcList = new List<Npc>();
            foreach (Npc npc in npcArray)
            {
                if (npc != null && npc.Image == 329 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            
                foreach (Npc npc in R)
                {
                    if (npc != null && npc.Image == 256 && npc.IsOnScreen)
                        npcList.Add(npc);
                }
            
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 331 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 489 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 255 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
                foreach (Npc npc in R)
                {
                    if (npc != null && npc.Image == 211 && npc.IsOnScreen)
                        npcList.Add(npc);
                }
            
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 481 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 263 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 330 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.Image == 490 && npc.IsOnScreen)
                    npcList.Add(npc);
            }
            foreach (Npc npc in R)
            {
                if (npc != null && npc.IsOnScreen)
                    npcList.Add(npc);
            }

            return npcList.ToArray();
        }


        public bool HasInfiniteMR(int image)
    {
      switch (image)
      {
        case 12:
          return true;
        case 666:
          return true;
        case 859:
          return true;
        case 860:
          return true;
        case 896:
          return true;
        case 897:
          return true;
        default:
          return false;
      }
    }

    public bool IgnoreCurse(int image)
    {
      return image == 635 || image == 411;
    }

    public bool IgnoreFas(int image)
    {
      return image == 210 || image == 190;
    }

    public bool IgnoreLure(int image)
    {
      switch (image)
      {
        case 583:
          return true;
        case 666:
          return true;
        case 668:
          return true;
        case 859:
          return true;
        case 860:
          return true;
        case 873:
          return true;
        case 874:
          return true;
        case 875:
          return true;
        case 892:
          return true;
        case 896:
          return true;
        case 897:
          return true;
        default:
          return false;
      }
    }

    public bool IgnoreHP(int image)
    {
      switch (image)
      {
        case 382:
          return true;
        case 399:
          return true;
        case 411:
          return true;
        case 635:
          return true;
        case 651:
          return true;
        case 814:
          return true;
        case 815:
          return true;
        case 852:
          return true;
        case 853:
          return true;
        case 854:
          return true;
        case 855:
          return true;
        case 914:
          return true;
        case 915:
          return true;
        case 916:
          return true;
        default:
          return false;
      }
    }

    public bool IgnoreAtLocation(Location loc)
    {
      return this.MapInfo.Number == 2089 && (loc.X == 19 && loc.Y == 6 || loc.X == 7 && loc.Y == 19 || (loc.X == 9 && loc.Y == 19 || loc.X == 4 && loc.Y == 1) || (loc.X == 5 && loc.Y == 1 || loc.X == 6 && loc.Y == 1 || (loc.X == 4 && loc.Y == 0 || loc.X == 5 && loc.Y == 0)) || loc.X == 7 && loc.Y == 0) || (this.MapInfo.Number == 2088 && (loc.X == 14 && loc.Y == 26 || loc.X == 0 && loc.Y == 17 || loc.X == 0 && loc.Y == 13) || (this.MapInfo.Number == 2120 && (loc.X == 39 && loc.Y == 4) || (this.MapInfo.Number == 8361 && loc.Y <= 2 || this.MapInfo.Number == 8360 && loc.Y <= 1)));
    }

    public void StrajPopupText(int popup)
    {
      this.previousfakepopup = popup;
      switch (popup)
      {
        case 1:
          this.FakePopupList(1U, "You there! ... Have we met before? ... I know I've seen you somewhere ...|You're full of shit!|You do seem vaguely familiar...|Follow me|Stop following me");
          break;
        case 2:
          this.FakePopup(1U, "Fine, be like that!", (byte) 0, (byte) 0);
          break;
        case 3:
          this.FakePopup(1U, "blah blah blah blah blah blah blah blah blah blah blah blah blah", (byte) 0, (byte) 1);
          break;
        case 4:
          this.FakePopup(1U, "Come back later and we'll talk again.", (byte) 1, (byte) 0);
          break;
      }
    }

    public void StrajAI()
    {
      this.FakeNpcs[1U].Passive = false;
      Thread.Sleep(200);
      this.FakeTurn(1U, Direction.South);
      this.FakeNPCChat("Straj: You dare challenge ME?!", 1U);
      Thread.Sleep(1000);
      for (int index1 = 0; index1 < 4; ++index1)
      {
        Character fakeNpc1 = this.FakeNpcs[1U];
        if (fakeNpc1.Map == this.MapInfo.Number)
          this.FakeSpellAni(fakeNpc1.Location.X, fakeNpc1.Location.Y, 384);
        int x = fakeNpc1.Location.X;
        int y = fakeNpc1.Location.Y;
        Thread.Sleep(100);
        fakeNpc1.Location.X = 500;
        fakeNpc1.Location.Y = 500;
        this.UpdateFakeNpcs();
        this.MapInfo.UpdateBlocks(this);
        Thread.Sleep(1500);
        Point point1 = (Point) null;
        List<Point> source = new List<Point>();
        Point[,] tiles = this.MapInfo.Tiles;
        int upperBound1 = tiles.GetUpperBound(0);
        int upperBound2 = tiles.GetUpperBound(1);
        for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
        {
          for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
          {
            Point point2 = tiles[lowerBound1, lowerBound2];
            if (point2 != null && point2.Passable && (point2.X != x && point2.Y != y) && point2.DistanceFrom(this.ServerLocation) <= 3)
              source.Add(point2);
          }
        }
        int num = this.RandomNumber(1, source.Count<Point>());
        for (int index2 = 0; index2 < source.Count<Point>(); ++index2)
        {
          if (num - 1 == index2)
          {
            point1 = source[index2];
            break;
          }
        }
        if (point1 != null)
        {
          Character fakeNpc2 = this.FakeNpcs[1U];
          fakeNpc2.Location.X = point1.X;
          fakeNpc2.Location.Y = point1.Y;
          if (fakeNpc2.Map == this.MapInfo.Number)
            this.FakeSpellAni(point1.X, point1.Y, 384);
          Thread.Sleep(100);
          this.UpdateFakeNpcs();
          Thread.Sleep(200);
        }
        for (int index2 = 0; index2 < this.RandomNumber(2, 4); ++index2)
        {
          if (this.RandomNumber(1, 20) == 1)
            this.FakeNPCChat("Straj: Eat shit!", 1U);
          Thread.Sleep(200);
          this.FakeBodyAni(1U, 1);
          Thread.Sleep(200);
          switch (this.RandomNumber(1, 3))
          {
            case 1:
              this.FakeSpellAniTarget(this.PlayerID, 1U, (ushort) 366, (ushort) 0);
              break;
            case 2:
              this.FakeSpellAniTarget(this.PlayerID, 1U, (ushort) 335, (ushort) 0);
              break;
            case 3:
              this.FakeSpellAniTarget(this.PlayerID, 1U, (ushort) 288, (ushort) 0);
              break;
          }
          Thread.Sleep(800);
        }
      }
      this.FakeNPCChat("Straj: k i'm done", 1U);
      Thread.Sleep(1000);
      this.FakeNpcs[1U].Passive = true;
      Server.StrajNpc = (Thread) null;
    }

    public void FakeNPCChat(string text, uint id)
    {
      if (!this.FakeNpcs.ContainsKey(id) || this.FakeNpcs[id].Map != this.MapInfo.Number)
        return;
      this.FakeChat(text, id);
    }

    public void FakeSpriteWalking(object id)
    {
      string name = this.FakeNpcs[Convert.ToUInt32(id)].Name;
      this.FakeNPCChat(name + ": So, where are we going?", 1U);
      Thread.Sleep(1000);
      while (this.FakeNpcs[Convert.ToUInt32(id)].FollowMode)
      {
        if (this.FakeNpcs[Convert.ToUInt32(id)].Passive)
        {
          Character fakeNpc1 = this.FakeNpcs[Convert.ToUInt32(id)];
          if (fakeNpc1.Map != this.MapInfo.Number)
            this.FakeNpcs[Convert.ToUInt32(id)].Map = this.MapInfo.Number;
          if (fakeNpc1.Location.DistanceFrom(this.ServerLocation) > 10)
          {
            Point point1 = (Point) null;
            List<Point> source = new List<Point>();
            Point[,] tiles = this.MapInfo.Tiles;
            int upperBound1 = tiles.GetUpperBound(0);
            int upperBound2 = tiles.GetUpperBound(1);
            for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
            {
              for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
              {
                Point point2 = tiles[lowerBound1, lowerBound2];
                if (point2 != null && point2.Passable && point2.DistanceFrom(this.ServerLocation) <= 2)
                  source.Add(point2);
              }
            }
            int num = this.RandomNumber(1, source.Count<Point>());
            for (int index = 0; index < source.Count<Point>(); ++index)
            {
              if (num - 1 == index)
              {
                point1 = source[index];
                break;
              }
            }
            if (point1 != null)
            {
              Character fakeNpc2 = this.FakeNpcs[1U];
              fakeNpc2.Location.X = point1.X;
              fakeNpc2.Location.Y = point1.Y;
              if (fakeNpc2.Map == this.MapInfo.Number)
                this.FakeSpellAni(point1.X, point1.Y, 384);
              Thread.Sleep(100);
              this.UpdateFakeNpcs();
              Thread.Sleep(200);
            }
          }
          else
          {
            this.MapInfo.UpdateBlocks(this);
            if (this.FakeNpcs[Convert.ToUInt32(id)].Location.DistanceFrom(this.ServerLocation) > 3)
            {
              Point point1 = (Point) null;
              List<Point> source = new List<Point>();
              Point[,] tiles = this.MapInfo.Tiles;
              int upperBound1 = tiles.GetUpperBound(0);
              int upperBound2 = tiles.GetUpperBound(1);
              for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
              {
                for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
                {
                  Point point2 = tiles[lowerBound1, lowerBound2];
                  if (point2 != null && point2.Passable && point2.DistanceFrom(this.ServerLocation) <= 3 && (point2.X != this.ServerLocation.X || point2.Y != this.ServerLocation.Y))
                    source.Add(point2);
                }
              }
              int num = this.RandomNumber(1, source.Count<Point>());
              for (int index = 0; index < source.Count<Point>(); ++index)
              {
                if (num - 1 == index)
                {
                  point1 = source[index];
                  break;
                }
              }
              Point[] path = this.MapInfo.FindPath(this.FakeNpcs[Convert.ToUInt32(id)].Location.X, this.FakeNpcs[Convert.ToUInt32(id)].Location.Y, point1.X, point1.Y, false);
              for (int index = 0; index < path.Length && (this.FakeNpcs[Convert.ToUInt32(id)].Passive && this.FakeNpcs[Convert.ToUInt32(id)].FollowMode) && (point1.DistanceFrom(this.ServerLocation) <= 5 && path[index].DistanceFrom(this.ServerLocation) <= 10) && ((path[index].Passable || (path[index].X == this.ServerLocation.X || path[index].Y == this.ServerLocation.Y)) && Math.Abs(this.FakeNpcs[Convert.ToUInt32(id)].Location.X - path[index].X) + Math.Abs(this.FakeNpcs[Convert.ToUInt32(id)].Location.Y - path[index].Y) == 1); ++index)
              {
                this.FakeWalk(1U, this.FakeNpcs[Convert.ToUInt32(id)].Location - new Location(path[index].X, path[index].Y));
                this.MapInfo.UpdateBlocks(this);
                Thread.Sleep(420);
              }
            }
          }
        }
        Thread.Sleep(200);
      }
      this.FakeNPCChat(name + ": w/e dont like you anyway", 1U);
      Thread.Sleep(1000);
    }

    public void FakeSpriteRoaming(object id)
    {
      while (this.FakeNpcs[Convert.ToUInt32(id)].Map == this.MapInfo.Number)
      {
        Character fakeNpc1 = this.FakeNpcs[Convert.ToUInt32(id)];
        if (fakeNpc1.Passive && !fakeNpc1.FollowMode)
        {
          this.MapInfo.UpdateBlocks(this);
          Character fakeNpc2 = this.FakeNpcs[Convert.ToUInt32(id)];
          Location loc = new Location(fakeNpc2.Location.X, fakeNpc2.Location.Y);
          Location location = loc;
          List<Point> source = new List<Point>();
          Point[,] tiles = this.MapInfo.Tiles;
          int upperBound1 = tiles.GetUpperBound(0);
          int upperBound2 = tiles.GetUpperBound(1);
          for (int lowerBound1 = tiles.GetLowerBound(0); lowerBound1 <= upperBound1; ++lowerBound1)
          {
            for (int lowerBound2 = tiles.GetLowerBound(1); lowerBound2 <= upperBound2; ++lowerBound2)
            {
              Point point = tiles[lowerBound1, lowerBound2];
              if (point != null && point.Passable && point.DistanceFrom(loc) == 1 && (point.X != this.ServerLocation.X || point.Y != this.ServerLocation.Y))
                source.Add(point);
            }
          }
          int num = this.RandomNumber(1, 4);
          for (int index = 0; index < source.Count<Point>(); ++index)
          {
            if (num - 1 == index)
            {
              location = new Location(source[index].X, source[index].Y);
              break;
            }
          }
          if (location != loc)
          {
            this.FakeWalk(1U, loc - location);
            this.MapInfo.UpdateBlocks(this);
            Thread.Sleep(this.RandomNumber(200, 600));
          }
        }
        Thread.Sleep(200);
      }
    }

    public void Combo(string[] arr)
    {
      new Thread((ThreadStart) (() =>
      {
        this.blocklores = true;
        this.UseSkill("Look", 0U);
        foreach (string str in arr)
        {
          if (str != null)
          {
            if (str.StartsWith("/"))
              this.Speak(str, 0);
            else if (str.Equals("wheel kick", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("strikedown", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("dune swipe", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("sneak flight", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("beak pierce", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("talon kick", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("mass strike", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("double rake", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("pounce", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("tail sweep", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("claw slash", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (str.Equals("venom attack", StringComparison.CurrentCultureIgnoreCase) && this.HasSkill(str, true))
              this.UseMedSkill(str);
            else if (this.HasSkill(str, false))
              this.UseSkill(str, 0U);
            else if (str.Equals("~"))
            {
              this.UnequipSlot((byte) 1);
              this.UnequipSlot((byte) 3);
              Thread.Sleep(100);
            }
            else if (str.Equals("space", StringComparison.CurrentCultureIgnoreCase))
              this.Assail();
            else if (str.Equals("combo", StringComparison.CurrentCultureIgnoreCase))
            {
              this.UseItem("Two Move Combo");
              this.UseItem("Three Move Combo");
            }
            else if (str.Equals("stone skin", StringComparison.CurrentCultureIgnoreCase) && this.HasSpell("Stone Skin", false))
            {
              while (!this.SpellBar.Contains((ushort) 53))
              {
                this.MacroCast("Stone Skin", new uint?());
                Thread.Sleep(100);
              }
            }
            else if (str.Equals("dion", StringComparison.CurrentCultureIgnoreCase) && this.HasSpell("dion", false))
            {
              do
              {
                this.MacroCast("dion", new uint?());
                Thread.Sleep(100);
              }
              while (!this.SpellBar.Contains((ushort) 53));
            }
            else if (str.Equals("draco stance", StringComparison.CurrentCultureIgnoreCase) && this.HasSpell("draco stance", false))
            {
              do
              {
                this.MacroCast("draco stance", new uint?());
                Thread.Sleep(100);
              }
              while (!this.SpellBar.Contains((ushort) 53));
            }
            else if (str.Equals("hide", StringComparison.CurrentCultureIgnoreCase))
            {
              if (this.HasSpell("Hide", false))
                this.CastSpell("Hide", new uint?());
              if (this.HasSpell("White Bat Stance", false))
                this.CastSpell("White Bat Stance", new uint?());
            }
            else if (str.Equals("form", StringComparison.CurrentCultureIgnoreCase))
            {
              foreach (Spell spell in this.SpellBook)
              {
                if (spell != null && spell.Name.Contains(" Form"))
                {
                  this.MacroCast(spell.Name, new uint?());
                  break;
                }
              }
            }
            else if (this.HasSpell(str, false))
              this.CastSpell(str, new uint?(this.PlayerID));
            else if (str.StartsWith("d:", StringComparison.CurrentCultureIgnoreCase))
              Thread.Sleep(int.Parse(str.Split(':')[1]));
            else if (this.HasItem(str))
              this.UseItem(str);
          }
        }
      })).Start();
    }

    public void FindAutoWalkPath(int destmap)
    {
      if (this.MapInfo.Number == destmap && this.Tab.autowalker_button.Text == "Stop" && !this.HasAWPath)
      {
        if (this.AutoWalkMaps.ContainsKey(destmap) && this.AutoWalkMaps[destmap].Default != null)
        {
          this.CurAWDest = this.AutoWalkMaps[destmap].Default;
          this.HasAWPath = true;
        }
        else
        {
          this.CurAWDest = (Location) null;
          this.HasAWPath = false;
          this.Tab.autowalker_button.Text = "Start";
          this.autowalkon = false;
        }
      }
      if (this.MapInfo.Number == destmap || this.HasAWPath)
        return;
      foreach (MappedMaps mappedMaps in this.AutoWalkMaps.Values)
        mappedMaps.Checked = false;
      List<int> intList1 = new List<int>();
      List<int> intList2 = new List<int>();
      int num1 = 0;
label_12:
      bool flag = false;
      List<int> source = new List<int>();
      source.Add(this.MapInfo.Number);
      while (!source.Contains(destmap))
      {
        ++num1;
        int num2 = 0;
        foreach (MappedMaps mappedMaps in this.AutoWalkMaps.Values)
        {
          if (mappedMaps != null && source.Contains(mappedMaps.Number) && mappedMaps.ConnectedTo.Count > 0)
          {
            foreach (int key in mappedMaps.ConnectedTo.Keys)
            {
              string str = mappedMaps.Number.ToString() + "," + key.ToString();
              if (this.AutoWalkMaps.ContainsKey(key) && !this.AutoWalkMaps[key].Deadend && !this.AutoWalkMaps[mappedMaps.Number].Checked && !source.Contains(key))
              {
                this.AutoWalkMaps[mappedMaps.Number].Checked = true;
                ++num2;
                intList2.Add(key);
                source.Add(key);
                break;
              }
            }
          }
          if (source.Contains(destmap))
          {
            this.AutoWalkMaps[source.Last<int>()].Deadend = true;
            break;
          }
        }
        if (num2 == 0)
        {
          this.AutoWalkMaps[source.Last<int>()].Deadend = true;
          flag = true;
          break;
        }
      }
      foreach (MappedMaps mappedMaps in this.AutoWalkMaps.Values)
        mappedMaps.Checked = false;
      if (source.Count<int>() > 0)
      {
        List<int> intList3 = new List<int>((IEnumerable<int>) source);
        if (!flag)
        {
          ++this.AutoWalkMaps[this.MapInfo.Number].Routes;
          this.AutoWalkMaps[this.MapInfo.Number].RoutesDic[this.AutoWalkMaps[this.MapInfo.Number].Routes] = intList3;
        }
        foreach (MappedMaps mappedMaps in this.AutoWalkMaps.Values)
        {
          if (mappedMaps != null && source.Contains(mappedMaps.Number) && mappedMaps.ConnectedTo.Count > 0)
          {
            foreach (int key in mappedMaps.ConnectedTo.Keys)
            {
              if (this.AutoWalkMaps.ContainsKey(key) && !this.AutoWalkMaps[key].Deadend && !intList2.Contains(key))
                goto label_12;
            }
          }
        }
        source.Clear();
      }
      if (this.AutoWalkMaps[this.MapInfo.Number].Routes > 0)
      {
        foreach (List<int> intList3 in (IEnumerable<List<int>>) this.AutoWalkMaps[this.MapInfo.Number].RoutesDic.Values.OrderBy<List<int>, int>((Func<List<int>, int>) (p => p.Count)))
        {
          if (intList3 != null && intList3.Contains(destmap))
          {
            intList1 = intList3;
            break;
          }
        }
        this.AutoWalkMaps[this.MapInfo.Number].Routes = 0;
        this.AutoWalkMaps[this.MapInfo.Number].RoutesDic.Clear();
        foreach (int key in intList1)
        {
          if (this.AutoWalkMaps[this.MapInfo.Number].ConnectedTo.ContainsKey(key))
          {
            this.CurAWDest = new Location(this.AutoWalkMaps[this.MapInfo.Number].ConnectedTo[key].X, this.AutoWalkMaps[this.MapInfo.Number].ConnectedTo[key].Y);
            break;
          }
        }
        this.HasAWPath = true;
      }
      else
      {
        this.CurAWDest = (Location) null;
        this.HasAWPath = false;
      }
    }

    public void AutoWalkToAlt(int destmap)
    {
      if (this.MapInfo.Number == destmap)
        return;
      this.FindAutoWalkPath(destmap);
      if (this.HasAWPath && this.CurAWDest != null)
      {
        if (this.randomdest != null)
          this.randomdest = (Location) null;
        this.AutoWalkerToAlt(this.CurAWDest.X, this.CurAWDest.Y);
      }
    }

    public void AWTest()
    {
      if (this.Tab.vautowalker_locales.Equals("Balanced Arena"))
        this.FindAutoWalkPath(511);
      if (this.Tab.vautowalker_locales.Equals("Mileth"))
      {
        this.SelectTown("Noam");
        if (this.Tab.vwalklocaleslist == "Wasteland" || this.Tab.vwalklocaleslist == "Enchanted Garden" || this.Tab.vwalklocaleslist == "EW 15 Glade" || this.Tab.vwalklocaleslist == "EW 20 Glade")
        {
          if (this.Towns.ContainsKey("East Woodland"))
            this.SelectTown("East Woodland");
          else if (this.Towns.ContainsKey("Pravat Cave"))
            this.SelectTown("Pravat Cave");
          else if (this.Towns.ContainsKey("Piet"))
            this.SelectTown("Piet");
          else if (this.Towns.ContainsKey("Suomi"))
            this.SelectTown("Undine");
          else if (this.Towns.ContainsKey("Undine"))
            this.SelectTown("Abel");
          else
            this.SelectTown("Loures Castle");
        }
        else if (this.Towns.ContainsKey("Mileth"))
          this.SelectTown("Mileth");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Piet"))
          this.SelectTown("Piet");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Loures Castle");
        if (this.Tab.vwalklocaleslist == "Inn")
          this.FindAutoWalkPath(136);
        if (this.Tab.vwalklocaleslist == "Altar")
        {
          if (this.MapInfo.Number == 135 && this.HasItem("Warranty Bag"))
          {
            this.SkillSpellCaption("I will deposit warranty bag");
            this.SkillSpellCaption("Give my succubus's hair back");
            Thread.Sleep(500);
          }
          if (!this.HasItem("Warranty Bag"))
            this.FindAutoWalkPath(500);
          else if (this.MapInfo.Number != 135)
            this.FindAutoWalkPath(135);
        }
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(135);
        if (this.Tab.vwalklocaleslist == "Tailor")
          this.FindAutoWalkPath(130);
        if (this.Tab.vwalklocaleslist == "Restaurant")
          this.FindAutoWalkPath(129);
        if (this.Tab.vwalklocaleslist == "Tavern")
          this.FindAutoWalkPath(134);
        if (this.Tab.vwalklocaleslist == "Church")
          this.FindAutoWalkPath(192);
        if (this.Tab.vwalklocaleslist == "Crypt")
          this.FindAutoWalkPath(425);
        if (this.Tab.vwalklocaleslist == "Crypt 4")
          this.FindAutoWalkPath(8);
        if (this.Tab.vwalklocaleslist == "Crypt 11")
          this.FindAutoWalkPath(34);
        if (this.Tab.vwalklocaleslist == "Crypt 27")
          this.FindAutoWalkPath(94);
        if (this.Tab.vwalklocaleslist == "Temple of Choosing")
          this.FindAutoWalkPath(393);
        if (this.Tab.vwalklocaleslist == "Wasteland")
          this.FindAutoWalkPath(623);
        if (this.Tab.vwalklocaleslist == "Enchanted Garden")
          this.FindAutoWalkPath(622);
        if (this.Tab.vwalklocaleslist == "EW 15 Glade")
          this.FindAutoWalkPath(3068);
        if (this.Tab.vwalklocaleslist == "EW 20 Glade")
          this.FindAutoWalkPath(3083);
        if (this.Tab.vwalklocaleslist == "ToC Warrior")
          this.FindAutoWalkPath(393);
        if (this.Tab.vwalklocaleslist == "ToC Monk")
          this.FindAutoWalkPath(393);
        if (this.Tab.vwalklocaleslist == "ToC Rogue")
          this.FindAutoWalkPath(393);
        if (this.Tab.vwalklocaleslist == "ToC Priest")
          this.FindAutoWalkPath(393);
        if (this.Tab.vwalklocaleslist == "ToC Wizard")
          this.FindAutoWalkPath(393);
      }
      if (this.Tab.vautowalker_locales.Equals("Abel"))
      {
        this.SelectTown("Noam");
        if (this.Tab.vwalklocaleslist == "Entrance" || this.Tab.vwalklocaleslist == "Bank")
        {
          if (this.Towns.ContainsKey("Abel"))
            this.SelectTown("Abel");
          else if (this.Towns.ContainsKey("Pravat Cave"))
            this.SelectTown("Pravat Cave");
          else if (this.Towns.ContainsKey("Piet"))
            this.SelectTown("Piet");
          else if (this.Towns.ContainsKey("Suomi"))
            this.SelectTown("Undine");
          else
            this.SelectTown("Loures Castle");
        }
        else if (this.Towns.ContainsKey("Abel"))
          this.SelectTown("Abel");
        else if (this.Towns.ContainsKey("Rucesion"))
          this.SelectTown("Rucesion");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        if (this.Tab.vwalklocaleslist == "Entrance")
          this.FindAutoWalkPath(3014);
        else if (this.MapInfo.Number == 3014)
          this.AutoWalker(11, 21);
        else if (this.Tab.vwalklocaleslist == "Bank")
        {
          if (this.MapInfo.Number == 3052)
            this.WalkToExact(26, 25);
          else
            this.FindAutoWalkPath(167);
        }
        else if (this.Tab.vwalklocaleslist == "Inn")
          this.FindAutoWalkPath(169);
        else if (this.Tab.vwalklocaleslist == "Tavern")
          this.FindAutoWalkPath(168);
        else if (this.Tab.vwalklocaleslist == "Dungeon")
          this.FindAutoWalkPath(185);
        else if (this.Tab.vwalklocaleslist == "Dungeon 5 Cave")
          this.FindAutoWalkPath(3069);
        else if (this.Tab.vwalklocaleslist == "Dungeon 10 Cave")
          this.FindAutoWalkPath(3084);
      }
      if (this.Tab.vautowalker_locales.Equals("Pravat"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Piet"))
          this.SelectTown("Piet");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Loures Castle"))
          this.SelectTown("Loures Castle");
        else
          this.SelectTown("Rucesion");
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(3052);
        if (this.Tab.vwalklocaleslist == "Cross")
          this.FindAutoWalkPath(3054);
      }
      if (this.Tab.vautowalker_locales.Equals("Rucesion"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Rucesion"))
          this.SelectTown("Rucesion");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        if (this.Tab.vwalklocaleslist == "Skill Master")
          this.FindAutoWalkPath(303);
        else if (this.Tab.vwalklocaleslist == "Black Market")
        {
          if (this.Path == (byte) 2)
            this.FindAutoWalkPath(424);
          else if (this.MapInfo.Number != 505)
            this.FindAutoWalkPath(424);
          else if (this.MapInfo.Number == 505 && !this.WithinRange(26, 20, 2))
            this.AutoWalkWithinRange(26, 20, 2);
        }
        else if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(422);
        else if (this.Tab.vwalklocaleslist == "Inn")
          this.FindAutoWalkPath(498);
        else if (this.Tab.vwalklocaleslist == "Armor Shop")
          this.FindAutoWalkPath(421);
      }
      if (this.Tab.vautowalker_locales.Equals("Coliseum Arena"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Coliseum Arena"))
          this.SelectTown("Coliseum Arena");
        else if (this.Towns.ContainsKey("Loures Castle"))
          this.SelectTown("Loures Castle");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
      }
      if (this.Tab.vautowalker_locales.Equals("Piet"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Piet"))
          this.SelectTown("Piet");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(148);
        if (this.Tab.vwalklocaleslist == "Inn")
          this.FindAutoWalkPath(150);
        else if (this.Tab.vwalklocaleslist == "Dungeon")
          this.FindAutoWalkPath(426);
      }
      if (this.Tab.vautowalker_locales.Equals("Tagor"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Tagor "))
          this.SelectTown("Tagor ");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        if (this.Tab.vwalklocaleslist == "Inn")
          this.FindAutoWalkPath(1960);
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(1966);
        if (this.Tab.vwalklocaleslist == "Lost Path")
          this.FindAutoWalkPath(662);
      }
      if (this.Tab.vautowalker_locales.Equals("Eingren Manor"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Tagor "))
          this.SelectTown("Tagor ");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        if (!this.HasItem("Manor Key"))
        {
          if (this.MapInfo.Number == 2056)
            this.WalkToExact(52, 42);
          else if (this.MapInfo.Number == 2051)
          {
            if (!this.WithinRange(8, 10, 2))
            {
              this.AutoWalkWithinRange(8, 10, 2);
            }
            else
            {
              this.randomdest = (Location) null;
              this.Tab.autowalker_button.Text = "Start";
              this.autowalkon = false;
            }
          }
          else
            this.FindAutoWalkPath(6002);
        }
        else
          this.FindAutoWalkPath(6002);
      }
      if (this.Tab.vautowalker_locales.Equals("Undine"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Pravat Cave") && !this.Towns.ContainsKey("Loures"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Abel"))
          this.SelectTown("Abel");
        else if (this.Towns.ContainsKey("Rucesion"))
          this.SelectTown("Rucesion");
        else
          this.SelectTown("Loures");
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(432);
      }
      if (this.Tab.vautowalker_locales.Equals("Astrid"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Astrid"))
          this.SelectTown("Astrid");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Pravat Cave") && !this.Towns.ContainsKey("Loures"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Abel"))
          this.SelectTown("Abel");
        else if (this.Towns.ContainsKey("Rucesion"))
          this.SelectTown("Rucesion");
        else
          this.SelectTown("Loures");
        if (this.Tab.vwalklocaleslist == "Octagram")
          this.FindAutoWalkPath(3064);
      }
      if (this.Tab.vautowalker_locales.Equals("Suomi"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Suomi");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Pravat Cave") && !this.Towns.ContainsKey("Loures"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Abel"))
          this.SelectTown("Abel");
        else if (this.Towns.ContainsKey("Rucesion"))
          this.SelectTown("Rucesion");
        else
          this.SelectTown("Loures");
        if (this.Tab.vwalklocaleslist == "Inn")
          this.FindAutoWalkPath(950);
        else if (this.Tab.vwalklocaleslist == "Weapon Shop")
          this.FindAutoWalkPath(410);
      }
      if (this.Tab.vautowalker_locales.Equals("Chaos"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Pravat Cave"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Piet"))
          this.SelectTown("Piet");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else
          this.SelectTown("Loures Castle");
        if (this.Tab.vwalklocaleslist == "Chaos ent")
          this.FindAutoWalkPath(3634);
        else if (this.Tab.vwalklocaleslist == "Chaos 3 exit" && (this.spellmap ? (this.SpellBar.Contains((ushort) 10) ? 1 : 0) : (!this.spellmap ? 1 : 0)) != 0)
          this.FindAutoWalkPath(3602);
        else if (this.Tab.vwalklocaleslist == "Chaos 12 exit" && (this.spellmap ? (this.SpellBar.Contains((ushort) 10) ? 1 : 0) : (!this.spellmap ? 1 : 0)) != 0)
          this.FindAutoWalkPath(3611);
        else if (this.Tab.vwalklocaleslist == "Chaos 25 side" && (this.spellmap ? (this.SpellBar.Contains((ushort) 10) ? 1 : 0) : (!this.spellmap ? 1 : 0)) != 0)
          this.FindAutoWalkPath(3624);
        else if (this.Tab.vwalklocaleslist == "Chaos 34" && (this.spellmap ? (this.SpellBar.Contains((ushort) 10) ? 1 : 0) : (!this.spellmap ? 1 : 0)) != 0)
          this.FindAutoWalkPath(4335);
        else if (this.Tab.vwalklocaleslist == "Chaos 34 End" && (this.spellmap ? (this.SpellBar.Contains((ushort) 10) ? 1 : 0) : (!this.spellmap ? 1 : 0)) != 0)
          this.FindAutoWalkPath(4335);
      }
      if (this.Tab.vautowalker_locales.Equals("Mehadi"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Mehadi Swamp"))
          this.SelectTown("Mehadi Swamp");
        else if (this.Towns.ContainsKey("Loures Castle"))
          this.SelectTown("Loures Castle");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        if (this.Tab.vwalklocaleslist == "Entrance")
          this.FindAutoWalkPath(3071);
        else if (this.Tab.vwalklocaleslist == "Flower")
          this.FindAutoWalkPath(3078);
      }
      if (this.Tab.vautowalker_locales.Equals("Loures"))
      {
        this.SelectTown("Noam");
        if (this.Tab.vwalklocaleslist.Equals("Canal Key 2 (blob)"))
        {
          if (this.Towns.ContainsKey("Loures"))
            this.SelectTown("Loures");
          else if (this.Towns.ContainsKey("Suomi"))
            this.SelectTown("Undine");
          else if (this.Towns.ContainsKey("Undine"))
            this.SelectTown("Abel");
          else
            this.SelectTown("Pravat Cave");
        }
        else if (this.Towns.ContainsKey("Loures Castle"))
          this.SelectTown("Loures Castle");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        if (this.Tab.vwalklocaleslist == "Canal Ent")
          this.FindAutoWalkPath(3938);
        if (this.Tab.vwalklocaleslist == "Canal Key 1 (skrull)")
          this.FindAutoWalkPath(3935);
        if (this.Tab.vwalklocaleslist == "Canal Key 2 (blob)")
          this.FindAutoWalkPath(3940);
        if (this.Tab.vwalklocaleslist == "Library")
          this.FindAutoWalkPath(3041);
        if (this.Tab.vwalklocaleslist == "Throne Room")
          this.FindAutoWalkPath(115);
        if (this.Tab.vwalklocaleslist == "2nd Floor Weapon")
          this.FindAutoWalkPath(118);
        if (this.Tab.vwalklocaleslist == "Maze")
          this.FindAutoWalkPath(2141);
        if (this.Tab.vwalklocaleslist == "1st Floor Weapon")
          this.FindAutoWalkPath(122);
        if (this.Tab.vwalklocaleslist == "Dungeon (aite)")
          this.FindAutoWalkPath(378);
        if (this.Tab.vwalklocaleslist == "Dark Maze")
          this.FindAutoWalkPath(121);
        if (this.Tab.vwalklocaleslist == "Jean")
          this.FindAutoWalkPath(124);
        if (this.Tab.vwalklocaleslist == "Frosty (x-mas)")
          this.FindAutoWalkPath(3271);
        if (this.Tab.vwalklocaleslist == "Francis (summer)")
        {
          if (this.MapInfo.Number == 3271)
          {
            if (!this.WithinRange(34, 46, 2))
            {
              this.AutoWalkWithinRange(34, 46, 2);
            }
            else
            {
              if (this.randomdest != null)
                this.randomdest = (Location) null;
              this.Tab.autowalker_button.Text = "Start";
              this.autowalkon = false;
            }
          }
          else
            this.FindAutoWalkPath(3271);
        }
      }
      if (this.Tab.vautowalker_locales.Equals("Cthonic Remains"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("House Macabre"))
          this.SelectTown("House Macabre");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        if (this.Tab.vwalklocaleslist == "CR 1")
          this.FindAutoWalkPath(5001);
        else if (this.Tab.vwalklocaleslist == "CR 31")
          this.FindAutoWalkPath(5031);
      }
      if (this.Tab.vautowalker_locales.Equals("Count"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("House Macabre"))
          this.SelectTown("House Macabre");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        this.FindAutoWalkPath(8499);
      }
      if (this.Tab.vautowalker_locales.Equals("Shinewood"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Shinewood Forest"))
          this.SelectTown("Shinewood Forest");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        if (this.Tab.vwalklocaleslist == "SW 8 (DSS)")
          this.FindAutoWalkPath(991);
        else if (this.Tab.vwalklocaleslist == "SW 12")
          this.FindAutoWalkPath(551);
        else if (this.Tab.vwalklocaleslist == "SW 17 (hut)")
          this.FindAutoWalkPath(1006);
        else if (this.Tab.vwalklocaleslist == "Giant Ant")
          this.FindAutoWalkPath(998);
        else if (this.Tab.vwalklocaleslist == "Red Mantis")
          this.FindAutoWalkPath(997);
        else if (this.Tab.vwalklocaleslist == "SW 22")
          this.FindAutoWalkPath(559);
        else if (this.Tab.vwalklocaleslist == "SW 30 (hut)")
          this.FindAutoWalkPath(1007);
        else if (this.Tab.vwalklocaleslist == "Phoenix Altar")
          this.FindAutoWalkPath(989);
      }
      if (this.Tab.vautowalker_locales == "Karlopos")
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Karlopos Island"))
          this.SelectTown("Karlopos Island");
        else if (this.Towns.ContainsKey("Lynith Beach"))
          this.SelectTown("Lynith Beach");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        this.FindAutoWalkPath(4720);
      }
      if (this.Tab.vautowalker_locales == "Lynith")
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Lynith Beach"))
          this.SelectTown("Lynith Beach");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        if (this.Tab.vwalklocaleslist == "Giant Pearl")
        {
          if (this.Gender == (byte) 1)
          {
            if (this.MapInfo.Number == 6627 && !this.giantpearl2)
              this.AutoWalker(7, 7);
            else
              this.FindAutoWalkPath(6627);
          }
          else if (this.MapInfo.Number == 6625 && !this.giantpearl2)
            this.AutoWalker(59, 26);
          else
            this.FindAutoWalkPath(6625);
        }
        else if (this.Tab.vwalklocaleslist == "Paradise")
          this.FindAutoWalkPath(7900);
      }
      if (this.Tab.vautowalker_locales == "Nobis")
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Oren Island"))
          this.SelectTown("Oren Island");
        else if (this.Towns.ContainsKey("Lynith Beach"))
          this.SelectTown("Lynith Beach");
        else if (this.Towns.ContainsKey("Loures"))
          this.SelectTown("Loures");
        else if (this.Towns.ContainsKey("Suomi"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Abel");
        else
          this.SelectTown("Pravat Cave");
        if (this.Tab.vwalklocaleslist == "Oren Fountain")
          this.FindAutoWalkPath(6707);
        if (this.Tab.vwalklocaleslist == "Tower Maze")
        {
          if (this.MapInfo.Number == 714)
            this.AutoWalker(0, 4);
          if (this.MapInfo.Number == 715 && !this.towerfinish)
            this.towerfinish = true;
          this.FindAutoWalkPath(716);
        }
        if (this.Tab.vwalklocaleslist == "Shamensyth ent")
          this.FindAutoWalkPath(6591);
        if (this.Tab.vwalklocaleslist == "Jungle ent")
          this.FindAutoWalkPath(6600);
        if (this.Tab.vwalklocaleslist == "Nobis ent")
          this.FindAutoWalkPath(6700);
        if (this.Tab.vwalklocaleslist == "dig bones (east)")
        {
          if (this.MapInfo.Number == 6530)
          {
            this.AutoWalker(74, 50);
            this.AutoWalker(74, 19);
          }
          else if (this.MapInfo.Number == 6531)
            this.AutoWalker(19, 74);
          else if (this.MapInfo.Number == 6532)
          {
            this.AutoWalker(0, 30);
            this.AutoWalker(71, 42);
          }
          else if (this.MapInfo.Number == 6544 && this.digboneseast == 0)
            this.AutoWalker(48, 60);
          else if (this.MapInfo.Number == 6545 && this.digboneseast == 1)
            this.AutoWalker(57, 22);
          else if (this.MapInfo.Number == 6546 && this.digboneseast == 2)
            this.AutoWalker(36, 51);
          else
            this.FindAutoWalkPath(6546);
        }
        if (this.Tab.vwalklocaleslist == "dig bones (north)")
        {
          if (this.MapInfo.Number == 6549 && this.digbonesnorth == 0)
            this.AutoWalker(83, 28);
          else if (this.MapInfo.Number == 6550 && this.digbonesnorth == 1)
            this.AutoWalker(33, 37);
          else if (this.MapInfo.Number == 6551 && this.digbonesnorth == 2)
            this.AutoWalker(63, 62);
          else
            this.FindAutoWalkPath(6551);
        }
        if (this.Tab.vwalklocaleslist == "dig bones (middle)")
        {
          if (this.MapInfo.Number == 6531)
          {
            this.AutoWalker(74, 45);
            this.AutoWalker(74, 69);
          }
          else if (this.MapInfo.Number == 6533)
          {
            this.AutoWalker(0, 55);
            this.AutoWalker(12, 74);
            this.AutoWalker(64, 74);
            this.AutoWalker(50, 0);
          }
          else if (this.MapInfo.Number == 6532)
          {
            this.AutoWalker(47, 0);
            this.AutoWalker(70, 0);
          }
          else if (this.MapInfo.Number == 6554 && this.digbonesmiddle == 0)
            this.AutoWalker(25, 41);
          else if (this.MapInfo.Number == 6555 && this.digbonesmiddle == 1)
            this.AutoWalker(15, 32);
          else if (this.MapInfo.Number == 6556 && this.digbonesmiddle == 2)
            this.AutoWalker(62, 15);
          else
            this.FindAutoWalkPath(6556);
        }
        if (this.MapInfo.Number == 6530 && this.Tab.vwalklocaleslist != "dig bones (east)")
          this.AutoWalker(74, 29);
        if (this.MapInfo.Number == 6533 && this.Tab.vwalklocaleslist != "dig bones (middle)")
        {
          this.AutoWalker(0, 44);
          this.AutoWalker(0, 69);
          this.AutoWalker(47, 74);
          this.AutoWalker(70, 74);
        }
        if (this.MapInfo.Number == 6531 && this.Tab.vwalklocaleslist != "dig bones (middle)")
          this.AutoWalker(74, 57);
        if (this.MapInfo.Number == 6532 && this.Tab.vwalklocaleslist != "dig bones (middle)" && this.Tab.vwalklocaleslist != "dig bones (east)")
        {
          this.AutoWalker(65, 0);
          this.AutoWalker(12, 0);
          this.AutoWalker(0, 57);
          this.AutoWalker(0, 19);
        }
        if (this.Tab.vwalklocaleslist == "Mob 2-5")
          this.FindAutoWalkPath(6534);
        if (this.Tab.vwalklocaleslist == "1st Summon" || this.Tab.vwalklocaleslist == "Mob 2-11")
        {
          if (this.MapInfo.Number == 6537)
          {
            this.AutoWalker(0, 38);
            this.AutoWalker(15, 74);
            if (this.Tab.vwalklocaleslist == "1st Summon")
              this.AutoWalker(60, 0);
            else
              this.FindAutoWalkPath(6537);
            this.AutoWalker(62, 74);
          }
          else if (this.MapInfo.Number == 6535)
          {
            this.AutoWalker(74, 9);
            this.AutoWalker(74, 50);
          }
          else if (this.MapInfo.Number == 6536)
          {
            this.AutoWalker(0, 16);
            this.AutoWalker(70, 0);
          }
          else if (this.MapInfo.Number == 6534)
          {
            this.AutoWalker(0, 16);
            this.AutoWalker(74, 29);
            this.AutoWalker(21, 0);
          }
          else
            this.FindAutoWalkPath(6597);
        }
        if (this.MapInfo.Number == 6534 && this.Tab.vwalklocaleslist != "1st Summon" && this.Tab.vwalklocaleslist != "Mob 2-11")
          this.AutoWalker(74, 16);
        if (this.MapInfo.Number == 6535 && this.Tab.vwalklocaleslist != "1st Summon" && this.Tab.vwalklocaleslist != "Mob 2-11")
          this.AutoWalker(74, 38);
        if (this.MapInfo.Number == 6536 && this.Tab.vwalklocaleslist != "1st Summon" && this.Tab.vwalklocaleslist != "Mob 2-11")
        {
          this.AutoWalker(16, 0);
          this.AutoWalker(0, 28);
        }
        if (this.MapInfo.Number == 6537 && this.Tab.vwalklocaleslist != "1st Summon" && this.Tab.vwalklocaleslist != "Mob 2-11")
        {
          this.AutoWalker(0, 52);
          this.AutoWalker(69, 74);
        }
        if (this.Tab.vwalklocaleslist == "2nd Summon")
          this.FindAutoWalkPath(6598);
        if (this.Tab.vwalklocaleslist == "3rd Summon")
        {
          if (this.MapInfo.Number == 6539)
            this.AutoWalker(54, 74);
          else if (this.MapInfo.Number == 6538)
            this.AutoWalker(74, 17);
          else if (this.MapInfo.Number == 6540)
          {
            this.AutoWalker(2, 0);
            this.AutoWalker(35, 0);
          }
          else if (this.MapInfo.Number == 6541)
          {
            this.AutoWalker(12, 74);
            this.AutoWalker(72, 8);
            this.AutoWalker(22, 74);
          }
          else
            this.FindAutoWalkPath(6596);
        }
        if (this.Tab.vwalklocaleslist == "4th Summon")
        {
          if (this.MapInfo.Number == 6539)
          {
            this.AutoWalker(4, 74);
            this.AutoWalker(72, 74);
          }
          else if (this.MapInfo.Number == 6538)
          {
            this.AutoWalker(74, 45);
            this.AutoWalker(54, 73);
          }
          else if (this.MapInfo.Number == 6540)
            this.AutoWalker(0, 67);
          else
            this.FindAutoWalkPath(6595);
        }
        if (this.MapInfo.Number == 6538 && this.Tab.vwalklocaleslist != "4th Summon")
        {
          this.AutoWalker(74, 64);
          this.AutoWalker(9, 0);
        }
        if (this.MapInfo.Number == 6538 && this.Tab.vwalklocaleslist != "3rd Summon")
          this.AutoWalker(54, 0);
        if (this.MapInfo.Number == 6540 && this.Tab.vwalklocaleslist != "4th Summon")
          this.AutoWalker(0, 45);
        if (this.MapInfo.Number == 6540 && this.Tab.vwalklocaleslist != "3rd Summon")
        {
          this.AutoWalker(22, 0);
          this.AutoWalker(0, 2);
        }
        if (this.MapInfo.Number == 6541 && this.Tab.vwalklocaleslist != "3rd Summon")
        {
          this.AutoWalker(12, 74);
          this.AutoWalker(35, 74);
        }
        if (this.Tab.vwalklocaleslist == "Medusa")
          this.FindAutoWalkPath(6599);
      }
      if (this.Tab.vautowalker_locales.Equals("Mount Giragan"))
      {
        this.SelectTown("Noam");
        if (this.Towns.ContainsKey("Mount Giragan"))
          this.SelectTown("Mount Giragan");
        else if (this.Towns.ContainsKey("Undine"))
          this.SelectTown("Undine");
        else if (this.Towns.ContainsKey("Pravat Cave") && !this.Towns.ContainsKey("Loures"))
          this.SelectTown("Pravat Cave");
        else if (this.Towns.ContainsKey("Abel"))
          this.SelectTown("Abel");
        else if (this.Towns.ContainsKey("Rucesion"))
          this.SelectTown("Rucesion");
        else
          this.SelectTown("Loures");
        if (this.Tab.vwalklocaleslist == "Mtg 1")
          this.FindAutoWalkPath(2120);
        if (this.Tab.vwalklocaleslist == "tauren horn" && this.taurenhorn < 7)
          this.FindAutoWalkPath(2060);
        if (this.Tab.vwalklocaleslist == "tauren nose ring")
          this.FindAutoWalkPath(2073);
        if (this.Tab.vwalklocaleslist == "Mtg 18 (belt)")
          this.FindAutoWalkPath(2104);
        if (this.Tab.vwalklocaleslist == "Mtg 10")
          this.FindAutoWalkPath(2096);
        if (this.Tab.vwalklocaleslist == "Mtg 13")
          this.FindAutoWalkPath(2099);
        if (this.Tab.vwalklocaleslist == "Tauren")
          this.FindAutoWalkPath(2087);
      }
      if (this.Tab.vautowalker_locales.Equals("Noam"))
      {
        this.SelectTown("Noam");
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(10061);
        if (this.Tab.vwalklocaleslist == "Noam 17")
          this.FindAutoWalkPath(10046);
      }
      if (this.Tab.vautowalker_locales.Equals("Asilon"))
      {
        if (this.Towns.ContainsKey("Asilon"))
          this.SelectTown("Asilon");
        else
          this.SelectTown("Noam");
        if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(10006);
      }
      if (this.Tab.vautowalker_locales.Equals("Hwarone"))
      {
        this.SelectTown("Hwarone");
        if (this.Tab.vwalklocaleslist == "Cursed Home")
          this.FindAutoWalkPath(10265);
        if (this.Tab.vwalklocaleslist == "Inn")
        {
          if (this.MapInfo.Number == 10265)
          {
            this.AutoWalker(83, 47);
            this.AutoWalker(23, 46);
          }
          else
            this.FindAutoWalkPath(10266);
        }
      }
      if (this.Tab.vautowalker_locales.Equals("Water Dungeon"))
      {
        this.SelectTown("Water Temple");
        this.FindAutoWalkPath(6998);
      }
      if (this.Tab.vautowalker_locales.Equals("Lost Ruins"))
      {
        this.SelectTown("Lost Ruins");
        if (this.Tab.vwalklocaleslist == "Nairn")
          this.FindAutoWalkPath(8995);
        if (this.Tab.vwalklocaleslist == "LR2 Rocks")
          this.FindAutoWalkPath(8994);
        if (this.Tab.vwalklocaleslist == "LR3 Rocks" && this.SpellBar.Contains((ushort) 10))
          this.FindAutoWalkPath(8993);
        if (this.Tab.vwalklocaleslist == "Ass Dungeon" && this.SpellBar.Contains((ushort) 10))
          this.FindAutoWalkPath(8992);
        if (this.Tab.vwalklocaleslist == "LR4 Rocks" && this.SpellBar.Contains((ushort) 10))
          this.FindAutoWalkPath(8989);
        if (this.Tab.vwalklocaleslist == "Marble Vault" && this.SpellBar.Contains((ushort) 10))
          this.FindAutoWalkPath(8988);
        if (this.Tab.vwalklocaleslist == "LR5 Altar" && this.SpellBar.Contains((ushort) 10))
          this.FindAutoWalkPath(8987);
        if (this.Tab.vwalklocaleslist == "Dung Field" && this.SpellBar.Contains((ushort) 10))
        {
          if (this.MapInfo.Number == 8987)
          {
            if (!this.WithinRange(9, 18, 3))
            {
              this.AutoWalkWithinRange(9, 18, 3);
            }
            else
            {
              if (this.randomdest != null)
                this.randomdest = (Location) null;
              this.Tab.autowalker_button.Text = "Start";
              this.autowalkon = false;
            }
          }
          else
            this.FindAutoWalkPath(8987);
        }
        if (this.Tab.vwalklocaleslist == "Law" && this.SpellBar.Contains((ushort) 10))
          this.FindAutoWalkPath(8984);
      }
      if (this.Tab.vautowalker_locales.Equals("Aman Jungle"))
      {
        this.SelectTown("Aman Jungle");
        if (this.Tab.vwalklocaleslist == "Vortigern")
          this.FindAutoWalkPath(8296);
        else if (this.Tab.vwalklocaleslist == "Oriana")
        {
          if (this.MapInfo.Number == 8300 && !this.WithinRange(74, 104, 3))
            this.AutoWalkWithinRange(74, 104, 3);
          else if (this.MapInfo.Number == 8300)
          {
            if (this.randomdest != null)
              this.randomdest = (Location) null;
            this.Tab.autowalker_button.Text = "Start";
            this.autowalkon = false;
          }
          if (this.MapInfo.Number != 8300)
            this.FindAutoWalkPath(8300);
        }
        else if (this.Tab.vwalklocaleslist == "Jovino")
          this.FindAutoWalkPath(8295);
        else if (this.Tab.vwalklocaleslist == "Bank")
          this.FindAutoWalkPath(8299);
        else if (this.Tab.vwalklocaleslist == "AJ 0 End")
          this.FindAutoWalkPath(8300);
        else if (this.Tab.vwalklocaleslist == "AJ 6")
        {
          if (this.MapInfo.Number == 8319)
            this.FindAutoWalkPath(8319);
          else
            this.FindAutoWalkPath(8306);
        }
        else if (this.Tab.vwalklocaleslist == "AJ 7 End (dendrons)")
          this.FindAutoWalkPath(8307);
        else if (this.Tab.vwalklocaleslist == "HG ent")
          this.FindAutoWalkPath(8310);
        else if (this.Tab.vwalklocaleslist == "HG end")
          this.FindAutoWalkPath(8329);
        else if (this.Tab.vwalklocaleslist == "CC ent")
          this.FindAutoWalkPath(8314);
        else if (this.Tab.vwalklocaleslist == "CC 7")
          this.FindAutoWalkPath(8337);
        else if (this.Tab.vwalklocaleslist == "CC end")
          this.FindAutoWalkPath(8344);
        else if (this.Tab.vwalklocaleslist == "YT ent")
          this.FindAutoWalkPath(8318);
        else if (this.Tab.vwalklocaleslist == "YT 3")
          this.FindAutoWalkPath(8347);
        else if (this.Tab.vwalklocaleslist == "YT 4")
          this.FindAutoWalkPath(8348);
        else if (this.Tab.vwalklocaleslist == "YT 5")
          this.FindAutoWalkPath(8349);
        else if (this.Tab.vwalklocaleslist == "YT 6")
          this.FindAutoWalkPath(8350);
        else if (this.Tab.vwalklocaleslist == "YT 11")
          this.FindAutoWalkPath(8355);
        else if (this.Tab.vwalklocaleslist == "YT 12")
          this.FindAutoWalkPath(8356);
        else if (this.Tab.vwalklocaleslist == "Yellow Vines")
          this.FindAutoWalkPath(8372);
        else if (this.Tab.vwalklocaleslist == "YT 15")
        {
          if (this.MapInfo.Number >= 8359 && this.MapInfo.Number <= 8368)
            this.FindAutoWalkPath(8359);
          else
            this.FindAutoWalkPath(8358);
        }
        else if (this.Tab.vwalklocaleslist == "YT Boss")
          this.FindAutoWalkPath(8368);
      }
      if (this.HasAWPath && this.CurAWDest != null && this.AutoWalkMaps[this.MapInfo.Number].Default == this.CurAWDest && !this.WithinRange(this.CurAWDest.X, this.CurAWDest.Y, 3))
        this.AutoWalkWithinRange(this.CurAWDest.X, this.CurAWDest.Y, 3);
      else if (this.HasAWPath && this.CurAWDest != null && this.AutoWalkMaps[this.MapInfo.Number].Default == this.CurAWDest)
      {
        if (this.Tab.vautowalker_locales.Equals("Nobis") && this.Tab.vwalklocaleslist == "Oren Tower" || this.Tab.vautowalker_locales.Equals("Chaos") && this.Tab.vwalklocaleslist == "Chaos 34 End" || (this.Tab.vautowalker_locales.Equals("Mount Giragan") && (this.Tab.vwalklocaleslist == "tauren horn" || this.Tab.vwalklocaleslist == "tauren nose ring") || this.Tab.vautowalker_locales.Equals("Mileth") && (this.Tab.vwalklocaleslist == "ToC Warrior" || this.Tab.vwalklocaleslist == "ToC Monk" || (this.Tab.vwalklocaleslist == "ToC Rogue" || this.Tab.vwalklocaleslist == "ToC Priest") || this.Tab.vwalklocaleslist == "ToC Wizard")))
          return;
        if (this.MapInfo.Number == 8318 || this.MapInfo.Number == 8349)
          this.UseSkill("Assail", 0U);
        if (this.randomdest != null)
          this.randomdest = (Location) null;
        this.Tab.autowalker_button.Text = "Start";
        this.autowalkon = false;
        this.walkaround = true;
      }
      else
      {
        if (!this.HasAWPath || this.CurAWDest == null)
          return;
        if (this.randomdest != null)
          this.randomdest = (Location) null;
        if (this.MapInfo.Number == 3006)
        {
          if (this.ServerLocation.Y <= 9 && this.ServerLocation.Y >= 4)
            this.AutoWalker(this.CurAWDest.X, this.ServerLocation.Y);
          else if (this.ServerLocation.Y > 9)
            this.AutoWalker(this.CurAWDest.X, 9);
          else if (this.ServerLocation.Y < 4)
            this.AutoWalker(this.CurAWDest.X, 4);
        }
        else if (this.MapInfo.Number == 3012 && this.Tab.vautowalker_locales == "Loures" && this.Tab.vwalklocaleslist == "Canal Key 2 (blob)")
          this.AutoWalker(9, 0);
        else if (this.MapInfo.Number == 10004 && this.HasSpell("dachaidh", false) && (long) this.Statistics.CurrentMP > (long) Server.SpellList["dachaidh"].ManaCost)
        {
          this.CastSpell("dachaidh", new uint?());
          Thread.Sleep(1000);
        }
        else if (this.MapInfo.Number == 136 && this.ServerLocation.X == 10 && this.ServerLocation.Y == 2)
          this.AutoWalker(11, 2);
        else
          this.AutoWalker(this.CurAWDest.X, this.CurAWDest.Y);
      }
    }

    public void LoadMaps()
    {
      MappedMaps mappedMaps1 = new MappedMaps();
      MappedMaps mappedMaps2 = new MappedMaps();
      mappedMaps2.Number = 3079;
      mappedMaps2.ConnectedTo.Add(3006, new Location(3, 6));
      mappedMaps2.ConnectedTo.Add(3080, new Location(3, 0));
      mappedMaps2.ConnectedTo.Add(3052, new Location(3, 0));
      mappedMaps2.ConnectedTo.Add(3014, new Location(3, 0));
      this.AutoWalkMaps.Add(mappedMaps2.Number, mappedMaps2);
      MappedMaps mappedMaps3 = new MappedMaps();
      mappedMaps3.Number = 3006;
      mappedMaps3.ConnectedTo.Add(500, new Location(0, 7));
      mappedMaps3.ConnectedTo.Add(3080, new Location(15, 8));
      mappedMaps3.ConnectedTo.Add(3052, new Location(15, 8));
      mappedMaps3.ConnectedTo.Add(3014, new Location(15, 8));
      this.AutoWalkMaps.Add(mappedMaps3.Number, mappedMaps3);
      MappedMaps mappedMaps4 = new MappedMaps();
      mappedMaps4.Number = 500;
      mappedMaps4.Default = new Location(33, 53);
      mappedMaps4.ConnectedTo.Add(425, new Location(91, 54));
      mappedMaps4.ConnectedTo.Add(134, new Location(69, 54));
      mappedMaps4.ConnectedTo.Add(192, new Location(40, 75));
      mappedMaps4.ConnectedTo.Add(135, new Location(54, 69));
      mappedMaps4.ConnectedTo.Add(136, new Location(27, 43));
      mappedMaps4.ConnectedTo.Add(393, new Location(93, 13));
      mappedMaps4.ConnectedTo.Add(3006, new Location(99, 29));
      mappedMaps4.ConnectedTo.Add(129, new Location(62, 60));
      mappedMaps4.ConnectedTo.Add(130, new Location(42, 58));
      this.AutoWalkMaps.Add(mappedMaps4.Number, mappedMaps4);
      MappedMaps mappedMaps5 = new MappedMaps();
      mappedMaps5.Number = 135;
      mappedMaps5.Default = new Location(6, 6);
      mappedMaps5.ConnectedTo.Add(500, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps5.Number, mappedMaps5);
      MappedMaps mappedMaps6 = new MappedMaps();
      mappedMaps6.Number = 136;
      mappedMaps6.Default = new Location(6, 5);
      mappedMaps6.ConnectedTo.Add(500, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps6.Number, mappedMaps6);
      MappedMaps mappedMaps7 = new MappedMaps();
      mappedMaps7.Number = 134;
      mappedMaps7.Default = new Location(8, 9);
      mappedMaps7.ConnectedTo.Add(500, new Location(14, 5));
      this.AutoWalkMaps.Add(mappedMaps7.Number, mappedMaps7);
      MappedMaps mappedMaps8 = new MappedMaps();
      mappedMaps8.Number = 130;
      mappedMaps8.Default = new Location(12, 10);
      mappedMaps8.ConnectedTo.Add(500, new Location(7, 14));
      this.AutoWalkMaps.Add(mappedMaps8.Number, mappedMaps8);
      MappedMaps mappedMaps9 = new MappedMaps();
      mappedMaps9.Number = 192;
      mappedMaps9.Default = new Location(9, 8);
      mappedMaps9.ConnectedTo.Add(500, new Location(9, 24));
      this.AutoWalkMaps.Add(mappedMaps9.Number, mappedMaps9);
      MappedMaps mappedMaps10 = new MappedMaps();
      mappedMaps10.Number = 129;
      mappedMaps10.Default = new Location(8, 9);
      mappedMaps10.ConnectedTo.Add(134, new Location(12, 0));
      mappedMaps10.ConnectedTo.Add(500, new Location(8, 14));
      this.AutoWalkMaps.Add(mappedMaps10.Number, mappedMaps10);
      MappedMaps mappedMaps11 = new MappedMaps();
      mappedMaps11.Number = 393;
      mappedMaps11.Default = new Location(6, 7);
      mappedMaps11.ConnectedTo.Add(500, new Location(11, 6));
      this.AutoWalkMaps.Add(mappedMaps11.Number, mappedMaps11);
      MappedMaps mappedMaps12 = new MappedMaps();
      mappedMaps12.Number = 425;
      mappedMaps12.Default = new Location(6, 9);
      mappedMaps12.ConnectedTo.Add(500, new Location(8, 15));
      mappedMaps12.ConnectedTo.Add(1, new Location(8, 7));
      this.AutoWalkMaps.Add(mappedMaps12.Number, mappedMaps12);
      MappedMaps mappedMaps13 = new MappedMaps();
      mappedMaps13.Number = 1;
      mappedMaps13.ConnectedTo.Add(425, new Location(14, 49));
      mappedMaps13.ConnectedTo.Add(2, new Location(3, 4));
      this.AutoWalkMaps.Add(mappedMaps13.Number, mappedMaps13);
      MappedMaps mappedMaps14 = new MappedMaps();
      mappedMaps14.Number = 2;
      mappedMaps14.ConnectedTo.Add(1, new Location(44, 22));
      mappedMaps14.ConnectedTo.Add(5, new Location(11, 23));
      this.AutoWalkMaps.Add(mappedMaps14.Number, mappedMaps14);
      MappedMaps mappedMaps15 = new MappedMaps();
      mappedMaps15.Number = 5;
      mappedMaps15.ConnectedTo.Add(2, new Location(0, 30));
      mappedMaps15.ConnectedTo.Add(8, new Location(29, 45));
      this.AutoWalkMaps.Add(mappedMaps15.Number, mappedMaps15);
      MappedMaps mappedMaps16 = new MappedMaps();
      mappedMaps16.Number = 8;
      mappedMaps16.Default = new Location(7, 7);
      mappedMaps16.ConnectedTo.Add(5, new Location(5, 0));
      mappedMaps16.ConnectedTo.Add(11, new Location(6, 40));
      this.AutoWalkMaps.Add(mappedMaps16.Number, mappedMaps16);
      MappedMaps mappedMaps17 = new MappedMaps();
      mappedMaps17.Number = 11;
      mappedMaps17.ConnectedTo.Add(8, new Location(14, 0));
      mappedMaps17.ConnectedTo.Add(13, new Location(6, 27));
      this.AutoWalkMaps.Add(mappedMaps17.Number, mappedMaps17);
      MappedMaps mappedMaps18 = new MappedMaps();
      mappedMaps18.Number = 13;
      mappedMaps18.ConnectedTo.Add(11, new Location(44, 9));
      mappedMaps18.ConnectedTo.Add(17, new Location(22, 17));
      this.AutoWalkMaps.Add(mappedMaps18.Number, mappedMaps18);
      MappedMaps mappedMaps19 = new MappedMaps();
      mappedMaps19.Number = 17;
      mappedMaps19.ConnectedTo.Add(13, new Location(8, 18));
      mappedMaps19.ConnectedTo.Add(22, new Location(38, 39));
      this.AutoWalkMaps.Add(mappedMaps19.Number, mappedMaps19);
      MappedMaps mappedMaps20 = new MappedMaps();
      mappedMaps20.Number = 22;
      mappedMaps20.ConnectedTo.Add(17, new Location(19, 35));
      mappedMaps20.ConnectedTo.Add(26, new Location(43, 29));
      this.AutoWalkMaps.Add(mappedMaps20.Number, mappedMaps20);
      MappedMaps mappedMaps21 = new MappedMaps();
      mappedMaps21.Number = 26;
      mappedMaps21.ConnectedTo.Add(22, new Location(5, 39));
      mappedMaps21.ConnectedTo.Add(30, new Location(17, 20));
      this.AutoWalkMaps.Add(mappedMaps21.Number, mappedMaps21);
      MappedMaps mappedMaps22 = new MappedMaps();
      mappedMaps22.Number = 30;
      mappedMaps22.ConnectedTo.Add(34, new Location(45, 25));
      this.AutoWalkMaps.Add(mappedMaps22.Number, mappedMaps22);
      MappedMaps mappedMaps23 = new MappedMaps();
      mappedMaps23.Number = 34;
      mappedMaps23.Default = new Location(33, 8);
      mappedMaps23.ConnectedTo.Add(37, new Location(45, 35));
      this.AutoWalkMaps.Add(mappedMaps23.Number, mappedMaps23);
      MappedMaps mappedMaps24 = new MappedMaps();
      mappedMaps24.Number = 37;
      mappedMaps24.ConnectedTo.Add(40, new Location(3, 42));
      this.AutoWalkMaps.Add(mappedMaps24.Number, mappedMaps24);
      MappedMaps mappedMaps25 = new MappedMaps();
      mappedMaps25.Number = 40;
      mappedMaps25.ConnectedTo.Add(44, new Location(32, 39));
      this.AutoWalkMaps.Add(mappedMaps25.Number, mappedMaps25);
      MappedMaps mappedMaps26 = new MappedMaps();
      mappedMaps26.Number = 44;
      mappedMaps26.ConnectedTo.Add(48, new Location(4, 28));
      this.AutoWalkMaps.Add(mappedMaps26.Number, mappedMaps26);
      MappedMaps mappedMaps27 = new MappedMaps();
      mappedMaps27.Number = 48;
      mappedMaps27.ConnectedTo.Add(51, new Location(9, 1));
      this.AutoWalkMaps.Add(mappedMaps27.Number, mappedMaps27);
      MappedMaps mappedMaps28 = new MappedMaps();
      mappedMaps28.Number = 51;
      mappedMaps28.ConnectedTo.Add(55, new Location(29, 12));
      this.AutoWalkMaps.Add(mappedMaps28.Number, mappedMaps28);
      MappedMaps mappedMaps29 = new MappedMaps();
      mappedMaps29.Number = 55;
      mappedMaps29.ConnectedTo.Add(60, new Location(43, 29));
      this.AutoWalkMaps.Add(mappedMaps29.Number, mappedMaps29);
      MappedMaps mappedMaps30 = new MappedMaps();
      mappedMaps30.Number = 60;
      mappedMaps30.ConnectedTo.Add(63, new Location(28, 33));
      this.AutoWalkMaps.Add(mappedMaps30.Number, mappedMaps30);
      MappedMaps mappedMaps31 = new MappedMaps();
      mappedMaps31.Number = 63;
      mappedMaps31.ConnectedTo.Add(66, new Location(11, 23));
      this.AutoWalkMaps.Add(mappedMaps31.Number, mappedMaps31);
      MappedMaps mappedMaps32 = new MappedMaps();
      mappedMaps32.Number = 66;
      mappedMaps32.ConnectedTo.Add(68, new Location(2, 20));
      this.AutoWalkMaps.Add(mappedMaps32.Number, mappedMaps32);
      MappedMaps mappedMaps33 = new MappedMaps();
      mappedMaps33.Number = 68;
      mappedMaps33.ConnectedTo.Add(72, new Location(11, 23));
      this.AutoWalkMaps.Add(mappedMaps33.Number, mappedMaps33);
      MappedMaps mappedMaps34 = new MappedMaps();
      mappedMaps34.Number = 72;
      mappedMaps34.ConnectedTo.Add(77, new Location(21, 2));
      this.AutoWalkMaps.Add(mappedMaps34.Number, mappedMaps34);
      MappedMaps mappedMaps35 = new MappedMaps();
      mappedMaps35.Number = 77;
      mappedMaps35.ConnectedTo.Add(81, new Location(6, 27));
      this.AutoWalkMaps.Add(mappedMaps35.Number, mappedMaps35);
      MappedMaps mappedMaps36 = new MappedMaps();
      mappedMaps36.Number = 81;
      mappedMaps36.ConnectedTo.Add(86, new Location(9, 1));
      this.AutoWalkMaps.Add(mappedMaps36.Number, mappedMaps36);
      MappedMaps mappedMaps37 = new MappedMaps();
      mappedMaps37.Number = 86;
      mappedMaps37.ConnectedTo.Add(91, new Location(31, 1));
      this.AutoWalkMaps.Add(mappedMaps37.Number, mappedMaps37);
      MappedMaps mappedMaps38 = new MappedMaps();
      mappedMaps38.Number = 91;
      mappedMaps38.ConnectedTo.Add(94, new Location(10, 36));
      this.AutoWalkMaps.Add(mappedMaps38.Number, mappedMaps38);
      MappedMaps mappedMaps39 = new MappedMaps();
      mappedMaps39.Number = 94;
      mappedMaps39.Default = new Location(11, 33);
      this.AutoWalkMaps.Add(mappedMaps39.Number, mappedMaps39);
      MappedMaps mappedMaps40 = new MappedMaps();
      mappedMaps40.Number = 3080;
      mappedMaps40.ConnectedTo.Add(600, new Location(3, 6));
      mappedMaps40.ConnectedTo.Add(616, new Location(21, 0));
      mappedMaps40.ConnectedTo.Add(3079, new Location(3, 0));
      mappedMaps40.ConnectedTo.Add(3052, new Location(3, 0));
      mappedMaps40.ConnectedTo.Add(3014, new Location(3, 0));
      this.AutoWalkMaps.Add(mappedMaps40.Number, mappedMaps40);
      MappedMaps mappedMaps41 = new MappedMaps();
      mappedMaps41.Number = 600;
      mappedMaps41.ConnectedTo.Add(623, new Location(24, 16));
      mappedMaps41.ConnectedTo.Add(622, new Location(0, 8));
      mappedMaps41.ConnectedTo.Add(616, new Location(21, 0));
      mappedMaps41.ConnectedTo.Add(3079, new Location(12, 24));
      mappedMaps41.ConnectedTo.Add(3052, new Location(12, 24));
      mappedMaps41.ConnectedTo.Add(3014, new Location(12, 24));
      this.AutoWalkMaps.Add(mappedMaps41.Number, mappedMaps41);
      MappedMaps mappedMaps42 = new MappedMaps();
      mappedMaps42.Number = 622;
      mappedMaps42.Default = new Location(94, 49);
      mappedMaps42.ConnectedTo.Add(600, new Location(99, 49));
      this.AutoWalkMaps.Add(mappedMaps42.Number, mappedMaps42);
      MappedMaps mappedMaps43 = new MappedMaps();
      mappedMaps43.Number = 623;
      mappedMaps43.Default = new Location(47, 45);
      mappedMaps43.ConnectedTo.Add(600, new Location(0, 49));
      this.AutoWalkMaps.Add(mappedMaps43.Number, mappedMaps43);
      MappedMaps mappedMaps44 = new MappedMaps();
      mappedMaps44.Number = 616;
      mappedMaps44.ConnectedTo.Add(617, new Location(24, 0));
      this.AutoWalkMaps.Add(mappedMaps44.Number, mappedMaps44);
      MappedMaps mappedMaps45 = new MappedMaps();
      mappedMaps45.Number = 617;
      mappedMaps45.ConnectedTo.Add(614, new Location(0, 23));
      mappedMaps45.ConnectedTo.Add(3068, new Location(18, 0));
      this.AutoWalkMaps.Add(mappedMaps45.Number, mappedMaps45);
      MappedMaps mappedMaps46 = new MappedMaps();
      mappedMaps46.Number = 3068;
      mappedMaps46.Default = new Location(7, 3);
      mappedMaps46.ConnectedTo.Add(617, new Location(4, 7));
      this.AutoWalkMaps.Add(mappedMaps46.Number, mappedMaps46);
      MappedMaps mappedMaps47 = new MappedMaps();
      mappedMaps47.Number = 614;
      mappedMaps47.ConnectedTo.Add(615, new Location(24, 0));
      this.AutoWalkMaps.Add(mappedMaps47.Number, mappedMaps47);
      MappedMaps mappedMaps48 = new MappedMaps();
      mappedMaps48.Number = 615;
      mappedMaps48.ConnectedTo.Add(618, new Location(49, 25));
      this.AutoWalkMaps.Add(mappedMaps48.Number, mappedMaps48);
      MappedMaps mappedMaps49 = new MappedMaps();
      mappedMaps49.Number = 618;
      mappedMaps49.ConnectedTo.Add(3083, new Location(8, 0));
      this.AutoWalkMaps.Add(mappedMaps49.Number, mappedMaps49);
      MappedMaps mappedMaps50 = new MappedMaps();
      mappedMaps50.Number = 3083;
      mappedMaps50.Default = new Location(7, 3);
      this.AutoWalkMaps.Add(mappedMaps50.Number, mappedMaps50);
      MappedMaps mappedMaps51 = new MappedMaps();
      mappedMaps51.Number = 3014;
      mappedMaps51.Default = new Location(12, 9);
      mappedMaps51.ConnectedTo.Add(3080, new Location(15, 13));
      mappedMaps51.ConnectedTo.Add(3052, new Location(15, 13));
      mappedMaps51.ConnectedTo.Add(3079, new Location(15, 13));
      this.AutoWalkMaps.Add(mappedMaps51.Number, mappedMaps51);
      MappedMaps mappedMaps52 = new MappedMaps();
      mappedMaps52.Number = 502;
      mappedMaps52.ConnectedTo.Add(3014, new Location(30, 0));
      mappedMaps52.ConnectedTo.Add(167, new Location(14, 8));
      mappedMaps52.ConnectedTo.Add(168, new Location(12, 45));
      mappedMaps52.ConnectedTo.Add(169, new Location(59, 38));
      mappedMaps52.ConnectedTo.Add(3008, new Location(15, 67));
      mappedMaps52.ConnectedTo.Add(3081, new Location(15, 67));
      mappedMaps52.ConnectedTo.Add(3079, new Location(15, 67));
      mappedMaps52.ConnectedTo.Add(6628, new Location(15, 67));
      mappedMaps52.ConnectedTo.Add(6228, new Location(15, 67));
      mappedMaps52.ConnectedTo.Add(185, new Location(45, 67));
      this.AutoWalkMaps.Add(mappedMaps52.Number, mappedMaps52);
      MappedMaps mappedMaps53 = new MappedMaps();
      mappedMaps53.Number = 183;
      mappedMaps53.ConnectedTo.Add(502, new Location(7, 14));
      this.AutoWalkMaps.Add(mappedMaps53.Number, mappedMaps53);
      MappedMaps mappedMaps54 = new MappedMaps();
      mappedMaps54.Number = 184;
      mappedMaps54.ConnectedTo.Add(502, new Location(7, 14));
      this.AutoWalkMaps.Add(mappedMaps54.Number, mappedMaps54);
      MappedMaps mappedMaps55 = new MappedMaps();
      mappedMaps55.Number = 388;
      mappedMaps55.ConnectedTo.Add(502, new Location(15, 6));
      this.AutoWalkMaps.Add(mappedMaps55.Number, mappedMaps55);
      MappedMaps mappedMaps56 = new MappedMaps();
      mappedMaps56.Number = 167;
      mappedMaps56.Default = new Location(6, 6);
      mappedMaps56.ConnectedTo.Add(502, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps56.Number, mappedMaps56);
      MappedMaps mappedMaps57 = new MappedMaps();
      mappedMaps57.Number = 168;
      mappedMaps57.Default = new Location(9, 6);
      mappedMaps57.ConnectedTo.Add(502, new Location(14, 5));
      this.AutoWalkMaps.Add(mappedMaps57.Number, mappedMaps57);
      MappedMaps mappedMaps58 = new MappedMaps();
      mappedMaps58.Number = 169;
      mappedMaps58.Default = new Location(5, 6);
      mappedMaps58.ConnectedTo.Add(502, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps58.Number, mappedMaps58);
      MappedMaps mappedMaps59 = new MappedMaps();
      mappedMaps59.Number = 185;
      mappedMaps59.Default = new Location(27, 36);
      mappedMaps59.ConnectedTo.Add(502, new Location(11, 47));
      mappedMaps59.ConnectedTo.Add(207, new Location(26, 31));
      this.AutoWalkMaps.Add(mappedMaps59.Number, mappedMaps59);
      MappedMaps mappedMaps60 = new MappedMaps();
      mappedMaps60.Number = 207;
      mappedMaps60.ConnectedTo.Add(209, new Location(30, 30));
      mappedMaps60.ConnectedTo.Add(208, new Location(5, 36));
      this.AutoWalkMaps.Add(mappedMaps60.Number, mappedMaps60);
      MappedMaps mappedMaps61 = new MappedMaps();
      mappedMaps61.Number = 208;
      mappedMaps61.ConnectedTo.Add(210, new Location(4, 2));
      this.AutoWalkMaps.Add(mappedMaps61.Number, mappedMaps61);
      MappedMaps mappedMaps62 = new MappedMaps();
      mappedMaps62.Number = 210;
      mappedMaps62.ConnectedTo.Add(264, new Location(5, 10));
      this.AutoWalkMaps.Add(mappedMaps62.Number, mappedMaps62);
      MappedMaps mappedMaps63 = new MappedMaps();
      mappedMaps63.Number = 264;
      mappedMaps63.ConnectedTo.Add(267, new Location(37, 3));
      this.AutoWalkMaps.Add(mappedMaps63.Number, mappedMaps63);
      MappedMaps mappedMaps64 = new MappedMaps();
      mappedMaps64.Number = 267;
      mappedMaps64.ConnectedTo.Add(3069, new Location(15, 1));
      this.AutoWalkMaps.Add(mappedMaps64.Number, mappedMaps64);
      MappedMaps mappedMaps65 = new MappedMaps();
      mappedMaps65.Number = 3069;
      mappedMaps65.Default = new Location(6, 2);
      mappedMaps65.ConnectedTo.Add(267, new Location(4, 7));
      this.AutoWalkMaps.Add(mappedMaps65.Number, mappedMaps65);
      MappedMaps mappedMaps66 = new MappedMaps();
      mappedMaps66.Number = 209;
      mappedMaps66.ConnectedTo.Add(263, new Location(16, 14));
      this.AutoWalkMaps.Add(mappedMaps66.Number, mappedMaps66);
      MappedMaps mappedMaps67 = new MappedMaps();
      mappedMaps67.Number = 263;
      mappedMaps67.ConnectedTo.Add(266, new Location(5, 36));
      this.AutoWalkMaps.Add(mappedMaps67.Number, mappedMaps67);
      MappedMaps mappedMaps68 = new MappedMaps();
      mappedMaps68.Number = 266;
      mappedMaps68.ConnectedTo.Add(269, new Location(29, 31));
      this.AutoWalkMaps.Add(mappedMaps68.Number, mappedMaps68);
      MappedMaps mappedMaps69 = new MappedMaps();
      mappedMaps69.Number = 269;
      mappedMaps69.ConnectedTo.Add(271, new Location(5, 36));
      this.AutoWalkMaps.Add(mappedMaps69.Number, mappedMaps69);
      MappedMaps mappedMaps70 = new MappedMaps();
      mappedMaps70.Number = 271;
      mappedMaps70.ConnectedTo.Add(273, new Location(5, 36));
      this.AutoWalkMaps.Add(mappedMaps70.Number, mappedMaps70);
      MappedMaps mappedMaps71 = new MappedMaps();
      mappedMaps71.Number = 273;
      mappedMaps71.ConnectedTo.Add(276, new Location(26, 23));
      this.AutoWalkMaps.Add(mappedMaps71.Number, mappedMaps71);
      MappedMaps mappedMaps72 = new MappedMaps();
      mappedMaps72.Number = 276;
      mappedMaps72.ConnectedTo.Add(280, new Location(4, 2));
      this.AutoWalkMaps.Add(mappedMaps72.Number, mappedMaps72);
      MappedMaps mappedMaps73 = new MappedMaps();
      mappedMaps73.Number = 280;
      mappedMaps73.ConnectedTo.Add(283, new Location(28, 37));
      this.AutoWalkMaps.Add(mappedMaps73.Number, mappedMaps73);
      MappedMaps mappedMaps74 = new MappedMaps();
      mappedMaps74.Number = 283;
      mappedMaps74.ConnectedTo.Add(3084, new Location(6, 1));
      this.AutoWalkMaps.Add(mappedMaps74.Number, mappedMaps74);
      MappedMaps mappedMaps75 = new MappedMaps();
      mappedMaps75.Number = 3084;
      mappedMaps75.Default = new Location(6, 2);
      this.AutoWalkMaps.Add(mappedMaps75.Number, mappedMaps75);
      MappedMaps mappedMaps76 = new MappedMaps();
      mappedMaps76.Number = 3052;
      mappedMaps76.Default = new Location(39, 20);
      mappedMaps76.ConnectedTo.Add(511, new Location(42, 22));
      mappedMaps76.ConnectedTo.Add(3059, new Location(11, 20));
      mappedMaps76.ConnectedTo.Add(3079, new Location(26, 25));
      mappedMaps76.ConnectedTo.Add(3080, new Location(26, 25));
      mappedMaps76.ConnectedTo.Add(3014, new Location(26, 25));
      mappedMaps76.ConnectedTo.Add(3012, new Location(33, 25));
      mappedMaps76.ConnectedTo.Add(3271, new Location(33, 25));
      mappedMaps76.ConnectedTo.Add(3071, new Location(33, 25));
      mappedMaps76.ConnectedTo.Add(6925, new Location(33, 25));
      mappedMaps76.ConnectedTo.Add(5231, new Location(33, 25));
      mappedMaps76.ConnectedTo.Add(3055, new Location(36, 14));
      this.AutoWalkMaps.Add(mappedMaps76.Number, mappedMaps76);
      MappedMaps mappedMaps77 = new MappedMaps();
      mappedMaps77.Number = 511;
      mappedMaps77.ConnectedTo.Add(3052, new Location(22, 22));
      this.AutoWalkMaps.Add(mappedMaps77.Number, mappedMaps77);
      MappedMaps mappedMaps78 = new MappedMaps();
      mappedMaps78.Number = 3055;
      mappedMaps78.ConnectedTo.Add(3054, new Location(40, 0));
      mappedMaps78.ConnectedTo.Add(3052, new Location(39, 49));
      this.AutoWalkMaps.Add(mappedMaps78.Number, mappedMaps78);
      MappedMaps mappedMaps79 = new MappedMaps();
      mappedMaps79.Number = 3054;
      mappedMaps79.Default = new Location(36, 16);
      mappedMaps79.ConnectedTo.Add(3055, new Location(40, 49));
      this.AutoWalkMaps.Add(mappedMaps79.Number, mappedMaps79);
      MappedMaps mappedMaps80 = new MappedMaps();
      mappedMaps80.Number = 3059;
      mappedMaps80.ConnectedTo.Add(3056, new Location(13, 1));
      mappedMaps80.ConnectedTo.Add(3052, new Location(7, 0));
      this.AutoWalkMaps.Add(mappedMaps80.Number, mappedMaps80);
      MappedMaps mappedMaps81 = new MappedMaps();
      mappedMaps81.Number = 3056;
      mappedMaps81.ConnectedTo.Add(3058, new Location(16, 0));
      mappedMaps81.ConnectedTo.Add(3059, new Location(0, 25));
      this.AutoWalkMaps.Add(mappedMaps81.Number, mappedMaps81);
      MappedMaps mappedMaps82 = new MappedMaps();
      mappedMaps82.Number = 3058;
      mappedMaps82.ConnectedTo.Add(3635, new Location(8, 1));
      mappedMaps82.ConnectedTo.Add(3056, new Location(5, 23));
      this.AutoWalkMaps.Add(mappedMaps82.Number, mappedMaps82);
      MappedMaps mappedMaps83 = new MappedMaps();
      mappedMaps83.Number = 3635;
      mappedMaps83.ConnectedTo.Add(3634, new Location(7, 2));
      mappedMaps83.ConnectedTo.Add(3058, new Location(10, 19));
      this.AutoWalkMaps.Add(mappedMaps83.Number, mappedMaps83);
      MappedMaps mappedMaps84 = new MappedMaps();
      mappedMaps84.Number = 3634;
      mappedMaps84.Default = new Location(20, 15);
      mappedMaps84.ConnectedTo.Add(3601, new Location(28, 16));
      mappedMaps84.ConnectedTo.Add(3035, new Location(1, 14));
      this.AutoWalkMaps.Add(mappedMaps84.Number, mappedMaps84);
      MappedMaps mappedMaps85 = new MappedMaps();
      mappedMaps85.Number = 3601;
      mappedMaps85.ConnectedTo.Add(3602, new Location(68, 33));
      mappedMaps85.ConnectedTo.Add(3034, new Location(1, 14));
      this.AutoWalkMaps.Add(mappedMaps85.Number, mappedMaps85);
      MappedMaps mappedMaps86 = new MappedMaps();
      mappedMaps86.Number = 3602;
      mappedMaps86.Default = new Location(28, 69);
      mappedMaps86.ConnectedTo.Add(3603, new Location(26, 77));
      mappedMaps86.ConnectedTo.Add(3601, new Location(47, 10));
      this.AutoWalkMaps.Add(mappedMaps86.Number, mappedMaps86);
      MappedMaps mappedMaps87 = new MappedMaps();
      mappedMaps87.Number = 3603;
      mappedMaps87.ConnectedTo.Add(3605, new Location(48, 25));
      mappedMaps87.ConnectedTo.Add(3602, new Location(20, 1));
      this.AutoWalkMaps.Add(mappedMaps87.Number, mappedMaps87);
      MappedMaps mappedMaps88 = new MappedMaps();
      mappedMaps88.Number = 3605;
      mappedMaps88.ConnectedTo.Add(3606, new Location(68, 48));
      mappedMaps88.ConnectedTo.Add(3603, new Location(1, 38));
      this.AutoWalkMaps.Add(mappedMaps88.Number, mappedMaps88);
      MappedMaps mappedMaps89 = new MappedMaps();
      mappedMaps89.Number = 3606;
      mappedMaps89.ConnectedTo.Add(3607, new Location(78, 39));
      mappedMaps89.ConnectedTo.Add(3605, new Location(1, 43));
      this.AutoWalkMaps.Add(mappedMaps89.Number, mappedMaps89);
      MappedMaps mappedMaps90 = new MappedMaps();
      mappedMaps90.Number = 3607;
      mappedMaps90.ConnectedTo.Add(3608, new Location(69, 20));
      mappedMaps90.ConnectedTo.Add(3606, new Location(0, 50));
      this.AutoWalkMaps.Add(mappedMaps90.Number, mappedMaps90);
      MappedMaps mappedMaps91 = new MappedMaps();
      mappedMaps91.Number = 3608;
      mappedMaps91.ConnectedTo.Add(3609, new Location(6, 59));
      mappedMaps91.ConnectedTo.Add(3607, new Location(0, 27));
      this.AutoWalkMaps.Add(mappedMaps91.Number, mappedMaps91);
      MappedMaps mappedMaps92 = new MappedMaps();
      mappedMaps92.Number = 3609;
      mappedMaps92.ConnectedTo.Add(3610, new Location(29, 69));
      mappedMaps92.ConnectedTo.Add(3608, new Location(8, 0));
      this.AutoWalkMaps.Add(mappedMaps92.Number, mappedMaps92);
      MappedMaps mappedMaps93 = new MappedMaps();
      mappedMaps93.Number = 3610;
      mappedMaps93.ConnectedTo.Add(3611, new Location(16, 79));
      mappedMaps93.ConnectedTo.Add(3609, new Location(26, 0));
      this.AutoWalkMaps.Add(mappedMaps93.Number, mappedMaps93);
      MappedMaps mappedMaps94 = new MappedMaps();
      mappedMaps94.Number = 3611;
      mappedMaps94.Default = new Location(20, 98);
      mappedMaps94.ConnectedTo.Add(3612, new Location(18, 99));
      mappedMaps94.ConnectedTo.Add(3610, new Location(46, 0));
      this.AutoWalkMaps.Add(mappedMaps94.Number, mappedMaps94);
      MappedMaps mappedMaps95 = new MappedMaps();
      mappedMaps95.Number = 3612;
      mappedMaps95.ConnectedTo.Add(3622, new Location(79, 38));
      mappedMaps95.ConnectedTo.Add(3611, new Location(70, 0));
      this.AutoWalkMaps.Add(mappedMaps95.Number, mappedMaps95);
      MappedMaps mappedMaps96 = new MappedMaps();
      mappedMaps96.Number = 3622;
      mappedMaps96.ConnectedTo.Add(3623, new Location(99, 50));
      mappedMaps96.ConnectedTo.Add(3612, new Location(0, 95));
      this.AutoWalkMaps.Add(mappedMaps96.Number, mappedMaps96);
      MappedMaps mappedMaps97 = new MappedMaps();
      mappedMaps97.Number = 3623;
      mappedMaps97.ConnectedTo.Add(3624, new Location(30, 79));
      mappedMaps97.ConnectedTo.Add(3622, new Location(0, 27));
      this.AutoWalkMaps.Add(mappedMaps97.Number, mappedMaps97);
      MappedMaps mappedMaps98 = new MappedMaps();
      mappedMaps98.Number = 3624;
      mappedMaps98.Default = new Location(64, 5);
      mappedMaps98.ConnectedTo.Add(3626, new Location(69, 6));
      mappedMaps98.ConnectedTo.Add(3623, new Location(23, 0));
      this.AutoWalkMaps.Add(mappedMaps98.Number, mappedMaps98);
      MappedMaps mappedMaps99 = new MappedMaps();
      mappedMaps99.Number = 3626;
      mappedMaps99.ConnectedTo.Add(3627, new Location(30, 49));
      mappedMaps99.ConnectedTo.Add(3624, new Location(0, 31));
      this.AutoWalkMaps.Add(mappedMaps99.Number, mappedMaps99);
      MappedMaps mappedMaps100 = new MappedMaps();
      mappedMaps100.Number = 3627;
      mappedMaps100.ConnectedTo.Add(3628, new Location(57, 79));
      mappedMaps100.ConnectedTo.Add(3626, new Location(32, 0));
      this.AutoWalkMaps.Add(mappedMaps100.Number, mappedMaps100);
      MappedMaps mappedMaps101 = new MappedMaps();
      mappedMaps101.Number = 3628;
      mappedMaps101.ConnectedTo.Add(3629, new Location(30, 69));
      mappedMaps101.ConnectedTo.Add(3627, new Location(34, 8));
      this.AutoWalkMaps.Add(mappedMaps101.Number, mappedMaps101);
      MappedMaps mappedMaps102 = new MappedMaps();
      mappedMaps102.Number = 3629;
      mappedMaps102.ConnectedTo.Add(3630, new Location(3, 40));
      mappedMaps102.ConnectedTo.Add(3628, new Location(30, 4));
      this.AutoWalkMaps.Add(mappedMaps102.Number, mappedMaps102);
      MappedMaps mappedMaps103 = new MappedMaps();
      mappedMaps103.Number = 3630;
      mappedMaps103.ConnectedTo.Add(3631, new Location(5, 49));
      mappedMaps103.ConnectedTo.Add(3629, new Location(49, 24));
      this.AutoWalkMaps.Add(mappedMaps103.Number, mappedMaps103);
      MappedMaps mappedMaps104 = new MappedMaps();
      mappedMaps104.Number = 3631;
      mappedMaps104.ConnectedTo.Add(3632, new Location(0, 64));
      mappedMaps104.ConnectedTo.Add(3630, new Location(31, 0));
      this.AutoWalkMaps.Add(mappedMaps104.Number, mappedMaps104);
      MappedMaps mappedMaps105 = new MappedMaps();
      mappedMaps105.Number = 3632;
      mappedMaps105.ConnectedTo.Add(4335, new Location(26, 0));
      mappedMaps105.ConnectedTo.Add(3631, new Location(69, 16));
      this.AutoWalkMaps.Add(mappedMaps105.Number, mappedMaps105);
      MappedMaps mappedMaps106 = new MappedMaps();
      mappedMaps106.Number = 4335;
      mappedMaps106.Default = new Location(72, 91);
      mappedMaps106.ConnectedTo.Add(3632, new Location(69, 99));
      this.AutoWalkMaps.Add(mappedMaps106.Number, mappedMaps106);
      MappedMaps mappedMaps107 = new MappedMaps();
      mappedMaps107.Number = 5231;
      mappedMaps107.ConnectedTo.Add(5232, new Location(3, 0));
      this.AutoWalkMaps.Add(mappedMaps107.Number, mappedMaps107);
      MappedMaps mappedMaps108 = new MappedMaps();
      mappedMaps108.Number = 5232;
      mappedMaps108.Default = new Location(8, 8);
      mappedMaps108.ConnectedTo.Add(3020, new Location(7, 13));
      mappedMaps108.ConnectedTo.Add(3052, new Location(7, 13));
      mappedMaps108.ConnectedTo.Add(3012, new Location(7, 13));
      mappedMaps108.ConnectedTo.Add(3271, new Location(7, 13));
      mappedMaps108.ConnectedTo.Add(3071, new Location(7, 13));
      this.AutoWalkMaps.Add(mappedMaps108.Number, mappedMaps108);
      MappedMaps mappedMaps109 = new MappedMaps();
      mappedMaps109.Number = 3020;
      mappedMaps109.ConnectedTo.Add(501, new Location(23, 10));
      mappedMaps109.ConnectedTo.Add(3052, new Location(15, 0));
      mappedMaps109.ConnectedTo.Add(3012, new Location(15, 0));
      mappedMaps109.ConnectedTo.Add(3271, new Location(15, 0));
      mappedMaps109.ConnectedTo.Add(3071, new Location(15, 0));
      mappedMaps109.ConnectedTo.Add(6925, new Location(15, 0));
      this.AutoWalkMaps.Add(mappedMaps109.Number, mappedMaps109);
      MappedMaps mappedMaps110 = new MappedMaps();
      mappedMaps110.Number = 501;
      mappedMaps110.ConnectedTo.Add(3020, new Location(0, 10));
      mappedMaps110.ConnectedTo.Add(150, new Location(39, 13));
      mappedMaps110.ConnectedTo.Add(426, new Location(57, 58));
      mappedMaps110.ConnectedTo.Add(148, new Location(51, 13));
      this.AutoWalkMaps.Add(mappedMaps110.Number, mappedMaps110);
      MappedMaps mappedMaps111 = new MappedMaps();
      mappedMaps111.Number = 148;
      mappedMaps111.Default = new Location(6, 6);
      mappedMaps111.ConnectedTo.Add(501, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps111.Number, mappedMaps111);
      MappedMaps mappedMaps112 = new MappedMaps();
      mappedMaps112.Number = 150;
      mappedMaps112.Default = new Location(5, 6);
      mappedMaps112.ConnectedTo.Add(501, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps112.Number, mappedMaps112);
      MappedMaps mappedMaps113 = new MappedMaps();
      mappedMaps113.Number = 426;
      mappedMaps113.Default = new Location(18, 16);
      mappedMaps113.ConnectedTo.Add(501, new Location(11, 0));
      this.AutoWalkMaps.Add(mappedMaps113.Number, mappedMaps113);
      MappedMaps mappedMaps114 = new MappedMaps();
      mappedMaps114.Number = 3071;
      mappedMaps114.Default = new Location(4, 3);
      mappedMaps114.ConnectedTo.Add(3072, new Location(7, 3));
      mappedMaps114.ConnectedTo.Add(542, new Location(0, 8));
      mappedMaps114.ConnectedTo.Add(6628, new Location(0, 8));
      mappedMaps114.ConnectedTo.Add(2052, new Location(0, 8));
      mappedMaps114.ConnectedTo.Add(3271, new Location(0, 8));
      mappedMaps114.ConnectedTo.Add(3052, new Location(0, 8));
      mappedMaps114.ConnectedTo.Add(3012, new Location(0, 8));
      mappedMaps114.ConnectedTo.Add(6925, new Location(0, 8));
      this.AutoWalkMaps.Add(mappedMaps114.Number, mappedMaps114);
      MappedMaps mappedMaps115 = new MappedMaps();
      mappedMaps115.Number = 3072;
      mappedMaps115.ConnectedTo.Add(3073, new Location(31, 5));
      mappedMaps115.ConnectedTo.Add(3071, new Location(0, 9));
      this.AutoWalkMaps.Add(mappedMaps115.Number, mappedMaps115);
      MappedMaps mappedMaps116 = new MappedMaps();
      mappedMaps116.Number = 3073;
      mappedMaps116.ConnectedTo.Add(3075, new Location(5, 0));
      mappedMaps116.ConnectedTo.Add(3072, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps116.Number, mappedMaps116);
      MappedMaps mappedMaps117 = new MappedMaps();
      mappedMaps117.Number = 3075;
      mappedMaps117.ConnectedTo.Add(3076, new Location(28, 31));
      mappedMaps117.ConnectedTo.Add(3073, new Location(0, 29));
      this.AutoWalkMaps.Add(mappedMaps117.Number, mappedMaps117);
      MappedMaps mappedMaps118 = new MappedMaps();
      mappedMaps118.Number = 3076;
      mappedMaps118.ConnectedTo.Add(4000, new Location(11, 31));
      mappedMaps118.ConnectedTo.Add(3075, new Location(5, 0));
      this.AutoWalkMaps.Add(mappedMaps118.Number, mappedMaps118);
      MappedMaps mappedMaps119 = new MappedMaps();
      mappedMaps119.Number = 4000;
      mappedMaps119.ConnectedTo.Add(4002, new Location(31, 13));
      this.AutoWalkMaps.Add(mappedMaps119.Number, mappedMaps119);
      MappedMaps mappedMaps120 = new MappedMaps();
      mappedMaps120.Number = 4002;
      mappedMaps120.ConnectedTo.Add(4003, new Location(13, 31));
      this.AutoWalkMaps.Add(mappedMaps120.Number, mappedMaps120);
      MappedMaps mappedMaps121 = new MappedMaps();
      mappedMaps121.Number = 4003;
      mappedMaps121.ConnectedTo.Add(3078, new Location(31, 12));
      this.AutoWalkMaps.Add(mappedMaps121.Number, mappedMaps121);
      MappedMaps mappedMaps122 = new MappedMaps();
      mappedMaps122.Number = 3078;
      mappedMaps122.Default = new Location(9, 8);
      this.AutoWalkMaps.Add(mappedMaps122.Number, mappedMaps122);
      MappedMaps mappedMaps123 = new MappedMaps();
      mappedMaps123.Number = 3081;
      mappedMaps123.ConnectedTo.Add(505, new Location(2, 6));
      mappedMaps123.ConnectedTo.Add(502, new Location(2, 0));
      mappedMaps123.ConnectedTo.Add(3012, new Location(2, 0));
      mappedMaps123.ConnectedTo.Add(3271, new Location(2, 0));
      mappedMaps123.ConnectedTo.Add(6628, new Location(2, 0));
      mappedMaps123.ConnectedTo.Add(6228, new Location(2, 0));
      this.AutoWalkMaps.Add(mappedMaps123.Number, mappedMaps123);
      MappedMaps mappedMaps124 = new MappedMaps();
      mappedMaps124.Number = 505;
      mappedMaps124.ConnectedTo.Add(424, new Location(22, 20));
      mappedMaps124.ConnectedTo.Add(303, new Location(9, 34));
      mappedMaps124.ConnectedTo.Add(498, new Location(41, 41));
      mappedMaps124.ConnectedTo.Add(421, new Location(37, 28));
      mappedMaps124.ConnectedTo.Add(422, new Location(42, 11));
      mappedMaps124.ConnectedTo.Add(502, new Location(27, 44));
      mappedMaps124.ConnectedTo.Add(3012, new Location(27, 44));
      mappedMaps124.ConnectedTo.Add(6628, new Location(27, 44));
      mappedMaps124.ConnectedTo.Add(6228, new Location(27, 44));
      this.AutoWalkMaps.Add(mappedMaps124.Number, mappedMaps124);
      MappedMaps mappedMaps125 = new MappedMaps();
      mappedMaps125.Number = 422;
      mappedMaps125.ConnectedTo.Add(505, new Location(5, 14));
      this.AutoWalkMaps.Add(mappedMaps125.Number, mappedMaps125);
      MappedMaps mappedMaps126 = new MappedMaps();
      mappedMaps126.Number = 498;
      mappedMaps126.Default = new Location(5, 6);
      mappedMaps126.ConnectedTo.Add(505, new Location(5, 11));
      this.AutoWalkMaps.Add(mappedMaps126.Number, mappedMaps126);
      MappedMaps mappedMaps127 = new MappedMaps();
      mappedMaps127.Number = 420;
      mappedMaps127.ConnectedTo.Add(505, new Location(7, 14));
      this.AutoWalkMaps.Add(mappedMaps127.Number, mappedMaps127);
      MappedMaps mappedMaps128 = new MappedMaps();
      mappedMaps128.Number = 424;
      mappedMaps128.ConnectedTo.Add(505, new Location(12, 6));
      this.AutoWalkMaps.Add(mappedMaps128.Number, mappedMaps128);
      MappedMaps mappedMaps129 = new MappedMaps();
      mappedMaps129.Number = 421;
      mappedMaps129.Default = new Location(9, 9);
      mappedMaps129.ConnectedTo.Add(505, new Location(11, 8));
      this.AutoWalkMaps.Add(mappedMaps129.Number, mappedMaps129);
      MappedMaps mappedMaps130 = new MappedMaps();
      mappedMaps130.Number = 303;
      mappedMaps130.Default = new Location(9, 9);
      mappedMaps130.ConnectedTo.Add(505, new Location(14, 9));
      this.AutoWalkMaps.Add(mappedMaps130.Number, mappedMaps130);
      MappedMaps mappedMaps131 = new MappedMaps();
      mappedMaps131.Number = 3012;
      mappedMaps131.ConnectedTo.Add(662, new Location(15, 8));
      mappedMaps131.ConnectedTo.Add(542, new Location(15, 8));
      mappedMaps131.ConnectedTo.Add(6628, new Location(15, 8));
      mappedMaps131.ConnectedTo.Add(2052, new Location(15, 8));
      mappedMaps131.ConnectedTo.Add(3271, new Location(15, 8));
      mappedMaps131.ConnectedTo.Add(3071, new Location(15, 8));
      this.AutoWalkMaps.Add(mappedMaps131.Number, mappedMaps131);
      MappedMaps mappedMaps132 = new MappedMaps();
      mappedMaps132.Number = 3271;
      mappedMaps132.Default = new Location(43, 58);
      mappedMaps132.ConnectedTo.Add(109, new Location(29, 37));
      mappedMaps132.ConnectedTo.Add(2141, new Location(14, 35));
      mappedMaps132.ConnectedTo.Add(542, new Location(64, 60));
      mappedMaps132.ConnectedTo.Add(6628, new Location(64, 60));
      mappedMaps132.ConnectedTo.Add(2052, new Location(64, 60));
      mappedMaps132.ConnectedTo.Add(3071, new Location(64, 60));
      mappedMaps132.ConnectedTo.Add(5231, new Location(64, 60));
      mappedMaps132.ConnectedTo.Add(3926, new Location(33, 76));
      this.AutoWalkMaps.Add(mappedMaps132.Number, mappedMaps132);
      MappedMaps mappedMaps133 = new MappedMaps();
      mappedMaps133.Number = 3272;
      mappedMaps133.ConnectedTo.Add(3926, new Location(31, 0));
      mappedMaps133.ConnectedTo.Add(3012, new Location(35, 60));
      this.AutoWalkMaps.Add(mappedMaps133.Number, mappedMaps133);
      MappedMaps mappedMaps134 = new MappedMaps();
      mappedMaps134.Number = 109;
      mappedMaps134.ConnectedTo.Add(110, new Location(5, 0));
      mappedMaps134.ConnectedTo.Add(126, new Location(14, 6));
      mappedMaps134.ConnectedTo.Add(3271, new Location(5, 15));
      this.AutoWalkMaps.Add(mappedMaps134.Number, mappedMaps134);
      MappedMaps mappedMaps135 = new MappedMaps();
      mappedMaps135.Number = 110;
      mappedMaps135.ConnectedTo.Add(120, new Location(8, 0));
      mappedMaps135.ConnectedTo.Add(109, new Location(6, 15));
      this.AutoWalkMaps.Add(mappedMaps135.Number, mappedMaps135);
      MappedMaps mappedMaps136 = new MappedMaps();
      mappedMaps136.Number = 120;
      mappedMaps136.ConnectedTo.Add(122, new Location(8, 0));
      mappedMaps136.ConnectedTo.Add(121, new Location(0, 5));
      mappedMaps136.ConnectedTo.Add(110, new Location(6, 9));
      this.AutoWalkMaps.Add(mappedMaps136.Number, mappedMaps136);
      MappedMaps mappedMaps137 = new MappedMaps();
      mappedMaps137.Number = 121;
      mappedMaps137.Default = new Location(6, 7);
      mappedMaps137.ConnectedTo.Add(122, new Location(9, 6));
      this.AutoWalkMaps.Add(mappedMaps137.Number, mappedMaps137);
      MappedMaps mappedMaps138 = new MappedMaps();
      mappedMaps138.Number = 122;
      mappedMaps138.Default = new Location(4, 2);
      mappedMaps138.ConnectedTo.Add(120, new Location(6, 9));
      mappedMaps138.ConnectedTo.Add(378, new Location(9, 5));
      this.AutoWalkMaps.Add(mappedMaps138.Number, mappedMaps138);
      MappedMaps mappedMaps139 = new MappedMaps();
      mappedMaps139.Number = 378;
      mappedMaps139.Default = new Location(15, 7);
      mappedMaps139.ConnectedTo.Add(122, new Location(1, 8));
      this.AutoWalkMaps.Add(mappedMaps139.Number, mappedMaps139);
      MappedMaps mappedMaps140 = new MappedMaps();
      mappedMaps140.Number = 126;
      mappedMaps140.ConnectedTo.Add(119, new Location(2, 0));
      mappedMaps140.ConnectedTo.Add(117, new Location(0, 4));
      mappedMaps140.ConnectedTo.Add(109, new Location(2, 32));
      this.AutoWalkMaps.Add(mappedMaps140.Number, mappedMaps140);
      MappedMaps mappedMaps141 = new MappedMaps();
      mappedMaps141.Number = 117;
      mappedMaps141.ConnectedTo.Add(118, new Location(5, 0));
      mappedMaps141.ConnectedTo.Add(126, new Location(9, 6));
      this.AutoWalkMaps.Add(mappedMaps141.Number, mappedMaps141);
      MappedMaps mappedMaps142 = new MappedMaps();
      mappedMaps142.Number = 118;
      mappedMaps142.Default = new Location(9, 5);
      mappedMaps142.ConnectedTo.Add(117, new Location(6, 9));
      this.AutoWalkMaps.Add(mappedMaps142.Number, mappedMaps142);
      MappedMaps mappedMaps143 = new MappedMaps();
      mappedMaps143.Number = 119;
      mappedMaps143.ConnectedTo.Add(115, new Location(14, 6));
      mappedMaps143.ConnectedTo.Add(126, new Location(5, 15));
      this.AutoWalkMaps.Add(mappedMaps143.Number, mappedMaps143);
      MappedMaps mappedMaps144 = new MappedMaps();
      mappedMaps144.Number = 115;
      mappedMaps144.Default = new Location(11, 8);
      mappedMaps144.ConnectedTo.Add(119, new Location(8, 15));
      mappedMaps144.ConnectedTo.Add(123, new Location(0, 8));
      this.AutoWalkMaps.Add(mappedMaps144.Number, mappedMaps144);
      MappedMaps mappedMaps145 = new MappedMaps();
      mappedMaps145.Number = 123;
      mappedMaps145.ConnectedTo.Add(3041, new Location(5, 0));
      mappedMaps145.ConnectedTo.Add(124, new Location(0, 5));
      mappedMaps145.ConnectedTo.Add(115, new Location(9, 6));
      this.AutoWalkMaps.Add(mappedMaps145.Number, mappedMaps145);
      MappedMaps mappedMaps146 = new MappedMaps();
      mappedMaps146.Number = 124;
      mappedMaps146.Default = new Location(7, 7);
      mappedMaps146.ConnectedTo.Add(123, new Location(9, 6));
      this.AutoWalkMaps.Add(mappedMaps146.Number, mappedMaps146);
      MappedMaps mappedMaps147 = new MappedMaps();
      mappedMaps147.Number = 3041;
      mappedMaps147.Default = new Location(4, 12);
      mappedMaps147.ConnectedTo.Add(123, new Location(8, 15));
      this.AutoWalkMaps.Add(mappedMaps147.Number, mappedMaps147);
      MappedMaps mappedMaps148 = new MappedMaps();
      mappedMaps148.Number = 2141;
      mappedMaps148.Default = new Location(8, 8);
      mappedMaps148.ConnectedTo.Add(3271, new Location(0, 6));
      this.AutoWalkMaps.Add(mappedMaps148.Number, mappedMaps148);
      MappedMaps mappedMaps149 = new MappedMaps();
      mappedMaps149.Number = 6925;
      mappedMaps149.ConnectedTo.Add(3052, new Location(34, 0));
      mappedMaps149.ConnectedTo.Add(3012, new Location(34, 0));
      mappedMaps149.ConnectedTo.Add(3271, new Location(34, 0));
      mappedMaps149.ConnectedTo.Add(5231, new Location(34, 0));
      mappedMaps149.ConnectedTo.Add(6926, new Location(20, 30));
      this.AutoWalkMaps.Add(mappedMaps149.Number, mappedMaps149);
      MappedMaps mappedMaps150 = new MappedMaps();
      mappedMaps150.Number = 6926;
      mappedMaps150.ConnectedTo.Add(6925, new Location(8, 13));
      mappedMaps150.ConnectedTo.Add(10028, new Location(8, 8));
      this.AutoWalkMaps.Add(mappedMaps150.Number, mappedMaps150);
      MappedMaps mappedMaps151 = new MappedMaps();
      mappedMaps151.Number = 3926;
      mappedMaps151.ConnectedTo.Add(3271, new Location(39, 0));
      mappedMaps151.ConnectedTo.Add(3935, new Location(66, 21));
      mappedMaps151.ConnectedTo.Add(3938, new Location(14, 18));
      mappedMaps151.ConnectedTo.Add(3940, new Location(67, 65));
      this.AutoWalkMaps.Add(mappedMaps151.Number, mappedMaps151);
      MappedMaps mappedMaps152 = new MappedMaps();
      mappedMaps152.Number = 3938;
      mappedMaps152.Default = new Location(11, 13);
      mappedMaps152.ConnectedTo.Add(3926, new Location(19, 13));
      this.AutoWalkMaps.Add(mappedMaps152.Number, mappedMaps152);
      MappedMaps mappedMaps153 = new MappedMaps();
      mappedMaps153.Number = 3935;
      mappedMaps153.Default = new Location(9, 14);
      mappedMaps153.ConnectedTo.Add(3926, new Location(9, 19));
      this.AutoWalkMaps.Add(mappedMaps153.Number, mappedMaps153);
      MappedMaps mappedMaps154 = new MappedMaps();
      mappedMaps154.Number = 3940;
      mappedMaps154.Default = new Location(9, 14);
      mappedMaps154.ConnectedTo.Add(3926, new Location(19, 13));
      this.AutoWalkMaps.Add(mappedMaps154.Number, mappedMaps154);
      MappedMaps mappedMaps155 = new MappedMaps();
      mappedMaps155.Number = 2052;
      mappedMaps155.ConnectedTo.Add(542, new Location(11, 19));
      mappedMaps155.ConnectedTo.Add(6628, new Location(11, 19));
      mappedMaps155.ConnectedTo.Add(3012, new Location(11, 19));
      mappedMaps155.ConnectedTo.Add(3271, new Location(11, 19));
      mappedMaps155.ConnectedTo.Add(3071, new Location(11, 19));
      mappedMaps155.ConnectedTo.Add(2046, new Location(10, 0));
      mappedMaps155.ConnectedTo.Add(8499, new Location(19, 9));
      this.AutoWalkMaps.Add(mappedMaps155.Number, mappedMaps155);
      MappedMaps mappedMaps156 = new MappedMaps();
      mappedMaps156.Number = 8499;
      mappedMaps156.Default = new Location(10, 15);
      mappedMaps156.ConnectedTo.Add(2052, new Location(12, 29));
      this.AutoWalkMaps.Add(mappedMaps156.Number, mappedMaps156);
      MappedMaps mappedMaps157 = new MappedMaps();
      mappedMaps157.Number = 2046;
      mappedMaps157.ConnectedTo.Add(2049, new Location(99, 42));
      mappedMaps157.ConnectedTo.Add(2052, new Location(58, 99));
      this.AutoWalkMaps.Add(mappedMaps157.Number, mappedMaps157);
      MappedMaps mappedMaps158 = new MappedMaps();
      mappedMaps158.Number = 2049;
      mappedMaps158.ConnectedTo.Add(5098, new Location(93, 12));
      mappedMaps158.ConnectedTo.Add(2046, new Location(0, 42));
      this.AutoWalkMaps.Add(mappedMaps158.Number, mappedMaps158);
      MappedMaps mappedMaps159 = new MappedMaps();
      mappedMaps159.Number = 5098;
      mappedMaps159.ConnectedTo.Add(5101, new Location(2, 2));
      mappedMaps159.ConnectedTo.Add(2049, new Location(19, 4));
      this.AutoWalkMaps.Add(mappedMaps159.Number, mappedMaps159);
      MappedMaps mappedMaps160 = new MappedMaps();
      mappedMaps160.Number = 5101;
      mappedMaps160.ConnectedTo.Add(5001, new Location(0, 4));
      mappedMaps160.ConnectedTo.Add(5098, new Location(2, 1));
      this.AutoWalkMaps.Add(mappedMaps160.Number, mappedMaps160);
      MappedMaps mappedMaps161 = new MappedMaps();
      mappedMaps161.Number = 5001;
      mappedMaps161.Default = new Location(70, 20);
      mappedMaps161.ConnectedTo.Add(5002, new Location(73, 45));
      mappedMaps161.ConnectedTo.Add(5101, new Location(63, 18));
      this.AutoWalkMaps.Add(mappedMaps161.Number, mappedMaps161);
      MappedMaps mappedMaps162 = new MappedMaps();
      mappedMaps162.Number = 5002;
      mappedMaps162.ConnectedTo.Add(5003, new Location(51, 37));
      mappedMaps162.ConnectedTo.Add(5001, new Location(73, 45));
      this.AutoWalkMaps.Add(mappedMaps162.Number, mappedMaps162);
      MappedMaps mappedMaps163 = new MappedMaps();
      mappedMaps163.Number = 5003;
      mappedMaps163.ConnectedTo.Add(5004, new Location(38, 63));
      mappedMaps163.ConnectedTo.Add(5002, new Location(51, 40));
      this.AutoWalkMaps.Add(mappedMaps163.Number, mappedMaps163);
      MappedMaps mappedMaps164 = new MappedMaps();
      mappedMaps164.Number = 5004;
      mappedMaps164.ConnectedTo.Add(5005, new Location(7, 81));
      mappedMaps164.ConnectedTo.Add(5003, new Location(38, 63));
      this.AutoWalkMaps.Add(mappedMaps164.Number, mappedMaps164);
      MappedMaps mappedMaps165 = new MappedMaps();
      mappedMaps165.Number = 5005;
      mappedMaps165.ConnectedTo.Add(5006, new Location(37, 63));
      mappedMaps165.ConnectedTo.Add(5004, new Location(4, 81));
      this.AutoWalkMaps.Add(mappedMaps165.Number, mappedMaps165);
      MappedMaps mappedMaps166 = new MappedMaps();
      mappedMaps166.Number = 5006;
      mappedMaps166.ConnectedTo.Add(5007, new Location(45, 34));
      mappedMaps166.ConnectedTo.Add(5005, new Location(37, 63));
      this.AutoWalkMaps.Add(mappedMaps166.Number, mappedMaps166);
      MappedMaps mappedMaps167 = new MappedMaps();
      mappedMaps167.Number = 5007;
      mappedMaps167.ConnectedTo.Add(5008, new Location(46, 53));
      mappedMaps167.ConnectedTo.Add(5006, new Location(46, 22));
      this.AutoWalkMaps.Add(mappedMaps167.Number, mappedMaps167);
      MappedMaps mappedMaps168 = new MappedMaps();
      mappedMaps168.Number = 5008;
      mappedMaps168.ConnectedTo.Add(5009, new Location(73, 43));
      mappedMaps168.ConnectedTo.Add(5007, new Location(46, 53));
      this.AutoWalkMaps.Add(mappedMaps168.Number, mappedMaps168);
      MappedMaps mappedMaps169 = new MappedMaps();
      mappedMaps169.Number = 5009;
      mappedMaps169.ConnectedTo.Add(5010, new Location(59, 15));
      mappedMaps169.ConnectedTo.Add(5008, new Location(46, 72));
      this.AutoWalkMaps.Add(mappedMaps169.Number, mappedMaps169);
      MappedMaps mappedMaps170 = new MappedMaps();
      mappedMaps170.Number = 5010;
      mappedMaps170.ConnectedTo.Add(5011, new Location(56, 47));
      mappedMaps170.ConnectedTo.Add(5009, new Location(59, 16));
      this.AutoWalkMaps.Add(mappedMaps170.Number, mappedMaps170);
      MappedMaps mappedMaps171 = new MappedMaps();
      mappedMaps171.Number = 5011;
      mappedMaps171.ConnectedTo.Add(5012, new Location(69, 30));
      mappedMaps171.ConnectedTo.Add(5010, new Location(56, 47));
      this.AutoWalkMaps.Add(mappedMaps171.Number, mappedMaps171);
      MappedMaps mappedMaps172 = new MappedMaps();
      mappedMaps172.Number = 5012;
      mappedMaps172.ConnectedTo.Add(5013, new Location(84, 5));
      mappedMaps172.ConnectedTo.Add(5011, new Location(69, 30));
      this.AutoWalkMaps.Add(mappedMaps172.Number, mappedMaps172);
      MappedMaps mappedMaps173 = new MappedMaps();
      mappedMaps173.Number = 5013;
      mappedMaps173.ConnectedTo.Add(5014, new Location(60, 5));
      mappedMaps173.ConnectedTo.Add(5012, new Location(84, 5));
      this.AutoWalkMaps.Add(mappedMaps173.Number, mappedMaps173);
      MappedMaps mappedMaps174 = new MappedMaps();
      mappedMaps174.Number = 5014;
      mappedMaps174.ConnectedTo.Add(5015, new Location(78, 8));
      mappedMaps174.ConnectedTo.Add(5013, new Location(60, 5));
      this.AutoWalkMaps.Add(mappedMaps174.Number, mappedMaps174);
      MappedMaps mappedMaps175 = new MappedMaps();
      mappedMaps175.Number = 5015;
      mappedMaps175.ConnectedTo.Add(5016, new Location(50, 9));
      mappedMaps175.ConnectedTo.Add(5014, new Location(78, 8));
      this.AutoWalkMaps.Add(mappedMaps175.Number, mappedMaps175);
      MappedMaps mappedMaps176 = new MappedMaps();
      mappedMaps176.Number = 5016;
      mappedMaps176.ConnectedTo.Add(5017, new Location(9, 85));
      mappedMaps176.ConnectedTo.Add(5015, new Location(36, 14));
      this.AutoWalkMaps.Add(mappedMaps176.Number, mappedMaps176);
      MappedMaps mappedMaps177 = new MappedMaps();
      mappedMaps177.Number = 5017;
      mappedMaps177.ConnectedTo.Add(5018, new Location(6, 47));
      mappedMaps177.ConnectedTo.Add(5016, new Location(20, 81));
      this.AutoWalkMaps.Add(mappedMaps177.Number, mappedMaps177);
      MappedMaps mappedMaps178 = new MappedMaps();
      mappedMaps178.Number = 5018;
      mappedMaps178.ConnectedTo.Add(5019, new Location(6, 45));
      mappedMaps178.ConnectedTo.Add(5017, new Location(6, 21));
      this.AutoWalkMaps.Add(mappedMaps178.Number, mappedMaps178);
      MappedMaps mappedMaps179 = new MappedMaps();
      mappedMaps179.Number = 5019;
      mappedMaps179.ConnectedTo.Add(5020, new Location(37, 16));
      mappedMaps179.ConnectedTo.Add(5018, new Location(3, 45));
      this.AutoWalkMaps.Add(mappedMaps179.Number, mappedMaps179);
      MappedMaps mappedMaps180 = new MappedMaps();
      mappedMaps180.Number = 5020;
      mappedMaps180.ConnectedTo.Add(5021, new Location(12, 24));
      mappedMaps180.ConnectedTo.Add(5019, new Location(43, 25));
      this.AutoWalkMaps.Add(mappedMaps180.Number, mappedMaps180);
      MappedMaps mappedMaps181 = new MappedMaps();
      mappedMaps181.Number = 5021;
      mappedMaps181.ConnectedTo.Add(5022, new Location(4, 53));
      mappedMaps181.ConnectedTo.Add(5020, new Location(12, 28));
      this.AutoWalkMaps.Add(mappedMaps181.Number, mappedMaps181);
      MappedMaps mappedMaps182 = new MappedMaps();
      mappedMaps182.Number = 5022;
      mappedMaps182.ConnectedTo.Add(5023, new Location(26, 57));
      mappedMaps182.ConnectedTo.Add(5021, new Location(1, 53));
      this.AutoWalkMaps.Add(mappedMaps182.Number, mappedMaps182);
      MappedMaps mappedMaps183 = new MappedMaps();
      mappedMaps183.Number = 5023;
      mappedMaps183.ConnectedTo.Add(5024, new Location(68, 54));
      mappedMaps183.ConnectedTo.Add(5022, new Location(26, 57));
      this.AutoWalkMaps.Add(mappedMaps183.Number, mappedMaps183);
      MappedMaps mappedMaps184 = new MappedMaps();
      mappedMaps184.Number = 5024;
      mappedMaps184.ConnectedTo.Add(5025, new Location(56, 73));
      mappedMaps184.ConnectedTo.Add(5023, new Location(68, 54));
      this.AutoWalkMaps.Add(mappedMaps184.Number, mappedMaps184);
      MappedMaps mappedMaps185 = new MappedMaps();
      mappedMaps185.Number = 5025;
      mappedMaps185.ConnectedTo.Add(5026, new Location(66, 33));
      mappedMaps185.ConnectedTo.Add(5024, new Location(69, 63));
      this.AutoWalkMaps.Add(mappedMaps185.Number, mappedMaps185);
      MappedMaps mappedMaps186 = new MappedMaps();
      mappedMaps186.Number = 5026;
      mappedMaps186.ConnectedTo.Add(5027, new Location(30, 30));
      mappedMaps186.ConnectedTo.Add(5025, new Location(79, 28));
      this.AutoWalkMaps.Add(mappedMaps186.Number, mappedMaps186);
      MappedMaps mappedMaps187 = new MappedMaps();
      mappedMaps187.Number = 5027;
      mappedMaps187.ConnectedTo.Add(5028, new Location(60, 63));
      mappedMaps187.ConnectedTo.Add(5026, new Location(29, 25));
      this.AutoWalkMaps.Add(mappedMaps187.Number, mappedMaps187);
      MappedMaps mappedMaps188 = new MappedMaps();
      mappedMaps188.Number = 5028;
      mappedMaps188.ConnectedTo.Add(5029, new Location(50, 13));
      mappedMaps188.ConnectedTo.Add(5027, new Location(60, 63));
      this.AutoWalkMaps.Add(mappedMaps188.Number, mappedMaps188);
      MappedMaps mappedMaps189 = new MappedMaps();
      mappedMaps189.Number = 5029;
      mappedMaps189.ConnectedTo.Add(5030, new Location(28, 7));
      mappedMaps189.ConnectedTo.Add(5028, new Location(49, 13));
      this.AutoWalkMaps.Add(mappedMaps189.Number, mappedMaps189);
      MappedMaps mappedMaps190 = new MappedMaps();
      mappedMaps190.Number = 5030;
      mappedMaps190.ConnectedTo.Add(5031, new Location(77, 22));
      mappedMaps190.ConnectedTo.Add(5029, new Location(12, 2));
      this.AutoWalkMaps.Add(mappedMaps190.Number, mappedMaps190);
      MappedMaps mappedMaps191 = new MappedMaps();
      mappedMaps191.Number = 5031;
      mappedMaps191.Default = new Location(7, 36);
      mappedMaps191.ConnectedTo.Add(5030, new Location(1, 39));
      this.AutoWalkMaps.Add(mappedMaps191.Number, mappedMaps191);
      MappedMaps mappedMaps192 = new MappedMaps();
      mappedMaps192.Number = 4720;
      mappedMaps192.Default = new Location(19, 6);
      mappedMaps192.ConnectedTo.Add(3079, new Location(40, 43));
      this.AutoWalkMaps.Add(mappedMaps192.Number, mappedMaps192);
      MappedMaps mappedMaps193 = new MappedMaps();
      mappedMaps193.Number = 6628;
      mappedMaps193.ConnectedTo.Add(6625, new Location(9, 0));
      mappedMaps193.ConnectedTo.Add(6627, new Location(9, 19));
      mappedMaps193.ConnectedTo.Add(6228, new Location(19, 11));
      mappedMaps193.ConnectedTo.Add(4720, new Location(19, 11));
      this.AutoWalkMaps.Add(mappedMaps193.Number, mappedMaps193);
      MappedMaps mappedMaps194 = new MappedMaps();
      mappedMaps194.Number = 6627;
      mappedMaps194.Default = new Location(7, 7);
      mappedMaps194.ConnectedTo.Add(6628, new Location(65, 0));
      this.AutoWalkMaps.Add(mappedMaps194.Number, mappedMaps194);
      MappedMaps mappedMaps195 = new MappedMaps();
      mappedMaps195.Number = 6625;
      mappedMaps195.Default = new Location(59, 26);
      mappedMaps195.ConnectedTo.Add(6626, new Location(0, 15));
      mappedMaps195.ConnectedTo.Add(6628, new Location(12, 49));
      this.AutoWalkMaps.Add(mappedMaps195.Number, mappedMaps195);
      MappedMaps mappedMaps196 = new MappedMaps();
      mappedMaps196.Number = 6626;
      mappedMaps196.ConnectedTo.Add(6625, new Location(49, 44));
      mappedMaps196.ConnectedTo.Add(7900, new Location(22, 4));
      this.AutoWalkMaps.Add(mappedMaps196.Number, mappedMaps196);
      MappedMaps mappedMaps197 = new MappedMaps();
      mappedMaps197.Number = 7900;
      mappedMaps197.Default = new Location(56, 23);
      this.AutoWalkMaps.Add(mappedMaps197.Number, mappedMaps197);
      MappedMaps mappedMaps198 = new MappedMaps();
      mappedMaps198.Number = 6228;
      mappedMaps198.ConnectedTo.Add(3081, new Location(57, 174));
      mappedMaps198.ConnectedTo.Add(6508, new Location(56, 128));
      mappedMaps198.ConnectedTo.Add(6600, new Location(31, 0));
      mappedMaps198.ConnectedTo.Add(6525, new Location(69, 0));
      mappedMaps198.ConnectedTo.Add(6591, new Location(35, 50));
      mappedMaps198.ConnectedTo.Add(706, new Location(35, 50));
      this.AutoWalkMaps.Add(mappedMaps198.Number, mappedMaps198);
      MappedMaps mappedMaps199 = new MappedMaps();
      mappedMaps199.Number = 6501;
      mappedMaps199.ConnectedTo.Add(6228, new Location(14, 14));
      this.AutoWalkMaps.Add(mappedMaps199.Number, mappedMaps199);
      MappedMaps mappedMaps200 = new MappedMaps();
      mappedMaps200.Number = 6511;
      mappedMaps200.ConnectedTo.Add(6228, new Location(29, 7));
      this.AutoWalkMaps.Add(mappedMaps200.Number, mappedMaps200);
      MappedMaps mappedMaps201 = new MappedMaps();
      mappedMaps201.Number = 6591;
      mappedMaps201.Default = new Location(9, 7);
      this.AutoWalkMaps.Add(mappedMaps201.Number, mappedMaps201);
      MappedMaps mappedMaps202 = new MappedMaps();
      mappedMaps202.Number = 706;
      mappedMaps202.ConnectedTo.Add(710, new Location(16, 0));
      this.AutoWalkMaps.Add(mappedMaps202.Number, mappedMaps202);
      MappedMaps mappedMaps203 = new MappedMaps();
      mappedMaps203.Number = 710;
      mappedMaps203.ConnectedTo.Add(707, new Location(5, 7));
      this.AutoWalkMaps.Add(mappedMaps203.Number, mappedMaps203);
      MappedMaps mappedMaps204 = new MappedMaps();
      mappedMaps204.Number = 707;
      mappedMaps204.ConnectedTo.Add(711, new Location(0, 3));
      this.AutoWalkMaps.Add(mappedMaps204.Number, mappedMaps204);
      MappedMaps mappedMaps205 = new MappedMaps();
      mappedMaps205.Number = 711;
      mappedMaps205.ConnectedTo.Add(708, new Location(9, 0));
      this.AutoWalkMaps.Add(mappedMaps205.Number, mappedMaps205);
      MappedMaps mappedMaps206 = new MappedMaps();
      mappedMaps206.Number = 708;
      mappedMaps206.ConnectedTo.Add(712, new Location(16, 0));
      this.AutoWalkMaps.Add(mappedMaps206.Number, mappedMaps206);
      MappedMaps mappedMaps207 = new MappedMaps();
      mappedMaps207.Number = 712;
      mappedMaps207.ConnectedTo.Add(709, new Location(5, 7));
      this.AutoWalkMaps.Add(mappedMaps207.Number, mappedMaps207);
      MappedMaps mappedMaps208 = new MappedMaps();
      mappedMaps208.Number = 709;
      mappedMaps208.ConnectedTo.Add(713, new Location(0, 3));
      this.AutoWalkMaps.Add(mappedMaps208.Number, mappedMaps208);
      MappedMaps mappedMaps209 = new MappedMaps();
      mappedMaps209.Number = 713;
      mappedMaps209.ConnectedTo.Add(714, new Location(9, 0));
      this.AutoWalkMaps.Add(mappedMaps209.Number, mappedMaps209);
      MappedMaps mappedMaps210 = new MappedMaps();
      mappedMaps210.Number = 714;
      mappedMaps210.ConnectedTo.Add(715, new Location(37, 38));
      this.AutoWalkMaps.Add(mappedMaps210.Number, mappedMaps210);
      MappedMaps mappedMaps211 = new MappedMaps();
      mappedMaps211.Number = 715;
      mappedMaps211.ConnectedTo.Add(716, new Location(29, 1));
      this.AutoWalkMaps.Add(mappedMaps211.Number, mappedMaps211);
      MappedMaps mappedMaps212 = new MappedMaps();
      mappedMaps212.Number = 716;
      this.AutoWalkMaps.Add(mappedMaps212.Number, mappedMaps212);
      MappedMaps mappedMaps213 = new MappedMaps();
      mappedMaps213.Number = 6508;
      mappedMaps213.ConnectedTo.Add(6228, new Location(12, 6));
      mappedMaps213.ConnectedTo.Add(6526, new Location(2, 8));
      this.AutoWalkMaps.Add(mappedMaps213.Number, mappedMaps213);
      MappedMaps mappedMaps214 = new MappedMaps();
      mappedMaps214.Number = 6526;
      mappedMaps214.ConnectedTo.Add(6508, new Location(6, 58));
      mappedMaps214.ConnectedTo.Add(6801, new Location(6, 2));
      this.AutoWalkMaps.Add(mappedMaps214.Number, mappedMaps214);
      MappedMaps mappedMaps215 = new MappedMaps();
      mappedMaps215.Number = 6801;
      mappedMaps215.ConnectedTo.Add(6526, new Location(12, 29));
      mappedMaps215.ConnectedTo.Add(6800, new Location(21, 0));
      this.AutoWalkMaps.Add(mappedMaps215.Number, mappedMaps215);
      MappedMaps mappedMaps216 = new MappedMaps();
      mappedMaps216.Number = 6800;
      mappedMaps216.ConnectedTo.Add(6801, new Location(32, 24));
      mappedMaps216.ConnectedTo.Add(6802, new Location(40, 0));
      this.AutoWalkMaps.Add(mappedMaps216.Number, mappedMaps216);
      MappedMaps mappedMaps217 = new MappedMaps();
      mappedMaps217.Number = 6802;
      mappedMaps217.ConnectedTo.Add(6800, new Location(14, 39));
      mappedMaps217.ConnectedTo.Add(6703, new Location(32, 5));
      this.AutoWalkMaps.Add(mappedMaps217.Number, mappedMaps217);
      MappedMaps mappedMaps218 = new MappedMaps();
      mappedMaps218.Number = 6703;
      mappedMaps218.ConnectedTo.Add(6706, new Location(39, 24));
      this.AutoWalkMaps.Add(mappedMaps218.Number, mappedMaps218);
      MappedMaps mappedMaps219 = new MappedMaps();
      mappedMaps219.Number = 6706;
      mappedMaps219.ConnectedTo.Add(6703, new Location(0, 17));
      mappedMaps219.ConnectedTo.Add(6707, new Location(12, 0));
      this.AutoWalkMaps.Add(mappedMaps219.Number, mappedMaps219);
      MappedMaps mappedMaps220 = new MappedMaps();
      mappedMaps220.Number = 6707;
      mappedMaps220.Default = new Location(13, 32);
      mappedMaps220.ConnectedTo.Add(6706, new Location(13, 39));
      this.AutoWalkMaps.Add(mappedMaps220.Number, mappedMaps220);
      MappedMaps mappedMaps221 = new MappedMaps();
      mappedMaps221.Number = 6600;
      mappedMaps221.Default = new Location(15, 8);
      mappedMaps221.ConnectedTo.Add(6228, new Location(9, 24));
      this.AutoWalkMaps.Add(mappedMaps221.Number, mappedMaps221);
      MappedMaps mappedMaps222 = new MappedMaps();
      mappedMaps222.Number = 6525;
      mappedMaps222.ConnectedTo.Add(6924, new Location(28, 18));
      mappedMaps222.ConnectedTo.Add(6228, new Location(61, 149));
      this.AutoWalkMaps.Add(mappedMaps222.Number, mappedMaps222);
      MappedMaps mappedMaps223 = new MappedMaps();
      mappedMaps223.Number = 6924;
      mappedMaps223.ConnectedTo.Add(6701, new Location(22, 31));
      mappedMaps223.ConnectedTo.Add(6525, new Location(28, 49));
      this.AutoWalkMaps.Add(mappedMaps223.Number, mappedMaps223);
      MappedMaps mappedMaps224 = new MappedMaps();
      mappedMaps224.Number = 6701;
      mappedMaps224.ConnectedTo.Add(6700, new Location(0, 11));
      this.AutoWalkMaps.Add(mappedMaps224.Number, mappedMaps224);
      MappedMaps mappedMaps225 = new MappedMaps();
      mappedMaps225.Number = 6702;
      mappedMaps225.ConnectedTo.Add(6924, new Location(45, 30));
      this.AutoWalkMaps.Add(mappedMaps225.Number, mappedMaps225);
      MappedMaps mappedMaps226 = new MappedMaps();
      mappedMaps226.Number = 6700;
      mappedMaps226.Default = new Location(39, 29);
      mappedMaps226.ConnectedTo.Add(6530, new Location(28, 0));
      mappedMaps226.ConnectedTo.Add(6702, new Location(33, 69));
      mappedMaps226.ConnectedTo.Add(6718, new Location(44, 25));
      mappedMaps226.ConnectedTo.Add(6716, new Location(50, 25));
      this.AutoWalkMaps.Add(mappedMaps226.Number, mappedMaps226);
      MappedMaps mappedMaps227 = new MappedMaps();
      mappedMaps227.Number = 6718;
      mappedMaps227.ConnectedTo.Add(6700, new Location(10, 19));
      this.AutoWalkMaps.Add(mappedMaps227.Number, mappedMaps227);
      MappedMaps mappedMaps228 = new MappedMaps();
      mappedMaps228.Number = 6716;
      mappedMaps228.ConnectedTo.Add(6700, new Location(9, 19));
      this.AutoWalkMaps.Add(mappedMaps228.Number, mappedMaps228);
      MappedMaps mappedMaps229 = new MappedMaps();
      mappedMaps229.Number = 6530;
      mappedMaps229.ConnectedTo.Add(6531, new Location(10, 0));
      mappedMaps229.ConnectedTo.Add(6532, new Location(74, 50));
      mappedMaps229.ConnectedTo.Add(6700, new Location(40, 74));
      this.AutoWalkMaps.Add(mappedMaps229.Number, mappedMaps229);
      MappedMaps mappedMaps230 = new MappedMaps();
      mappedMaps230.Number = 6531;
      mappedMaps230.ConnectedTo.Add(6533, new Location(74, 3));
      mappedMaps230.ConnectedTo.Add(6547, new Location(0, 20));
      mappedMaps230.ConnectedTo.Add(6530, new Location(19, 74));
      this.AutoWalkMaps.Add(mappedMaps230.Number, mappedMaps230);
      MappedMaps mappedMaps231 = new MappedMaps();
      mappedMaps231.Number = 6533;
      mappedMaps231.ConnectedTo.Add(6537, new Location(23, 14));
      mappedMaps231.ConnectedTo.Add(6532, new Location(70, 74));
      mappedMaps231.ConnectedTo.Add(6552, new Location(50, 0));
      mappedMaps231.ConnectedTo.Add(6531, new Location(0, 44));
      this.AutoWalkMaps.Add(mappedMaps231.Number, mappedMaps231);
      MappedMaps mappedMaps232 = new MappedMaps();
      mappedMaps232.Number = 6532;
      mappedMaps232.ConnectedTo.Add(6530, new Location(0, 57));
      mappedMaps232.ConnectedTo.Add(6542, new Location(71, 42));
      mappedMaps232.ConnectedTo.Add(6533, new Location(12, 0));
      this.AutoWalkMaps.Add(mappedMaps232.Number, mappedMaps232);
      MappedMaps mappedMaps233 = new MappedMaps();
      mappedMaps233.Number = 6537;
      mappedMaps233.Default = new Location(57, 5);
      mappedMaps233.ConnectedTo.Add(6563, new Location(60, 0));
      mappedMaps233.ConnectedTo.Add(6535, new Location(0, 5));
      mappedMaps233.ConnectedTo.Add(6536, new Location(15, 74));
      mappedMaps233.ConnectedTo.Add(6533, new Location(23, 15));
      this.AutoWalkMaps.Add(mappedMaps233.Number, mappedMaps233);
      MappedMaps mappedMaps234 = new MappedMaps();
      mappedMaps234.Number = 6535;
      mappedMaps234.ConnectedTo.Add(6539, new Location(4, 4));
      mappedMaps234.ConnectedTo.Add(6534, new Location(20, 74));
      mappedMaps234.ConnectedTo.Add(6537, new Location(74, 9));
      this.AutoWalkMaps.Add(mappedMaps234.Number, mappedMaps234);
      MappedMaps mappedMaps235 = new MappedMaps();
      mappedMaps235.Number = 6536;
      mappedMaps235.ConnectedTo.Add(6537, new Location(16, 0));
      this.AutoWalkMaps.Add(mappedMaps235.Number, mappedMaps235);
      MappedMaps mappedMaps236 = new MappedMaps();
      mappedMaps236.Number = 6534;
      mappedMaps236.Default = new Location(8, 44);
      mappedMaps236.ConnectedTo.Add(6557, new Location(0, 40));
      mappedMaps236.ConnectedTo.Add(6535, new Location(21, 0));
      mappedMaps236.ConnectedTo.Add(6536, new Location(74, 18));
      this.AutoWalkMaps.Add(mappedMaps236.Number, mappedMaps236);
      MappedMaps mappedMaps237 = new MappedMaps();
      mappedMaps237.Number = 6539;
      mappedMaps237.ConnectedTo.Add(6599, new Location(30, 0));
      mappedMaps237.ConnectedTo.Add(6535, new Location(3, 5));
      mappedMaps237.ConnectedTo.Add(6538, new Location(54, 74));
      this.AutoWalkMaps.Add(mappedMaps237.Number, mappedMaps237);
      MappedMaps mappedMaps238 = new MappedMaps();
      mappedMaps238.Number = 6538;
      mappedMaps238.ConnectedTo.Add(6569, new Location(54, 73));
      mappedMaps238.ConnectedTo.Add(6540, new Location(74, 17));
      mappedMaps238.ConnectedTo.Add(6539, new Location(54, 0));
      this.AutoWalkMaps.Add(mappedMaps238.Number, mappedMaps238);
      MappedMaps mappedMaps239 = new MappedMaps();
      mappedMaps239.Number = 6540;
      mappedMaps239.ConnectedTo.Add(6541, new Location(3, 0));
      mappedMaps239.ConnectedTo.Add(6538, new Location(0, 17));
      this.AutoWalkMaps.Add(mappedMaps239.Number, mappedMaps239);
      MappedMaps mappedMaps240 = new MappedMaps();
      mappedMaps240.Number = 6541;
      mappedMaps240.ConnectedTo.Add(6575, new Location(72, 8));
      mappedMaps240.ConnectedTo.Add(6540, new Location(2, 74));
      this.AutoWalkMaps.Add(mappedMaps240.Number, mappedMaps240);
      MappedMaps mappedMaps241 = new MappedMaps();
      mappedMaps241.Number = 6599;
      mappedMaps241.Default = new Location(10, 13);
      mappedMaps241.ConnectedTo.Add(6539, new Location(12, 39));
      this.AutoWalkMaps.Add(mappedMaps241.Number, mappedMaps241);
      MappedMaps mappedMaps242 = new MappedMaps();
      mappedMaps242.Number = 6542;
      mappedMaps242.ConnectedTo.Add(6544, new Location(36, 0));
      mappedMaps242.ConnectedTo.Add(6532, new Location(5, 29));
      this.AutoWalkMaps.Add(mappedMaps242.Number, mappedMaps242);
      MappedMaps mappedMaps243 = new MappedMaps();
      mappedMaps243.Number = 6544;
      mappedMaps243.ConnectedTo.Add(6545, new Location(69, 51));
      mappedMaps243.ConnectedTo.Add(6542, new Location(33, 89));
      this.AutoWalkMaps.Add(mappedMaps243.Number, mappedMaps243);
      MappedMaps mappedMaps244 = new MappedMaps();
      mappedMaps244.Number = 6545;
      mappedMaps244.ConnectedTo.Add(6546, new Location(36, 89));
      mappedMaps244.ConnectedTo.Add(6544, new Location(0, 51));
      this.AutoWalkMaps.Add(mappedMaps244.Number, mappedMaps244);
      MappedMaps mappedMaps245 = new MappedMaps();
      mappedMaps245.Number = 6546;
      mappedMaps245.ConnectedTo.Add(6545, new Location(33, 0));
      this.AutoWalkMaps.Add(mappedMaps245.Number, mappedMaps245);
      MappedMaps mappedMaps246 = new MappedMaps();
      mappedMaps246.Number = 6552;
      mappedMaps246.ConnectedTo.Add(6553, new Location(35, 0));
      mappedMaps246.ConnectedTo.Add(6533, new Location(35, 69));
      this.AutoWalkMaps.Add(mappedMaps246.Number, mappedMaps246);
      MappedMaps mappedMaps247 = new MappedMaps();
      mappedMaps247.Number = 6553;
      mappedMaps247.ConnectedTo.Add(6554, new Location(35, 0));
      mappedMaps247.ConnectedTo.Add(6552, new Location(35, 69));
      this.AutoWalkMaps.Add(mappedMaps247.Number, mappedMaps247);
      MappedMaps mappedMaps248 = new MappedMaps();
      mappedMaps248.Number = 6554;
      mappedMaps248.ConnectedTo.Add(6555, new Location(0, 50));
      this.AutoWalkMaps.Add(mappedMaps248.Number, mappedMaps248);
      MappedMaps mappedMaps249 = new MappedMaps();
      mappedMaps249.Number = 6555;
      mappedMaps249.ConnectedTo.Add(6556, new Location(32, 89));
      this.AutoWalkMaps.Add(mappedMaps249.Number, mappedMaps249);
      MappedMaps mappedMaps250 = new MappedMaps();
      mappedMaps250.Number = 6556;
      mappedMaps250.ConnectedTo.Add(6553, new Location(69, 30));
      this.AutoWalkMaps.Add(mappedMaps250.Number, mappedMaps250);
      MappedMaps mappedMaps251 = new MappedMaps();
      mappedMaps251.Number = 6547;
      mappedMaps251.ConnectedTo.Add(6548, new Location(56, 0));
      mappedMaps251.ConnectedTo.Add(6531, new Location(89, 66));
      this.AutoWalkMaps.Add(mappedMaps251.Number, mappedMaps251);
      MappedMaps mappedMaps252 = new MappedMaps();
      mappedMaps252.Number = 6548;
      mappedMaps252.ConnectedTo.Add(6549, new Location(56, 0));
      mappedMaps252.ConnectedTo.Add(6547, new Location(56, 69));
      this.AutoWalkMaps.Add(mappedMaps252.Number, mappedMaps252);
      MappedMaps mappedMaps253 = new MappedMaps();
      mappedMaps253.Number = 6549;
      mappedMaps253.ConnectedTo.Add(6550, new Location(89, 50));
      mappedMaps253.ConnectedTo.Add(6548, new Location(53, 89));
      this.AutoWalkMaps.Add(mappedMaps253.Number, mappedMaps253);
      MappedMaps mappedMaps254 = new MappedMaps();
      mappedMaps254.Number = 6550;
      mappedMaps254.ConnectedTo.Add(6551, new Location(36, 89));
      mappedMaps254.ConnectedTo.Add(6549, new Location(0, 52));
      this.AutoWalkMaps.Add(mappedMaps254.Number, mappedMaps254);
      MappedMaps mappedMaps255 = new MappedMaps();
      mappedMaps255.Number = 6551;
      mappedMaps255.ConnectedTo.Add(6550, new Location(33, 0));
      this.AutoWalkMaps.Add(mappedMaps255.Number, mappedMaps255);
      MappedMaps mappedMaps256 = new MappedMaps();
      mappedMaps256.Number = 6563;
      mappedMaps256.ConnectedTo.Add(6564, new Location(21, 0));
      mappedMaps256.ConnectedTo.Add(6537, new Location(12, 44));
      this.AutoWalkMaps.Add(mappedMaps256.Number, mappedMaps256);
      MappedMaps mappedMaps257 = new MappedMaps();
      mappedMaps257.Number = 6564;
      mappedMaps257.ConnectedTo.Add(6565, new Location(49, 22));
      mappedMaps257.ConnectedTo.Add(6563, new Location(12, 44));
      this.AutoWalkMaps.Add(mappedMaps257.Number, mappedMaps257);
      MappedMaps mappedMaps258 = new MappedMaps();
      mappedMaps258.Number = 6565;
      mappedMaps258.ConnectedTo.Add(6566, new Location(10, 44));
      mappedMaps258.ConnectedTo.Add(6564, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps258.Number, mappedMaps258);
      MappedMaps mappedMaps259 = new MappedMaps();
      mappedMaps259.Number = 6566;
      mappedMaps259.ConnectedTo.Add(6567, new Location(49, 31));
      mappedMaps259.ConnectedTo.Add(6565, new Location(11, 0));
      this.AutoWalkMaps.Add(mappedMaps259.Number, mappedMaps259);
      MappedMaps mappedMaps260 = new MappedMaps();
      mappedMaps260.Number = 6567;
      mappedMaps260.ConnectedTo.Add(6568, new Location(48, 16));
      mappedMaps260.ConnectedTo.Add(6566, new Location(0, 23));
      this.AutoWalkMaps.Add(mappedMaps260.Number, mappedMaps260);
      MappedMaps mappedMaps261 = new MappedMaps();
      mappedMaps261.Number = 6568;
      mappedMaps261.ConnectedTo.Add(6597, new Location(21, 0));
      mappedMaps261.ConnectedTo.Add(6567, new Location(0, 14));
      this.AutoWalkMaps.Add(mappedMaps261.Number, mappedMaps261);
      MappedMaps mappedMaps262 = new MappedMaps();
      mappedMaps262.Number = 6597;
      mappedMaps262.Default = new Location(10, 13);
      mappedMaps262.ConnectedTo.Add(6568, new Location(12, 39));
      this.AutoWalkMaps.Add(mappedMaps262.Number, mappedMaps262);
      MappedMaps mappedMaps263 = new MappedMaps();
      mappedMaps263.Number = 6557;
      mappedMaps263.ConnectedTo.Add(6558, new Location(11, 0));
      mappedMaps263.ConnectedTo.Add(6534, new Location(49, 31));
      this.AutoWalkMaps.Add(mappedMaps263.Number, mappedMaps263);
      MappedMaps mappedMaps264 = new MappedMaps();
      mappedMaps264.Number = 6558;
      mappedMaps264.ConnectedTo.Add(6559, new Location(21, 0));
      mappedMaps264.ConnectedTo.Add(6557, new Location(12, 44));
      this.AutoWalkMaps.Add(mappedMaps264.Number, mappedMaps264);
      MappedMaps mappedMaps265 = new MappedMaps();
      mappedMaps265.Number = 6559;
      mappedMaps265.ConnectedTo.Add(6560, new Location(49, 22));
      mappedMaps265.ConnectedTo.Add(6558, new Location(12, 44));
      this.AutoWalkMaps.Add(mappedMaps265.Number, mappedMaps265);
      MappedMaps mappedMaps266 = new MappedMaps();
      mappedMaps266.Number = 6560;
      mappedMaps266.ConnectedTo.Add(6561, new Location(10, 44));
      mappedMaps266.ConnectedTo.Add(6559, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps266.Number, mappedMaps266);
      MappedMaps mappedMaps267 = new MappedMaps();
      mappedMaps267.Number = 6561;
      mappedMaps267.ConnectedTo.Add(6562, new Location(0, 14));
      mappedMaps267.ConnectedTo.Add(6560, new Location(21, 0));
      this.AutoWalkMaps.Add(mappedMaps267.Number, mappedMaps267);
      MappedMaps mappedMaps268 = new MappedMaps();
      mappedMaps268.Number = 6562;
      mappedMaps268.ConnectedTo.Add(6598, new Location(0, 23));
      mappedMaps268.ConnectedTo.Add(6561, new Location(48, 16));
      this.AutoWalkMaps.Add(mappedMaps268.Number, mappedMaps268);
      MappedMaps mappedMaps269 = new MappedMaps();
      mappedMaps269.Number = 6598;
      mappedMaps269.Default = new Location(8, 12);
      mappedMaps269.ConnectedTo.Add(6562, new Location(19, 33));
      this.AutoWalkMaps.Add(mappedMaps269.Number, mappedMaps269);
      MappedMaps mappedMaps270 = new MappedMaps();
      mappedMaps270.Number = 6575;
      mappedMaps270.ConnectedTo.Add(6576, new Location(10, 44));
      mappedMaps270.ConnectedTo.Add(6541, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps270.Number, mappedMaps270);
      MappedMaps mappedMaps271 = new MappedMaps();
      mappedMaps271.Number = 6576;
      mappedMaps271.ConnectedTo.Add(6577, new Location(0, 14));
      mappedMaps271.ConnectedTo.Add(6575, new Location(21, 0));
      this.AutoWalkMaps.Add(mappedMaps271.Number, mappedMaps271);
      MappedMaps mappedMaps272 = new MappedMaps();
      mappedMaps272.Number = 6577;
      mappedMaps272.ConnectedTo.Add(6578, new Location(0, 23));
      mappedMaps272.ConnectedTo.Add(6576, new Location(48, 16));
      this.AutoWalkMaps.Add(mappedMaps272.Number, mappedMaps272);
      MappedMaps mappedMaps273 = new MappedMaps();
      mappedMaps273.Number = 6578;
      mappedMaps273.ConnectedTo.Add(6579, new Location(11, 0));
      mappedMaps273.ConnectedTo.Add(6577, new Location(49, 31));
      this.AutoWalkMaps.Add(mappedMaps273.Number, mappedMaps273);
      MappedMaps mappedMaps274 = new MappedMaps();
      mappedMaps274.Number = 6579;
      mappedMaps274.ConnectedTo.Add(6580, new Location(21, 0));
      mappedMaps274.ConnectedTo.Add(6578, new Location(12, 44));
      this.AutoWalkMaps.Add(mappedMaps274.Number, mappedMaps274);
      MappedMaps mappedMaps275 = new MappedMaps();
      mappedMaps275.Number = 6580;
      mappedMaps275.ConnectedTo.Add(6596, new Location(49, 22));
      mappedMaps275.ConnectedTo.Add(6579, new Location(12, 44));
      this.AutoWalkMaps.Add(mappedMaps275.Number, mappedMaps275);
      MappedMaps mappedMaps276 = new MappedMaps();
      mappedMaps276.Number = 6596;
      mappedMaps276.Default = new Location(11, 12);
      mappedMaps276.ConnectedTo.Add(6580, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps276.Number, mappedMaps276);
      MappedMaps mappedMaps277 = new MappedMaps();
      mappedMaps277.Number = 6569;
      mappedMaps277.ConnectedTo.Add(6570, new Location(12, 44));
      mappedMaps277.ConnectedTo.Add(6538, new Location(21, 0));
      this.AutoWalkMaps.Add(mappedMaps277.Number, mappedMaps277);
      MappedMaps mappedMaps278 = new MappedMaps();
      mappedMaps278.Number = 6570;
      mappedMaps278.ConnectedTo.Add(6571, new Location(49, 31));
      mappedMaps278.ConnectedTo.Add(6569, new Location(11, 0));
      this.AutoWalkMaps.Add(mappedMaps278.Number, mappedMaps278);
      MappedMaps mappedMaps279 = new MappedMaps();
      mappedMaps279.Number = 6571;
      mappedMaps279.ConnectedTo.Add(6572, new Location(10, 44));
      mappedMaps279.ConnectedTo.Add(6570, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps279.Number, mappedMaps279);
      MappedMaps mappedMaps280 = new MappedMaps();
      mappedMaps280.Number = 6572;
      mappedMaps280.ConnectedTo.Add(6573, new Location(0, 14));
      mappedMaps280.ConnectedTo.Add(6571, new Location(21, 0));
      this.AutoWalkMaps.Add(mappedMaps280.Number, mappedMaps280);
      MappedMaps mappedMaps281 = new MappedMaps();
      mappedMaps281.Number = 6573;
      mappedMaps281.ConnectedTo.Add(6574, new Location(0, 23));
      mappedMaps281.ConnectedTo.Add(6572, new Location(49, 16));
      this.AutoWalkMaps.Add(mappedMaps281.Number, mappedMaps281);
      MappedMaps mappedMaps282 = new MappedMaps();
      mappedMaps282.Number = 6574;
      mappedMaps282.ConnectedTo.Add(6595, new Location(12, 44));
      mappedMaps282.ConnectedTo.Add(6573, new Location(49, 22));
      this.AutoWalkMaps.Add(mappedMaps282.Number, mappedMaps282);
      MappedMaps mappedMaps283 = new MappedMaps();
      mappedMaps283.Number = 6595;
      mappedMaps283.Default = new Location(9, 15);
      mappedMaps283.ConnectedTo.Add(6574, new Location(23, 0));
      this.AutoWalkMaps.Add(mappedMaps283.Number, mappedMaps283);
      MappedMaps mappedMaps284 = new MappedMaps();
      mappedMaps284.Number = 542;
      mappedMaps284.ConnectedTo.Add(3012, new Location(14, 24));
      mappedMaps284.ConnectedTo.Add(6628, new Location(14, 24));
      mappedMaps284.ConnectedTo.Add(2052, new Location(14, 24));
      mappedMaps284.ConnectedTo.Add(3071, new Location(14, 24));
      mappedMaps284.ConnectedTo.Add(565, new Location(8, 0));
      this.AutoWalkMaps.Add(mappedMaps284.Number, mappedMaps284);
      MappedMaps mappedMaps285 = new MappedMaps();
      mappedMaps285.Number = 565;
      mappedMaps285.ConnectedTo.Add(564, new Location(27, 0));
      mappedMaps285.ConnectedTo.Add(542, new Location(39, 99));
      this.AutoWalkMaps.Add(mappedMaps285.Number, mappedMaps285);
      MappedMaps mappedMaps286 = new MappedMaps();
      mappedMaps286.Number = 564;
      mappedMaps286.ConnectedTo.Add(543, new Location(44, 0));
      mappedMaps286.ConnectedTo.Add(565, new Location(44, 99));
      this.AutoWalkMaps.Add(mappedMaps286.Number, mappedMaps286);
      MappedMaps mappedMaps287 = new MappedMaps();
      mappedMaps287.Number = 543;
      mappedMaps287.ConnectedTo.Add(544, new Location(77, 0));
      mappedMaps287.ConnectedTo.Add(564, new Location(58, 99));
      this.AutoWalkMaps.Add(mappedMaps287.Number, mappedMaps287);
      MappedMaps mappedMaps288 = new MappedMaps();
      mappedMaps288.Number = 544;
      mappedMaps288.ConnectedTo.Add(545, new Location(99, 23));
      mappedMaps288.ConnectedTo.Add(543, new Location(87, 99));
      this.AutoWalkMaps.Add(mappedMaps288.Number, mappedMaps288);
      MappedMaps mappedMaps289 = new MappedMaps();
      mappedMaps289.Number = 545;
      mappedMaps289.ConnectedTo.Add(546, new Location(99, 51));
      mappedMaps289.ConnectedTo.Add(544, new Location(0, 35));
      mappedMaps289.ConnectedTo.Add(991, new Location(42, 99));
      this.AutoWalkMaps.Add(mappedMaps289.Number, mappedMaps289);
      MappedMaps mappedMaps290 = new MappedMaps();
      mappedMaps290.Number = 991;
      mappedMaps290.Default = new Location(10, 21);
      mappedMaps290.ConnectedTo.Add(545, new Location(19, 0));
      this.AutoWalkMaps.Add(mappedMaps290.Number, mappedMaps290);
      MappedMaps mappedMaps291 = new MappedMaps();
      mappedMaps291.Number = 546;
      mappedMaps291.ConnectedTo.Add(547, new Location(27, 0));
      mappedMaps291.ConnectedTo.Add(545, new Location(0, 9));
      this.AutoWalkMaps.Add(mappedMaps291.Number, mappedMaps291);
      MappedMaps mappedMaps292 = new MappedMaps();
      mappedMaps292.Number = 547;
      mappedMaps292.ConnectedTo.Add(551, new Location(0, 10));
      mappedMaps292.ConnectedTo.Add(546, new Location(29, 49));
      this.AutoWalkMaps.Add(mappedMaps292.Number, mappedMaps292);
      MappedMaps mappedMaps293 = new MappedMaps();
      mappedMaps293.Number = 551;
      mappedMaps293.Default = new Location(43, 28);
      mappedMaps293.ConnectedTo.Add(550, new Location(8, 0));
      mappedMaps293.ConnectedTo.Add(547, new Location(49, 25));
      this.AutoWalkMaps.Add(mappedMaps293.Number, mappedMaps293);
      MappedMaps mappedMaps294 = new MappedMaps();
      mappedMaps294.Number = 550;
      mappedMaps294.ConnectedTo.Add(554, new Location(19, 0));
      mappedMaps294.ConnectedTo.Add(551, new Location(30, 49));
      this.AutoWalkMaps.Add(mappedMaps294.Number, mappedMaps294);
      MappedMaps mappedMaps295 = new MappedMaps();
      mappedMaps295.Number = 554;
      mappedMaps295.ConnectedTo.Add(548, new Location(18, 0));
      mappedMaps295.ConnectedTo.Add(550, new Location(28, 49));
      this.AutoWalkMaps.Add(mappedMaps295.Number, mappedMaps295);
      MappedMaps mappedMaps296 = new MappedMaps();
      mappedMaps296.Number = 548;
      mappedMaps296.ConnectedTo.Add(553, new Location(19, 0));
      mappedMaps296.ConnectedTo.Add(554, new Location(25, 49));
      this.AutoWalkMaps.Add(mappedMaps296.Number, mappedMaps296);
      MappedMaps mappedMaps297 = new MappedMaps();
      mappedMaps297.Number = 553;
      mappedMaps297.ConnectedTo.Add(548, new Location(21, 49));
      mappedMaps297.ConnectedTo.Add(1006, new Location(15, 37));
      mappedMaps297.ConnectedTo.Add(552, new Location(0, 10));
      this.AutoWalkMaps.Add(mappedMaps297.Number, mappedMaps297);
      MappedMaps mappedMaps298 = new MappedMaps();
      mappedMaps298.Number = 1006;
      mappedMaps298.Default = new Location(7, 9);
      mappedMaps298.ConnectedTo.Add(553, new Location(9, 5));
      this.AutoWalkMaps.Add(mappedMaps298.Number, mappedMaps298);
      MappedMaps mappedMaps299 = new MappedMaps();
      mappedMaps299.Number = 552;
      mappedMaps299.ConnectedTo.Add(553, new Location(49, 28));
      mappedMaps299.ConnectedTo.Add(558, new Location(31, 49));
      this.AutoWalkMaps.Add(mappedMaps299.Number, mappedMaps299);
      MappedMaps mappedMaps300 = new MappedMaps();
      mappedMaps300.Number = 558;
      mappedMaps300.ConnectedTo.Add(552, new Location(28, 0));
      mappedMaps300.ConnectedTo.Add(559, new Location(34, 49));
      this.AutoWalkMaps.Add(mappedMaps300.Number, mappedMaps300);
      MappedMaps mappedMaps301 = new MappedMaps();
      mappedMaps301.Number = 559;
      mappedMaps301.Default = new Location(42, 26);
      mappedMaps301.ConnectedTo.Add(562, new Location(49, 29));
      mappedMaps301.ConnectedTo.Add(558, new Location(33, 0));
      mappedMaps301.ConnectedTo.Add(998, new Location(41, 49));
      this.AutoWalkMaps.Add(mappedMaps301.Number, mappedMaps301);
      MappedMaps mappedMaps302 = new MappedMaps();
      mappedMaps302.Number = 998;
      mappedMaps302.Default = new Location(38, 26);
      mappedMaps302.ConnectedTo.Add(559, new Location(27, 0));
      this.AutoWalkMaps.Add(mappedMaps302.Number, mappedMaps302);
      MappedMaps mappedMaps303 = new MappedMaps();
      mappedMaps303.Number = 562;
      mappedMaps303.ConnectedTo.Add(561, new Location(24, 49));
      mappedMaps303.ConnectedTo.Add(559, new Location(0, 10));
      mappedMaps303.ConnectedTo.Add(563, new Location(27, 0));
      this.AutoWalkMaps.Add(mappedMaps303.Number, mappedMaps303);
      MappedMaps mappedMaps304 = new MappedMaps();
      mappedMaps304.Number = 563;
      mappedMaps304.ConnectedTo.Add(996, new Location(19, 0));
      mappedMaps304.ConnectedTo.Add(562, new Location(33, 49));
      this.AutoWalkMaps.Add(mappedMaps304.Number, mappedMaps304);
      MappedMaps mappedMaps305 = new MappedMaps();
      mappedMaps305.Number = 996;
      mappedMaps305.ConnectedTo.Add(997, new Location(99, 15));
      mappedMaps305.ConnectedTo.Add(563, new Location(39, 99));
      this.AutoWalkMaps.Add(mappedMaps305.Number, mappedMaps305);
      MappedMaps mappedMaps306 = new MappedMaps();
      mappedMaps306.Number = 997;
      mappedMaps306.Default = new Location(42, 29);
      mappedMaps306.ConnectedTo.Add(996, new Location(0, 11));
      this.AutoWalkMaps.Add(mappedMaps306.Number, mappedMaps306);
      MappedMaps mappedMaps307 = new MappedMaps();
      mappedMaps307.Number = 561;
      mappedMaps307.ConnectedTo.Add(556, new Location(33, 49));
      mappedMaps307.ConnectedTo.Add(562, new Location(26, 0));
      this.AutoWalkMaps.Add(mappedMaps307.Number, mappedMaps307);
      MappedMaps mappedMaps308 = new MappedMaps();
      mappedMaps308.Number = 556;
      mappedMaps308.ConnectedTo.Add(560, new Location(25, 49));
      mappedMaps308.ConnectedTo.Add(561, new Location(19, 0));
      this.AutoWalkMaps.Add(mappedMaps308.Number, mappedMaps308);
      MappedMaps mappedMaps309 = new MappedMaps();
      mappedMaps309.Number = 560;
      mappedMaps309.ConnectedTo.Add(557, new Location(0, 10));
      mappedMaps309.ConnectedTo.Add(556, new Location(13, 0));
      this.AutoWalkMaps.Add(mappedMaps309.Number, mappedMaps309);
      MappedMaps mappedMaps310 = new MappedMaps();
      mappedMaps310.Number = 557;
      mappedMaps310.ConnectedTo.Add(555, new Location(26, 49));
      mappedMaps310.ConnectedTo.Add(1007, new Location(16, 20));
      mappedMaps310.ConnectedTo.Add(560, new Location(49, 30));
      this.AutoWalkMaps.Add(mappedMaps310.Number, mappedMaps310);
      MappedMaps mappedMaps311 = new MappedMaps();
      mappedMaps311.Number = 999;
      mappedMaps311.ConnectedTo.Add(557, new Location(49, 26));
      this.AutoWalkMaps.Add(mappedMaps311.Number, mappedMaps311);
      MappedMaps mappedMaps312 = new MappedMaps();
      mappedMaps312.Number = 1007;
      mappedMaps312.Default = new Location(7, 1);
      mappedMaps312.ConnectedTo.Add(557, new Location(9, 5));
      this.AutoWalkMaps.Add(mappedMaps312.Number, mappedMaps312);
      MappedMaps mappedMaps313 = new MappedMaps();
      mappedMaps313.Number = 555;
      mappedMaps313.ConnectedTo.Add(993, new Location(29, 49));
      mappedMaps313.ConnectedTo.Add(557, new Location(13, 0));
      this.AutoWalkMaps.Add(mappedMaps313.Number, mappedMaps313);
      MappedMaps mappedMaps314 = new MappedMaps();
      mappedMaps314.Number = 993;
      mappedMaps314.ConnectedTo.Add(989, new Location(0, 35));
      mappedMaps314.ConnectedTo.Add(555, new Location(43, 0));
      this.AutoWalkMaps.Add(mappedMaps314.Number, mappedMaps314);
      MappedMaps mappedMaps315 = new MappedMaps();
      mappedMaps315.Number = 989;
      mappedMaps315.Default = new Location(42, 40);
      mappedMaps315.ConnectedTo.Add(993, new Location(99, 46));
      this.AutoWalkMaps.Add(mappedMaps315.Number, mappedMaps315);
      MappedMaps mappedMaps316 = new MappedMaps();
      mappedMaps316.Number = 3008;
      mappedMaps316.ConnectedTo.Add(504, new Location(0, 18));
      mappedMaps316.ConnectedTo.Add(502, new Location(15, 15));
      this.AutoWalkMaps.Add(mappedMaps316.Number, mappedMaps316);
      MappedMaps mappedMaps317 = new MappedMaps();
      mappedMaps317.Number = 504;
      mappedMaps317.ConnectedTo.Add(2120, new Location(9, 35));
      mappedMaps317.ConnectedTo.Add(3008, new Location(99, 49));
      mappedMaps317.ConnectedTo.Add(3016, new Location(9, 35));
      mappedMaps317.ConnectedTo.Add(3060, new Location(9, 35));
      mappedMaps317.ConnectedTo.Add(432, new Location(86, 16));
      this.AutoWalkMaps.Add(mappedMaps317.Number, mappedMaps317);
      MappedMaps mappedMaps318 = new MappedMaps();
      mappedMaps318.Number = 432;
      mappedMaps318.Default = new Location(6, 6);
      mappedMaps318.ConnectedTo.Add(504, new Location(6, 11));
      this.AutoWalkMaps.Add(mappedMaps318.Number, mappedMaps318);
      MappedMaps mappedMaps319 = new MappedMaps();
      mappedMaps319.Number = 662;
      mappedMaps319.Default = new Location(9, 35);
      mappedMaps319.ConnectedTo.Add(1960, new Location(40, 50));
      mappedMaps319.ConnectedTo.Add(1966, new Location(29, 12));
      mappedMaps319.ConnectedTo.Add(3012, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(3271, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(2052, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(3081, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(6925, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(3020, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(3071, new Location(22, 99));
      mappedMaps319.ConnectedTo.Add(1247, new Location(73, 10));
      this.AutoWalkMaps.Add(mappedMaps319.Number, mappedMaps319);
      MappedMaps mappedMaps320 = new MappedMaps();
      mappedMaps320.Number = 1960;
      mappedMaps320.Default = new Location(5, 6);
      mappedMaps320.ConnectedTo.Add(662, new Location(6, 13));
      this.AutoWalkMaps.Add(mappedMaps320.Number, mappedMaps320);
      MappedMaps mappedMaps321 = new MappedMaps();
      mappedMaps321.Number = 1963;
      mappedMaps321.ConnectedTo.Add(662, new Location(9, 13));
      this.AutoWalkMaps.Add(mappedMaps321.Number, mappedMaps321);
      MappedMaps mappedMaps322 = new MappedMaps();
      mappedMaps322.Number = 1966;
      mappedMaps322.Default = new Location(8, 7);
      mappedMaps322.ConnectedTo.Add(662, new Location(8, 13));
      this.AutoWalkMaps.Add(mappedMaps322.Number, mappedMaps322);
      MappedMaps mappedMaps323 = new MappedMaps();
      mappedMaps323.Number = 1247;
      mappedMaps323.ConnectedTo.Add(662, new Location(16, 49));
      mappedMaps323.ConnectedTo.Add(2038, new Location(7, 0));
      this.AutoWalkMaps.Add(mappedMaps323.Number, mappedMaps323);
      MappedMaps mappedMaps324 = new MappedMaps();
      mappedMaps324.Number = 2038;
      mappedMaps324.ConnectedTo.Add(2041, new Location(99, 42));
      this.AutoWalkMaps.Add(mappedMaps324.Number, mappedMaps324);
      MappedMaps mappedMaps325 = new MappedMaps();
      mappedMaps325.Number = 2041;
      mappedMaps325.ConnectedTo.Add(6946, new Location(64, 3));
      this.AutoWalkMaps.Add(mappedMaps325.Number, mappedMaps325);
      MappedMaps mappedMaps326 = new MappedMaps();
      mappedMaps326.Number = 6946;
      mappedMaps326.ConnectedTo.Add(2053, new Location(11, 0));
      this.AutoWalkMaps.Add(mappedMaps326.Number, mappedMaps326);
      MappedMaps mappedMaps327 = new MappedMaps();
      mappedMaps327.Number = 2053;
      mappedMaps327.ConnectedTo.Add(2054, new Location(53, 0));
      this.AutoWalkMaps.Add(mappedMaps327.Number, mappedMaps327);
      MappedMaps mappedMaps328 = new MappedMaps();
      mappedMaps328.Number = 2054;
      mappedMaps328.ConnectedTo.Add(2055, new Location(53, 0));
      this.AutoWalkMaps.Add(mappedMaps328.Number, mappedMaps328);
      MappedMaps mappedMaps329 = new MappedMaps();
      mappedMaps329.Number = 2055;
      mappedMaps329.ConnectedTo.Add(2056, new Location(9, 0));
      this.AutoWalkMaps.Add(mappedMaps329.Number, mappedMaps329);
      MappedMaps mappedMaps330 = new MappedMaps();
      mappedMaps330.Number = 2056;
      mappedMaps330.ConnectedTo.Add(2051, new Location(52, 42));
      mappedMaps330.ConnectedTo.Add(6001, new Location(43, 0));
      this.AutoWalkMaps.Add(mappedMaps330.Number, mappedMaps330);
      MappedMaps mappedMaps331 = new MappedMaps();
      mappedMaps331.Number = 2051;
      mappedMaps331.Default = new Location(8, 10);
      mappedMaps331.ConnectedTo.Add(2056, new Location(8, 19));
      this.AutoWalkMaps.Add(mappedMaps331.Number, mappedMaps331);
      MappedMaps mappedMaps332 = new MappedMaps();
      mappedMaps332.Number = 6001;
      mappedMaps332.ConnectedTo.Add(6000, new Location(0, 1));
      this.AutoWalkMaps.Add(mappedMaps332.Number, mappedMaps332);
      MappedMaps mappedMaps333 = new MappedMaps();
      mappedMaps333.Number = 6000;
      mappedMaps333.ConnectedTo.Add(6002, new Location(12, 12));
      this.AutoWalkMaps.Add(mappedMaps333.Number, mappedMaps333);
      MappedMaps mappedMaps334 = new MappedMaps();
      mappedMaps334.Number = 6002;
      mappedMaps334.Default = new Location(27, 3);
      this.AutoWalkMaps.Add(mappedMaps334.Number, mappedMaps334);
      MappedMaps mappedMaps335 = new MappedMaps();
      mappedMaps335.Number = 3016;
      mappedMaps335.ConnectedTo.Add(503, new Location(16, 15));
      mappedMaps335.ConnectedTo.Add(504, new Location(16, 0));
      mappedMaps335.ConnectedTo.Add(2120, new Location(16, 0));
      mappedMaps335.ConnectedTo.Add(3060, new Location(16, 0));
      this.AutoWalkMaps.Add(mappedMaps335.Number, mappedMaps335);
      MappedMaps mappedMaps336 = new MappedMaps();
      mappedMaps336.Number = 503;
      mappedMaps336.ConnectedTo.Add(950, new Location(32, 54));
      mappedMaps336.ConnectedTo.Add(410, new Location(11, 54));
      mappedMaps336.ConnectedTo.Add(3016, new Location(40, 0));
      this.AutoWalkMaps.Add(mappedMaps336.Number, mappedMaps336);
      MappedMaps mappedMaps337 = new MappedMaps();
      mappedMaps337.Number = 950;
      mappedMaps337.Default = new Location(5, 6);
      mappedMaps337.ConnectedTo.Add(503, new Location(5, 11));
      this.AutoWalkMaps.Add(mappedMaps337.Number, mappedMaps337);
      MappedMaps mappedMaps338 = new MappedMaps();
      mappedMaps338.Number = 410;
      mappedMaps338.Default = new Location(11, 10);
      mappedMaps338.ConnectedTo.Add(503, new Location(7, 14));
      this.AutoWalkMaps.Add(mappedMaps338.Number, mappedMaps338);
      MappedMaps mappedMaps339 = new MappedMaps();
      mappedMaps339.Number = 3060;
      mappedMaps339.ConnectedTo.Add(3016, new Location(9, 10));
      mappedMaps339.ConnectedTo.Add(504, new Location(9, 10));
      mappedMaps339.ConnectedTo.Add(3061, new Location(0, 4));
      this.AutoWalkMaps.Add(mappedMaps339.Number, mappedMaps339);
      MappedMaps mappedMaps340 = new MappedMaps();
      mappedMaps340.Number = 3061;
      mappedMaps340.ConnectedTo.Add(3064, new Location(0, 28));
      mappedMaps340.ConnectedTo.Add(3060, new Location(39, 34));
      this.AutoWalkMaps.Add(mappedMaps340.Number, mappedMaps340);
      MappedMaps mappedMaps341 = new MappedMaps();
      mappedMaps341.Number = 3064;
      mappedMaps341.Default = new Location(24, 13);
      mappedMaps341.ConnectedTo.Add(3061, new Location(39, 8));
      this.AutoWalkMaps.Add(mappedMaps341.Number, mappedMaps341);
      MappedMaps mappedMaps342 = new MappedMaps();
      mappedMaps342.Number = 2120;
      mappedMaps342.ConnectedTo.Add(504, new Location(39, 8));
      mappedMaps342.ConnectedTo.Add(3016, new Location(39, 8));
      mappedMaps342.ConnectedTo.Add(2088, new Location(0, 6));
      this.AutoWalkMaps.Add(mappedMaps342.Number, mappedMaps342);
      MappedMaps mappedMaps343 = new MappedMaps();
      mappedMaps343.Number = 2088;
      mappedMaps343.ConnectedTo.Add(2089, new Location(7, 0));
      mappedMaps343.ConnectedTo.Add(2120, new Location(14, 34));
      this.AutoWalkMaps.Add(mappedMaps343.Number, mappedMaps343);
      MappedMaps mappedMaps344 = new MappedMaps();
      mappedMaps344.Number = 2089;
      mappedMaps344.ConnectedTo.Add(2090, new Location(19, 10));
      mappedMaps344.ConnectedTo.Add(2088, new Location(12, 19));
      this.AutoWalkMaps.Add(mappedMaps344.Number, mappedMaps344);
      MappedMaps mappedMaps345 = new MappedMaps();
      mappedMaps345.Number = 2090;
      mappedMaps345.ConnectedTo.Add(2091, new Location(99, 82));
      mappedMaps345.ConnectedTo.Add(2089, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps345.Number, mappedMaps345);
      MappedMaps mappedMaps346 = new MappedMaps();
      mappedMaps346.Number = 2091;
      mappedMaps346.ConnectedTo.Add(2092, new Location(99, 21));
      mappedMaps346.ConnectedTo.Add(2090, new Location(0, 49));
      this.AutoWalkMaps.Add(mappedMaps346.Number, mappedMaps346);
      MappedMaps mappedMaps347 = new MappedMaps();
      mappedMaps347.Number = 2092;
      mappedMaps347.ConnectedTo.Add(2093, new Location(99, 69));
      mappedMaps347.ConnectedTo.Add(2102, new Location(82, 0));
      mappedMaps347.ConnectedTo.Add(2091, new Location(0, 49));
      this.AutoWalkMaps.Add(mappedMaps347.Number, mappedMaps347);
      MappedMaps mappedMaps348 = new MappedMaps();
      mappedMaps348.Number = 2102;
      mappedMaps348.ConnectedTo.Add(2103, new Location(6, 0));
      mappedMaps348.ConnectedTo.Add(2092, new Location(7, 39));
      this.AutoWalkMaps.Add(mappedMaps348.Number, mappedMaps348);
      MappedMaps mappedMaps349 = new MappedMaps();
      mappedMaps349.Number = 2103;
      mappedMaps349.ConnectedTo.Add(2104, new Location(52, 0));
      mappedMaps349.ConnectedTo.Add(2102, new Location(54, 99));
      this.AutoWalkMaps.Add(mappedMaps349.Number, mappedMaps349);
      MappedMaps mappedMaps350 = new MappedMaps();
      mappedMaps350.Number = 2104;
      mappedMaps350.Default = new Location(5, 7);
      mappedMaps350.ConnectedTo.Add(2105, new Location(0, 12));
      mappedMaps350.ConnectedTo.Add(2108, new Location(19, 9));
      mappedMaps350.ConnectedTo.Add(2103, new Location(11, 19));
      this.AutoWalkMaps.Add(mappedMaps350.Number, mappedMaps350);
      MappedMaps mappedMaps351 = new MappedMaps();
      mappedMaps351.Number = 2108;
      mappedMaps351.ConnectedTo.Add(2109, new Location(19, 9));
      mappedMaps351.ConnectedTo.Add(2104, new Location(0, 10));
      this.AutoWalkMaps.Add(mappedMaps351.Number, mappedMaps351);
      MappedMaps mappedMaps352 = new MappedMaps();
      mappedMaps352.Number = 2109;
      mappedMaps352.ConnectedTo.Add(2110, new Location(19, 9));
      mappedMaps352.ConnectedTo.Add(2108, new Location(0, 9));
      this.AutoWalkMaps.Add(mappedMaps352.Number, mappedMaps352);
      MappedMaps mappedMaps353 = new MappedMaps();
      mappedMaps353.Number = 2110;
      mappedMaps353.ConnectedTo.Add(2073, new Location(46, 12));
      mappedMaps353.ConnectedTo.Add(2109, new Location(0, 75));
      this.AutoWalkMaps.Add(mappedMaps353.Number, mappedMaps353);
      MappedMaps mappedMaps354 = new MappedMaps();
      mappedMaps354.Number = 2073;
      mappedMaps354.Default = new Location(10, 10);
      mappedMaps354.ConnectedTo.Add(2074, new Location(6, 0));
      this.AutoWalkMaps.Add(mappedMaps354.Number, mappedMaps354);
      MappedMaps mappedMaps355 = new MappedMaps();
      mappedMaps355.Number = 2105;
      mappedMaps355.ConnectedTo.Add(2106, new Location(0, 11));
      mappedMaps355.ConnectedTo.Add(2104, new Location(19, 13));
      this.AutoWalkMaps.Add(mappedMaps355.Number, mappedMaps355);
      MappedMaps mappedMaps356 = new MappedMaps();
      mappedMaps356.Number = 2106;
      mappedMaps356.ConnectedTo.Add(2107, new Location(0, 11));
      mappedMaps356.ConnectedTo.Add(2105, new Location(19, 10));
      this.AutoWalkMaps.Add(mappedMaps356.Number, mappedMaps356);
      MappedMaps mappedMaps357 = new MappedMaps();
      mappedMaps357.Number = 2107;
      mappedMaps357.ConnectedTo.Add(2060, new Location(0, 77));
      mappedMaps357.ConnectedTo.Add(2106, new Location(99, 47));
      this.AutoWalkMaps.Add(mappedMaps357.Number, mappedMaps357);
      MappedMaps mappedMaps358 = new MappedMaps();
      mappedMaps358.Number = 2060;
      mappedMaps358.Default = new Location(10, 10);
      mappedMaps358.ConnectedTo.Add(2107, new Location(19, 9));
      this.AutoWalkMaps.Add(mappedMaps358.Number, mappedMaps358);
      MappedMaps mappedMaps359 = new MappedMaps();
      mappedMaps359.Number = 2061;
      mappedMaps359.ConnectedTo.Add(2060, new Location(19, 9));
      this.AutoWalkMaps.Add(mappedMaps359.Number, mappedMaps359);
      MappedMaps mappedMaps360 = new MappedMaps();
      mappedMaps360.Number = 2064;
      mappedMaps360.ConnectedTo.Add(2061, new Location(19, 9));
      this.AutoWalkMaps.Add(mappedMaps360.Number, mappedMaps360);
      MappedMaps mappedMaps361 = new MappedMaps();
      mappedMaps361.Number = 2093;
      mappedMaps361.ConnectedTo.Add(2094, new Location(99, 45));
      mappedMaps361.ConnectedTo.Add(2092, new Location(0, 77));
      this.AutoWalkMaps.Add(mappedMaps361.Number, mappedMaps361);
      MappedMaps mappedMaps362 = new MappedMaps();
      mappedMaps362.Number = 2094;
      mappedMaps362.ConnectedTo.Add(2095, new Location(99, 45));
      mappedMaps362.ConnectedTo.Add(2093, new Location(0, 43));
      this.AutoWalkMaps.Add(mappedMaps362.Number, mappedMaps362);
      MappedMaps mappedMaps363 = new MappedMaps();
      mappedMaps363.Number = 2095;
      mappedMaps363.ConnectedTo.Add(2096, new Location(49, 0));
      mappedMaps363.ConnectedTo.Add(2099, new Location(55, 99));
      mappedMaps363.ConnectedTo.Add(2094, new Location(0, 41));
      this.AutoWalkMaps.Add(mappedMaps363.Number, mappedMaps363);
      MappedMaps mappedMaps364 = new MappedMaps();
      mappedMaps364.Number = 2096;
      mappedMaps364.Default = new Location(8, 8);
      mappedMaps364.ConnectedTo.Add(2097, new Location(5, 0));
      mappedMaps364.ConnectedTo.Add(2095, new Location(7, 39));
      this.AutoWalkMaps.Add(mappedMaps364.Number, mappedMaps364);
      MappedMaps mappedMaps365 = new MappedMaps();
      mappedMaps365.Number = 2099;
      mappedMaps365.Default = new Location(6, 30);
      mappedMaps365.ConnectedTo.Add(2095, new Location(6, 0));
      this.AutoWalkMaps.Add(mappedMaps365.Number, mappedMaps365);
      MappedMaps mappedMaps366 = new MappedMaps();
      mappedMaps366.Number = 2097;
      mappedMaps366.ConnectedTo.Add(2098, new Location(35, 0));
      mappedMaps366.ConnectedTo.Add(2096, new Location(77, 99));
      this.AutoWalkMaps.Add(mappedMaps366.Number, mappedMaps366);
      MappedMaps mappedMaps367 = new MappedMaps();
      mappedMaps367.Number = 2098;
      mappedMaps367.ConnectedTo.Add(2083, new Location(47, 99));
      mappedMaps367.ConnectedTo.Add(2097, new Location(77, 99));
      this.AutoWalkMaps.Add(mappedMaps367.Number, mappedMaps367);
      MappedMaps mappedMaps368 = new MappedMaps();
      mappedMaps368.Number = 2083;
      mappedMaps368.ConnectedTo.Add(2084, new Location(19, 17));
      this.AutoWalkMaps.Add(mappedMaps368.Number, mappedMaps368);
      MappedMaps mappedMaps369 = new MappedMaps();
      mappedMaps369.Number = 2084;
      mappedMaps369.ConnectedTo.Add(2085, new Location(17, 6));
      this.AutoWalkMaps.Add(mappedMaps369.Number, mappedMaps369);
      MappedMaps mappedMaps370 = new MappedMaps();
      mappedMaps370.Number = 2085;
      mappedMaps370.ConnectedTo.Add(2086, new Location(19, 11));
      this.AutoWalkMaps.Add(mappedMaps370.Number, mappedMaps370);
      MappedMaps mappedMaps371 = new MappedMaps();
      mappedMaps371.Number = 2086;
      mappedMaps371.ConnectedTo.Add(2087, new Location(8, 19));
      this.AutoWalkMaps.Add(mappedMaps371.Number, mappedMaps371);
      MappedMaps mappedMaps372 = new MappedMaps();
      mappedMaps372.Number = 2087;
      mappedMaps372.Default = new Location(8, 7);
      this.AutoWalkMaps.Add(mappedMaps372.Number, mappedMaps372);
      MappedMaps mappedMaps373 = new MappedMaps();
      mappedMaps373.Number = 10028;
      mappedMaps373.ConnectedTo.Add(10008, new Location(41, 0));
      this.AutoWalkMaps.Add(mappedMaps373.Number, mappedMaps373);
      MappedMaps mappedMaps374 = new MappedMaps();
      mappedMaps374.Number = 10008;
      mappedMaps374.ConnectedTo.Add(10009, new Location(43, 0));
      this.AutoWalkMaps.Add(mappedMaps374.Number, mappedMaps374);
      MappedMaps mappedMaps375 = new MappedMaps();
      mappedMaps375.Number = 10009;
      mappedMaps375.ConnectedTo.Add(10000, new Location(33, 12));
      this.AutoWalkMaps.Add(mappedMaps375.Number, mappedMaps375);
      MappedMaps mappedMaps376 = new MappedMaps();
      mappedMaps376.Number = 10000;
      mappedMaps376.ConnectedTo.Add(10999, new Location(30, 32));
      mappedMaps376.ConnectedTo.Add(10006, new Location(9, 39));
      this.AutoWalkMaps.Add(mappedMaps376.Number, mappedMaps376);
      MappedMaps mappedMaps377 = new MappedMaps();
      mappedMaps377.Number = 10001;
      mappedMaps377.ConnectedTo.Add(10000, new Location(11, 14));
      this.AutoWalkMaps.Add(mappedMaps377.Number, mappedMaps377);
      MappedMaps mappedMaps378 = new MappedMaps();
      mappedMaps378.Number = 10004;
      mappedMaps378.ConnectedTo.Add(10000, new Location(10, 14));
      this.AutoWalkMaps.Add(mappedMaps378.Number, mappedMaps378);
      MappedMaps mappedMaps379 = new MappedMaps();
      mappedMaps379.Number = 10006;
      mappedMaps379.Default = new Location(6, 7);
      mappedMaps379.ConnectedTo.Add(10000, new Location(11, 6));
      this.AutoWalkMaps.Add(mappedMaps379.Number, mappedMaps379);
      MappedMaps mappedMaps380 = new MappedMaps();
      mappedMaps380.Number = 10999;
      mappedMaps380.ConnectedTo.Add(10000, new Location(5, 6));
      mappedMaps380.ConnectedTo.Add(10055, new Location(5, 6));
      mappedMaps380.ConnectedTo.Add(6997, new Location(5, 6));
      mappedMaps380.ConnectedTo.Add(10265, new Location(5, 6));
      mappedMaps380.ConnectedTo.Add(8995, new Location(5, 6));
      mappedMaps380.ConnectedTo.Add(8300, new Location(5, 6));
      mappedMaps380.ConnectedTo.Add(9378, new Location(5, 6));
      this.AutoWalkMaps.Add(mappedMaps380.Number, mappedMaps380);
      MappedMaps mappedMaps381 = new MappedMaps();
      mappedMaps381.Number = 10998;
      mappedMaps381.ConnectedTo.Add(10055, new Location(5, 6));
      mappedMaps381.ConnectedTo.Add(6997, new Location(5, 6));
      mappedMaps381.ConnectedTo.Add(10265, new Location(5, 6));
      mappedMaps381.ConnectedTo.Add(8995, new Location(5, 6));
      mappedMaps381.ConnectedTo.Add(8300, new Location(5, 6));
      mappedMaps381.ConnectedTo.Add(9378, new Location(5, 6));
      this.AutoWalkMaps.Add(mappedMaps381.Number, mappedMaps381);
      MappedMaps mappedMaps382 = new MappedMaps();
      mappedMaps382.Number = 3950;
      mappedMaps382.ConnectedTo.Add(10000, new Location(10, 19));
      mappedMaps382.ConnectedTo.Add(10055, new Location(10, 19));
      mappedMaps382.ConnectedTo.Add(6997, new Location(10, 19));
      mappedMaps382.ConnectedTo.Add(10265, new Location(10, 19));
      mappedMaps382.ConnectedTo.Add(8995, new Location(10, 19));
      mappedMaps382.ConnectedTo.Add(8300, new Location(10, 19));
      mappedMaps382.ConnectedTo.Add(9378, new Location(10, 19));
      this.AutoWalkMaps.Add(mappedMaps382.Number, mappedMaps382);
      MappedMaps mappedMaps383 = new MappedMaps();
      mappedMaps383.Number = 10055;
      mappedMaps383.ConnectedTo.Add(10034, new Location(0, 19));
      mappedMaps383.ConnectedTo.Add(1960, new Location(45, 25));
      mappedMaps383.ConnectedTo.Add(10999, new Location(45, 25));
      mappedMaps383.ConnectedTo.Add(10039, new Location(47, 0));
      mappedMaps383.ConnectedTo.Add(10061, new Location(22, 43));
      this.AutoWalkMaps.Add(mappedMaps383.Number, mappedMaps383);
      MappedMaps mappedMaps384 = new MappedMaps();
      mappedMaps384.Number = 10061;
      mappedMaps384.Default = new Location(8, 8);
      mappedMaps384.ConnectedTo.Add(10055, new Location(14, 6));
      this.AutoWalkMaps.Add(mappedMaps384.Number, mappedMaps384);
      MappedMaps mappedMaps385 = new MappedMaps();
      mappedMaps385.Number = 10034;
      mappedMaps385.ConnectedTo.Add(10038, new Location(34, 0));
      mappedMaps385.ConnectedTo.Add(10055, new Location(49, 9));
      this.AutoWalkMaps.Add(mappedMaps385.Number, mappedMaps385);
      MappedMaps mappedMaps386 = new MappedMaps();
      mappedMaps386.Number = 10038;
      mappedMaps386.ConnectedTo.Add(10101, new Location(21, 38));
      mappedMaps386.ConnectedTo.Add(10034, new Location(34, 49));
      this.AutoWalkMaps.Add(mappedMaps386.Number, mappedMaps386);
      MappedMaps mappedMaps387 = new MappedMaps();
      mappedMaps387.Number = 10039;
      mappedMaps387.ConnectedTo.Add(10042, new Location(20, 0));
      this.AutoWalkMaps.Add(mappedMaps387.Number, mappedMaps387);
      MappedMaps mappedMaps388 = new MappedMaps();
      mappedMaps388.Number = 10042;
      mappedMaps388.ConnectedTo.Add(10046, new Location(11, 0));
      this.AutoWalkMaps.Add(mappedMaps388.Number, mappedMaps388);
      MappedMaps mappedMaps389 = new MappedMaps();
      mappedMaps389.Number = 10046;
      mappedMaps389.Default = new Location(11, 41);
      this.AutoWalkMaps.Add(mappedMaps389.Number, mappedMaps389);
      MappedMaps mappedMaps390 = new MappedMaps();
      mappedMaps390.Number = 10101;
      mappedMaps390.Default = new Location(21, 8);
      mappedMaps390.ConnectedTo.Add(10102, new Location(22, 1));
      mappedMaps390.ConnectedTo.Add(10038, new Location(20, 38));
      this.AutoWalkMaps.Add(mappedMaps390.Number, mappedMaps390);
      MappedMaps mappedMaps391 = new MappedMaps();
      mappedMaps391.Number = 6997;
      mappedMaps391.ConnectedTo.Add(6998, new Location(16, 9));
      mappedMaps391.ConnectedTo.Add(10000, new Location(17, 34));
      mappedMaps391.ConnectedTo.Add(10055, new Location(17, 34));
      mappedMaps391.ConnectedTo.Add(10265, new Location(17, 34));
      mappedMaps391.ConnectedTo.Add(8995, new Location(17, 34));
      mappedMaps391.ConnectedTo.Add(8300, new Location(17, 34));
      this.AutoWalkMaps.Add(mappedMaps391.Number, mappedMaps391);
      MappedMaps mappedMaps392 = new MappedMaps();
      mappedMaps392.Number = 6998;
      mappedMaps392.Default = new Location(18, 13);
      mappedMaps392.ConnectedTo.Add(6998, new Location(11, 26));
      this.AutoWalkMaps.Add(mappedMaps392.Number, mappedMaps392);
      MappedMaps mappedMaps393 = new MappedMaps();
      mappedMaps393.Number = 10265;
      mappedMaps393.Default = new Location(10, 72);
      mappedMaps393.ConnectedTo.Add(10998, new Location(87, 46));
      mappedMaps393.ConnectedTo.Add(11021, new Location(18, 0));
      mappedMaps393.ConnectedTo.Add(10266, new Location(23, 46));
      this.AutoWalkMaps.Add(mappedMaps393.Number, mappedMaps393);
      MappedMaps mappedMaps394 = new MappedMaps();
      mappedMaps394.Number = 10266;
      mappedMaps394.Default = new Location(19, 27);
      mappedMaps394.ConnectedTo.Add(10265, new Location(25, 27));
      this.AutoWalkMaps.Add(mappedMaps394.Number, mappedMaps394);
      MappedMaps mappedMaps395 = new MappedMaps();
      mappedMaps395.Number = 11021;
      mappedMaps395.ConnectedTo.Add(10265, new Location(10, 46));
      this.AutoWalkMaps.Add(mappedMaps395.Number, mappedMaps395);
      MappedMaps mappedMaps396 = new MappedMaps();
      mappedMaps396.Number = 8995;
      mappedMaps396.Default = new Location(44, 35);
      mappedMaps396.ConnectedTo.Add(10000, new Location(45, 28));
      mappedMaps396.ConnectedTo.Add(10055, new Location(45, 28));
      mappedMaps396.ConnectedTo.Add(6997, new Location(45, 28));
      mappedMaps396.ConnectedTo.Add(10265, new Location(45, 28));
      mappedMaps396.ConnectedTo.Add(8300, new Location(45, 28));
      mappedMaps396.ConnectedTo.Add(8994, new Location(0, 74));
      mappedMaps396.ConnectedTo.Add(8993, new Location(79, 12));
      mappedMaps396.ConnectedTo.Add(8989, new Location(0, 34));
      mappedMaps396.ConnectedTo.Add(8987, new Location(4, 0));
      mappedMaps396.ConnectedTo.Add(8984, new Location(28, 0));
      this.AutoWalkMaps.Add(mappedMaps396.Number, mappedMaps396);
      MappedMaps mappedMaps397 = new MappedMaps();
      mappedMaps397.Number = 8994;
      mappedMaps397.Default = new Location(9, 20);
      mappedMaps397.ConnectedTo.Add(8995, new Location(99, 24));
      this.AutoWalkMaps.Add(mappedMaps397.Number, mappedMaps397);
      MappedMaps mappedMaps398 = new MappedMaps();
      mappedMaps398.Number = 8993;
      mappedMaps398.Default = new Location(21, 10);
      mappedMaps398.ConnectedTo.Add(8992, new Location(48, 49));
      mappedMaps398.ConnectedTo.Add(8995, new Location(26, 99));
      this.AutoWalkMaps.Add(mappedMaps398.Number, mappedMaps398);
      MappedMaps mappedMaps399 = new MappedMaps();
      mappedMaps399.Number = 8992;
      mappedMaps399.Default = new Location(14, 24);
      this.AutoWalkMaps.Add(mappedMaps399.Number, mappedMaps399);
      MappedMaps mappedMaps400 = new MappedMaps();
      mappedMaps400.Number = 8989;
      mappedMaps400.Default = new Location(12, 9);
      mappedMaps400.ConnectedTo.Add(8995, new Location(49, 94));
      mappedMaps400.ConnectedTo.Add(8988, new Location(45, 2));
      this.AutoWalkMaps.Add(mappedMaps400.Number, mappedMaps400);
      MappedMaps mappedMaps401 = new MappedMaps();
      mappedMaps401.Number = 8988;
      this.AutoWalkMaps.Add(mappedMaps401.Number, mappedMaps401);
      MappedMaps mappedMaps402 = new MappedMaps();
      mappedMaps402.Number = 8987;
      mappedMaps402.Default = new Location(9, 9);
      mappedMaps402.ConnectedTo.Add(8995, new Location(99, 1));
      this.AutoWalkMaps.Add(mappedMaps402.Number, mappedMaps402);
      MappedMaps mappedMaps403 = new MappedMaps();
      mappedMaps403.Number = 8984;
      mappedMaps403.Default = new Location(14, 7);
      mappedMaps403.ConnectedTo.Add(8995, new Location(78, 99));
      this.AutoWalkMaps.Add(mappedMaps403.Number, mappedMaps403);
      MappedMaps mappedMaps404 = new MappedMaps();
      mappedMaps404.Number = 8300;
      mappedMaps404.Default = new Location(123, 33);
      mappedMaps404.ConnectedTo.Add(8301, new Location(129, 33));
      mappedMaps404.ConnectedTo.Add(10000, new Location(59, 48));
      mappedMaps404.ConnectedTo.Add(10055, new Location(59, 48));
      mappedMaps404.ConnectedTo.Add(6997, new Location(59, 48));
      mappedMaps404.ConnectedTo.Add(10265, new Location(59, 48));
      mappedMaps404.ConnectedTo.Add(8995, new Location(59, 48));
      mappedMaps404.ConnectedTo.Add(8296, new Location(40, 107));
      mappedMaps404.ConnectedTo.Add(8295, new Location(93, 8));
      mappedMaps404.ConnectedTo.Add(8299, new Location(8, 38));
      this.AutoWalkMaps.Add(mappedMaps404.Number, mappedMaps404);
      MappedMaps mappedMaps405 = new MappedMaps();
      mappedMaps405.Number = 8299;
      mappedMaps405.Default = new Location(11, 7);
      mappedMaps405.ConnectedTo.Add(8300, new Location(16, 8));
      this.AutoWalkMaps.Add(mappedMaps405.Number, mappedMaps405);
      MappedMaps mappedMaps406 = new MappedMaps();
      mappedMaps406.Number = 8295;
      mappedMaps406.Default = new Location(7, 14);
      mappedMaps406.ConnectedTo.Add(8300, new Location(15, 19));
      this.AutoWalkMaps.Add(mappedMaps406.Number, mappedMaps406);
      MappedMaps mappedMaps407 = new MappedMaps();
      mappedMaps407.Number = 8296;
      mappedMaps407.Default = new Location(12, 7);
      mappedMaps407.ConnectedTo.Add(8300, new Location(24, 9));
      this.AutoWalkMaps.Add(mappedMaps407.Number, mappedMaps407);
      MappedMaps mappedMaps408 = new MappedMaps();
      mappedMaps408.Number = 8301;
      mappedMaps408.ConnectedTo.Add(8302, new Location(23, 99));
      mappedMaps408.ConnectedTo.Add(8300, new Location(0, 21));
      this.AutoWalkMaps.Add(mappedMaps408.Number, mappedMaps408);
      MappedMaps mappedMaps409 = new MappedMaps();
      mappedMaps409.Number = 8302;
      mappedMaps409.ConnectedTo.Add(8305, new Location(99, 31));
      mappedMaps409.ConnectedTo.Add(8301, new Location(20, 0));
      this.AutoWalkMaps.Add(mappedMaps409.Number, mappedMaps409);
      MappedMaps mappedMaps410 = new MappedMaps();
      mappedMaps410.Number = 8303;
      mappedMaps410.ConnectedTo.Add(8318, new Location(0, 37));
      mappedMaps410.ConnectedTo.Add(8304, new Location(99, 65));
      this.AutoWalkMaps.Add(mappedMaps410.Number, mappedMaps410);
      MappedMaps mappedMaps411 = new MappedMaps();
      mappedMaps411.Number = 8304;
      mappedMaps411.ConnectedTo.Add(8303, new Location(0, 65));
      mappedMaps411.ConnectedTo.Add(8305, new Location(81, 0));
      this.AutoWalkMaps.Add(mappedMaps411.Number, mappedMaps411);
      MappedMaps mappedMaps412 = new MappedMaps();
      mappedMaps412.Number = 8305;
      mappedMaps412.ConnectedTo.Add(8304, new Location(78, 99));
      mappedMaps412.ConnectedTo.Add(8306, new Location(57, 0));
      mappedMaps412.ConnectedTo.Add(8302, new Location(0, 28));
      this.AutoWalkMaps.Add(mappedMaps412.Number, mappedMaps412);
      MappedMaps mappedMaps413 = new MappedMaps();
      mappedMaps413.Number = 8306;
      mappedMaps413.Default = new Location(95, 49);
      mappedMaps413.ConnectedTo.Add(8307, new Location(40, 0));
      mappedMaps413.ConnectedTo.Add(8319, new Location(95, 49));
      mappedMaps413.ConnectedTo.Add(8305, new Location(57, 99));
      this.AutoWalkMaps.Add(mappedMaps413.Number, mappedMaps413);
      MappedMaps mappedMaps414 = new MappedMaps();
      mappedMaps414.Number = 8319;
      mappedMaps414.Default = new Location(39, 23);
      mappedMaps414.ConnectedTo.Add(8306, new Location(0, 13));
      mappedMaps414.ConnectedTo.Add(8320, new Location(40, 29));
      this.AutoWalkMaps.Add(mappedMaps414.Number, mappedMaps414);
      MappedMaps mappedMaps415 = new MappedMaps();
      mappedMaps415.Number = 8320;
      mappedMaps415.ConnectedTo.Add(8319, new Location(9, 0));
      this.AutoWalkMaps.Add(mappedMaps415.Number, mappedMaps415);
      MappedMaps mappedMaps416 = new MappedMaps();
      mappedMaps416.Number = 8307;
      mappedMaps416.Default = new Location(7, 30);
      mappedMaps416.ConnectedTo.Add(8308, new Location(0, 30));
      mappedMaps416.ConnectedTo.Add(8306, new Location(40, 99));
      this.AutoWalkMaps.Add(mappedMaps416.Number, mappedMaps416);
      MappedMaps mappedMaps417 = new MappedMaps();
      mappedMaps417.Number = 8308;
      mappedMaps417.ConnectedTo.Add(8309, new Location(14, 0));
      mappedMaps417.ConnectedTo.Add(8307, new Location(99, 30));
      this.AutoWalkMaps.Add(mappedMaps417.Number, mappedMaps417);
      MappedMaps mappedMaps418 = new MappedMaps();
      mappedMaps418.Number = 8309;
      mappedMaps418.ConnectedTo.Add(8310, new Location(0, 17));
      mappedMaps418.ConnectedTo.Add(8308, new Location(14, 99));
      this.AutoWalkMaps.Add(mappedMaps418.Number, mappedMaps418);
      MappedMaps mappedMaps419 = new MappedMaps();
      mappedMaps419.Number = 8310;
      mappedMaps419.Default = new Location(54, 6);
      mappedMaps419.ConnectedTo.Add(8321, new Location(54, 6));
      mappedMaps419.ConnectedTo.Add(8309, new Location(99, 17));
      this.AutoWalkMaps.Add(mappedMaps419.Number, mappedMaps419);
      MappedMaps mappedMaps420 = new MappedMaps();
      mappedMaps420.Number = 8321;
      mappedMaps420.ConnectedTo.Add(8322, new Location(16, 0));
      mappedMaps420.ConnectedTo.Add(8310, new Location(15, 59));
      this.AutoWalkMaps.Add(mappedMaps420.Number, mappedMaps420);
      MappedMaps mappedMaps421 = new MappedMaps();
      mappedMaps421.Number = 8322;
      mappedMaps421.ConnectedTo.Add(8323, new Location(62, 0));
      mappedMaps421.ConnectedTo.Add(8321, new Location(16, 29));
      this.AutoWalkMaps.Add(mappedMaps421.Number, mappedMaps421);
      MappedMaps mappedMaps422 = new MappedMaps();
      mappedMaps422.Number = 8323;
      mappedMaps422.ConnectedTo.Add(8324, new Location(19, 14));
      mappedMaps422.ConnectedTo.Add(8322, new Location(12, 39));
      this.AutoWalkMaps.Add(mappedMaps422.Number, mappedMaps422);
      MappedMaps mappedMaps423 = new MappedMaps();
      mappedMaps423.Number = 8324;
      mappedMaps423.ConnectedTo.Add(8325, new Location(39, 15));
      mappedMaps423.ConnectedTo.Add(8323, new Location(0, 16));
      this.AutoWalkMaps.Add(mappedMaps423.Number, mappedMaps423);
      MappedMaps mappedMaps424 = new MappedMaps();
      mappedMaps424.Number = 8325;
      mappedMaps424.ConnectedTo.Add(8326, new Location(24, 37));
      mappedMaps424.ConnectedTo.Add(8324, new Location(0, 6));
      this.AutoWalkMaps.Add(mappedMaps424.Number, mappedMaps424);
      MappedMaps mappedMaps425 = new MappedMaps();
      mappedMaps425.Number = 8326;
      mappedMaps425.ConnectedTo.Add(8327, new Location(61, 0));
      mappedMaps425.ConnectedTo.Add(8325, new Location(0, 11));
      this.AutoWalkMaps.Add(mappedMaps425.Number, mappedMaps425);
      MappedMaps mappedMaps426 = new MappedMaps();
      mappedMaps426.Number = 8327;
      mappedMaps426.ConnectedTo.Add(8328, new Location(24, 0));
      mappedMaps426.ConnectedTo.Add(8326, new Location(19, 39));
      this.AutoWalkMaps.Add(mappedMaps426.Number, mappedMaps426);
      MappedMaps mappedMaps427 = new MappedMaps();
      mappedMaps427.Number = 8328;
      mappedMaps427.ConnectedTo.Add(8329, new Location(10, 8));
      mappedMaps427.ConnectedTo.Add(8327, new Location(9, 39));
      this.AutoWalkMaps.Add(mappedMaps427.Number, mappedMaps427);
      MappedMaps mappedMaps428 = new MappedMaps();
      mappedMaps428.Number = 8329;
      mappedMaps428.Default = new Location(28, 33);
      mappedMaps428.ConnectedTo.Add(8328, new Location(9, 39));
      this.AutoWalkMaps.Add(mappedMaps428.Number, mappedMaps428);
      MappedMaps mappedMaps429 = new MappedMaps();
      mappedMaps429.Number = 8318;
      mappedMaps429.Default = new Location(56, 88);
      mappedMaps429.ConnectedTo.Add(8345, new Location(50, 94));
      mappedMaps429.ConnectedTo.Add(8317, new Location(0, 62));
      mappedMaps429.ConnectedTo.Add(8303, new Location(99, 37));
      this.AutoWalkMaps.Add(mappedMaps429.Number, mappedMaps429);
      MappedMaps mappedMaps430 = new MappedMaps();
      mappedMaps430.Number = 8345;
      mappedMaps430.ConnectedTo.Add(8346, new Location(0, 47));
      mappedMaps430.ConnectedTo.Add(8318, new Location(6, 0));
      this.AutoWalkMaps.Add(mappedMaps430.Number, mappedMaps430);
      MappedMaps mappedMaps431 = new MappedMaps();
      mappedMaps431.Number = 8346;
      mappedMaps431.ConnectedTo.Add(8347, new Location(0, 8));
      mappedMaps431.ConnectedTo.Add(8345, new Location(99, 8));
      this.AutoWalkMaps.Add(mappedMaps431.Number, mappedMaps431);
      MappedMaps mappedMaps432 = new MappedMaps();
      mappedMaps432.Number = 8347;
      mappedMaps432.Default = new Location(27, 25);
      mappedMaps432.ConnectedTo.Add(8348, new Location(0, 18));
      mappedMaps432.ConnectedTo.Add(8346, new Location(49, 25));
      this.AutoWalkMaps.Add(mappedMaps432.Number, mappedMaps432);
      MappedMaps mappedMaps433 = new MappedMaps();
      mappedMaps433.Number = 8348;
      mappedMaps433.ConnectedTo.Add(8349, new Location(46, 69));
      mappedMaps433.ConnectedTo.Add(8347, new Location(69, 46));
      this.AutoWalkMaps.Add(mappedMaps433.Number, mappedMaps433);
      MappedMaps mappedMaps434 = new MappedMaps();
      mappedMaps434.Number = 8349;
      mappedMaps434.Default = new Location(7, 12);
      mappedMaps434.ConnectedTo.Add(8350, new Location(5, 29));
      mappedMaps434.ConnectedTo.Add(8348, new Location(25, 0));
      this.AutoWalkMaps.Add(mappedMaps434.Number, mappedMaps434);
      MappedMaps mappedMaps435 = new MappedMaps();
      mappedMaps435.Number = 8370;
      mappedMaps435.Default = new Location(12, 13);
      mappedMaps435.ConnectedTo.Add(8349, new Location(12, 16));
      this.AutoWalkMaps.Add(mappedMaps435.Number, mappedMaps435);
      MappedMaps mappedMaps436 = new MappedMaps();
      mappedMaps436.Number = 8350;
      mappedMaps436.Default = new Location(5, 34);
      mappedMaps436.ConnectedTo.Add(8351, new Location(59, 17));
      mappedMaps436.ConnectedTo.Add(8349, new Location(5, 0));
      this.AutoWalkMaps.Add(mappedMaps436.Number, mappedMaps436);
      MappedMaps mappedMaps437 = new MappedMaps();
      mappedMaps437.Number = 8351;
      mappedMaps437.ConnectedTo.Add(8352, new Location(49, 21));
      mappedMaps437.ConnectedTo.Add(8350, new Location(0, 9));
      this.AutoWalkMaps.Add(mappedMaps437.Number, mappedMaps437);
      MappedMaps mappedMaps438 = new MappedMaps();
      mappedMaps438.Number = 8352;
      mappedMaps438.ConnectedTo.Add(8353, new Location(79, 10));
      mappedMaps438.ConnectedTo.Add(8351, new Location(0, 58));
      this.AutoWalkMaps.Add(mappedMaps438.Number, mappedMaps438);
      MappedMaps mappedMaps439 = new MappedMaps();
      mappedMaps439.Number = 8353;
      mappedMaps439.ConnectedTo.Add(8354, new Location(39, 15));
      mappedMaps439.ConnectedTo.Add(8352, new Location(0, 15));
      this.AutoWalkMaps.Add(mappedMaps439.Number, mappedMaps439);
      MappedMaps mappedMaps440 = new MappedMaps();
      mappedMaps440.Number = 8354;
      mappedMaps440.ConnectedTo.Add(8355, new Location(19, 13));
      mappedMaps440.ConnectedTo.Add(8353, new Location(0, 6));
      this.AutoWalkMaps.Add(mappedMaps440.Number, mappedMaps440);
      MappedMaps mappedMaps441 = new MappedMaps();
      mappedMaps441.Number = 8355;
      mappedMaps441.Default = new Location(32, 5);
      mappedMaps441.ConnectedTo.Add(8356, new Location(32, 5));
      mappedMaps441.ConnectedTo.Add(8354, new Location(0, 5));
      this.AutoWalkMaps.Add(mappedMaps441.Number, mappedMaps441);
      MappedMaps mappedMaps442 = new MappedMaps();
      mappedMaps442.Number = 8356;
      mappedMaps442.Default = new Location(27, 53);
      mappedMaps442.ConnectedTo.Add(8357, new Location(26, 0));
      mappedMaps442.ConnectedTo.Add(8355, new Location(32, 59));
      this.AutoWalkMaps.Add(mappedMaps442.Number, mappedMaps442);
      MappedMaps mappedMaps443 = new MappedMaps();
      mappedMaps443.Number = 8357;
      mappedMaps443.ConnectedTo.Add(8358, new Location(26, 0));
      mappedMaps443.ConnectedTo.Add(8356, new Location(26, 59));
      this.AutoWalkMaps.Add(mappedMaps443.Number, mappedMaps443);
      MappedMaps mappedMaps444 = new MappedMaps();
      mappedMaps444.Number = 8358;
      mappedMaps444.Default = new Location(15, 35);
      mappedMaps444.ConnectedTo.Add(8357, new Location(28, 59));
      mappedMaps444.ConnectedTo.Add(8372, new Location(32, 0));
      mappedMaps444.ConnectedTo.Add(8371, new Location(59, 27));
      this.AutoWalkMaps.Add(mappedMaps444.Number, mappedMaps444);
      MappedMaps mappedMaps445 = new MappedMaps();
      mappedMaps445.Number = 8372;
      mappedMaps445.Default = new Location(30, 40);
      this.AutoWalkMaps.Add(mappedMaps445.Number, mappedMaps445);
      MappedMaps mappedMaps446 = new MappedMaps();
      mappedMaps446.Number = 8371;
      this.AutoWalkMaps.Add(mappedMaps446.Number, mappedMaps446);
      MappedMaps mappedMaps447 = new MappedMaps();
      mappedMaps447.Number = 8359;
      mappedMaps447.Default = new Location(11, 21);
      mappedMaps447.ConnectedTo.Add(8360, new Location(31, 2));
      this.AutoWalkMaps.Add(mappedMaps447.Number, mappedMaps447);
      MappedMaps mappedMaps448 = new MappedMaps();
      mappedMaps448.Number = 8360;
      mappedMaps448.ConnectedTo.Add(8361, new Location(31, 2));
      mappedMaps448.ConnectedTo.Add(8359, new Location(29, 49));
      this.AutoWalkMaps.Add(mappedMaps448.Number, mappedMaps448);
      MappedMaps mappedMaps449 = new MappedMaps();
      mappedMaps449.Number = 8361;
      mappedMaps449.ConnectedTo.Add(8362, new Location(29, 9));
      mappedMaps449.ConnectedTo.Add(8360, new Location(29, 49));
      this.AutoWalkMaps.Add(mappedMaps449.Number, mappedMaps449);
      MappedMaps mappedMaps450 = new MappedMaps();
      mappedMaps450.Number = 8362;
      mappedMaps450.ConnectedTo.Add(8363, new Location(1, 33));
      mappedMaps450.ConnectedTo.Add(8361, new Location(29, 49));
      this.AutoWalkMaps.Add(mappedMaps450.Number, mappedMaps450);
      MappedMaps mappedMaps451 = new MappedMaps();
      mappedMaps451.Number = 8363;
      mappedMaps451.ConnectedTo.Add(8364, new Location(32, 2));
      mappedMaps451.ConnectedTo.Add(8362, new Location(49, 32));
      this.AutoWalkMaps.Add(mappedMaps451.Number, mappedMaps451);
      MappedMaps mappedMaps452 = new MappedMaps();
      mappedMaps452.Number = 8364;
      mappedMaps452.ConnectedTo.Add(8365, new Location(31, 2));
      mappedMaps452.ConnectedTo.Add(8363, new Location(30, 49));
      this.AutoWalkMaps.Add(mappedMaps452.Number, mappedMaps452);
      MappedMaps mappedMaps453 = new MappedMaps();
      mappedMaps453.Number = 8365;
      mappedMaps453.ConnectedTo.Add(8366, new Location(31, 2));
      mappedMaps453.ConnectedTo.Add(8364, new Location(29, 49));
      this.AutoWalkMaps.Add(mappedMaps453.Number, mappedMaps453);
      MappedMaps mappedMaps454 = new MappedMaps();
      mappedMaps454.Number = 8366;
      mappedMaps454.ConnectedTo.Add(8367, new Location(49, 33));
      mappedMaps454.ConnectedTo.Add(8365, new Location(30, 49));
      this.AutoWalkMaps.Add(mappedMaps454.Number, mappedMaps454);
      MappedMaps mappedMaps455 = new MappedMaps();
      mappedMaps455.Number = 8367;
      mappedMaps455.ConnectedTo.Add(8368, new Location(49, 32));
      mappedMaps455.ConnectedTo.Add(8366, new Location(1, 33));
      this.AutoWalkMaps.Add(mappedMaps455.Number, mappedMaps455);
      MappedMaps mappedMaps456 = new MappedMaps();
      mappedMaps456.Number = 8368;
      mappedMaps456.Default = new Location(44, 33);
      mappedMaps456.ConnectedTo.Add(8367, new Location(1, 32));
      this.AutoWalkMaps.Add(mappedMaps456.Number, mappedMaps456);
      MappedMaps mappedMaps457 = new MappedMaps();
      mappedMaps457.Number = 8317;
      mappedMaps457.ConnectedTo.Add(8316, new Location(47, 0));
      mappedMaps457.ConnectedTo.Add(8318, new Location(99, 67));
      this.AutoWalkMaps.Add(mappedMaps457.Number, mappedMaps457);
      MappedMaps mappedMaps458 = new MappedMaps();
      mappedMaps458.Number = 8316;
      mappedMaps458.ConnectedTo.Add(8315, new Location(0, 78));
      mappedMaps458.ConnectedTo.Add(8317, new Location(47, 99));
      this.AutoWalkMaps.Add(mappedMaps458.Number, mappedMaps458);
      MappedMaps mappedMaps459 = new MappedMaps();
      mappedMaps459.Number = 8315;
      mappedMaps459.ConnectedTo.Add(8314, new Location(48, 0));
      mappedMaps459.ConnectedTo.Add(8316, new Location(99, 71));
      this.AutoWalkMaps.Add(mappedMaps459.Number, mappedMaps459);
      MappedMaps mappedMaps460 = new MappedMaps();
      mappedMaps460.Number = 8314;
      mappedMaps460.Default = new Location(7, 95);
      mappedMaps460.ConnectedTo.Add(8330, new Location(1, 95));
      mappedMaps460.ConnectedTo.Add(8315, new Location(44, 99));
      this.AutoWalkMaps.Add(mappedMaps460.Number, mappedMaps460);
      MappedMaps mappedMaps461 = new MappedMaps();
      mappedMaps461.Number = 8330;
      mappedMaps461.ConnectedTo.Add(8331, new Location(17, 0));
      mappedMaps461.ConnectedTo.Add(8314, new Location(39, 32));
      this.AutoWalkMaps.Add(mappedMaps461.Number, mappedMaps461);
      MappedMaps mappedMaps462 = new MappedMaps();
      mappedMaps462.Number = 8331;
      mappedMaps462.ConnectedTo.Add(8332, new Location(0, 20));
      mappedMaps462.ConnectedTo.Add(8330, new Location(16, 39));
      this.AutoWalkMaps.Add(mappedMaps462.Number, mappedMaps462);
      MappedMaps mappedMaps463 = new MappedMaps();
      mappedMaps463.Number = 8332;
      mappedMaps463.ConnectedTo.Add(8333, new Location(0, 20));
      mappedMaps463.ConnectedTo.Add(8331, new Location(39, 20));
      this.AutoWalkMaps.Add(mappedMaps463.Number, mappedMaps463);
      MappedMaps mappedMaps464 = new MappedMaps();
      mappedMaps464.Number = 8333;
      mappedMaps464.ConnectedTo.Add(8334, new Location(0, 20));
      mappedMaps464.ConnectedTo.Add(8332, new Location(39, 20));
      this.AutoWalkMaps.Add(mappedMaps464.Number, mappedMaps464);
      MappedMaps mappedMaps465 = new MappedMaps();
      mappedMaps465.Number = 8334;
      mappedMaps465.ConnectedTo.Add(8335, new Location(17, 39));
      mappedMaps465.ConnectedTo.Add(8333, new Location(39, 20));
      this.AutoWalkMaps.Add(mappedMaps465.Number, mappedMaps465);
      MappedMaps mappedMaps466 = new MappedMaps();
      mappedMaps466.Number = 8335;
      mappedMaps466.ConnectedTo.Add(8336, new Location(0, 18));
      mappedMaps466.ConnectedTo.Add(8334, new Location(17, 0));
      this.AutoWalkMaps.Add(mappedMaps466.Number, mappedMaps466);
      MappedMaps mappedMaps467 = new MappedMaps();
      mappedMaps467.Number = 8336;
      mappedMaps467.ConnectedTo.Add(8337, new Location(0, 18));
      mappedMaps467.ConnectedTo.Add(8335, new Location(39, 18));
      this.AutoWalkMaps.Add(mappedMaps467.Number, mappedMaps467);
      MappedMaps mappedMaps468 = new MappedMaps();
      mappedMaps468.Number = 8337;
      mappedMaps468.Default = new Location(21, 5);
      mappedMaps468.ConnectedTo.Add(8338, new Location(21, 5));
      mappedMaps468.ConnectedTo.Add(8336, new Location(39, 18));
      this.AutoWalkMaps.Add(mappedMaps468.Number, mappedMaps468);
      MappedMaps mappedMaps469 = new MappedMaps();
      mappedMaps469.Number = 8338;
      mappedMaps469.ConnectedTo.Add(8339, new Location(0, 20));
      mappedMaps469.ConnectedTo.Add(8337, new Location(17, 39));
      this.AutoWalkMaps.Add(mappedMaps469.Number, mappedMaps469);
      MappedMaps mappedMaps470 = new MappedMaps();
      mappedMaps470.Number = 8339;
      mappedMaps470.ConnectedTo.Add(8340, new Location(18, 0));
      mappedMaps470.ConnectedTo.Add(8338, new Location(39, 17));
      this.AutoWalkMaps.Add(mappedMaps470.Number, mappedMaps470);
      MappedMaps mappedMaps471 = new MappedMaps();
      mappedMaps471.Number = 8340;
      mappedMaps471.ConnectedTo.Add(8341, new Location(39, 20));
      mappedMaps471.ConnectedTo.Add(8339, new Location(18, 39));
      this.AutoWalkMaps.Add(mappedMaps471.Number, mappedMaps471);
      MappedMaps mappedMaps472 = new MappedMaps();
      mappedMaps472.Number = 8341;
      mappedMaps472.ConnectedTo.Add(8342, new Location(39, 20));
      mappedMaps472.ConnectedTo.Add(8340, new Location(0, 20));
      this.AutoWalkMaps.Add(mappedMaps472.Number, mappedMaps472);
      MappedMaps mappedMaps473 = new MappedMaps();
      mappedMaps473.Number = 8342;
      mappedMaps473.ConnectedTo.Add(8343, new Location(39, 20));
      mappedMaps473.ConnectedTo.Add(8341, new Location(0, 20));
      this.AutoWalkMaps.Add(mappedMaps473.Number, mappedMaps473);
      MappedMaps mappedMaps474 = new MappedMaps();
      mappedMaps474.Number = 8343;
      mappedMaps474.ConnectedTo.Add(8344, new Location(39, 20));
      mappedMaps474.ConnectedTo.Add(8342, new Location(0, 20));
      this.AutoWalkMaps.Add(mappedMaps474.Number, mappedMaps474);
      MappedMaps mappedMaps475 = new MappedMaps();
      mappedMaps475.Number = 8344;
      mappedMaps475.Default = new Location(9, 20);
      mappedMaps475.ConnectedTo.Add(8343, new Location(0, 20));
      this.AutoWalkMaps.Add(mappedMaps475.Number, mappedMaps475);
      MappedMaps mappedMaps476 = new MappedMaps();
      mappedMaps476.Number = 9378;
      mappedMaps476.Default = new Location(6, 27);
      mappedMaps476.ConnectedTo.Add(10999, new Location(20, 20));
      mappedMaps476.ConnectedTo.Add(10998, new Location(20, 20));
      mappedMaps476.ConnectedTo.Add(3950, new Location(20, 20));
      this.AutoWalkMaps.Add(mappedMaps476.Number, mappedMaps476);
    }

    public void SaveMacroList()
    {
      XDocument xdocument = new XDocument();
      xdocument.Add((object) new XElement((XName) "MacroSpellList"));
      foreach (ListViewItem listViewItem in this.Tab.MacroOptions.macrospellslistview.Items)
      {
        if (xdocument.Element((XName) "MacroSpellList") != null)
          xdocument.Element((XName) "MacroSpellList").Add((object) new XElement((XName) "Spell", (object) (listViewItem.Text + "|" + listViewItem.SubItems[1].Text + "|" + listViewItem.SubItems[2].Text + "|" + listViewItem.SubItems[3].Text)));
      }
      if (Directory.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower()))
      {
        if (xdocument.Nodes().Count<XNode>() <= 0 || !xdocument.Element((XName) "MacroSpellList").HasElements)
          return;
        xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\macro.xml");
      }
      else
      {
        Directory.CreateDirectory(Program.StartupPath + "\\Settings\\" + this.Name.ToLower());
        xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\macro.xml");
      }
    }

    public void LoadMacroList()
    {
      if (!Directory.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower()) || !System.IO.File.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\macro.xml"))
        return;
      XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\macro.xml");
      if (xdocument.Element((XName) "MacroSpellList") != null)
      {
        foreach (XElement element in xdocument.Element((XName) "MacroSpellList").Elements((XName) "Spell"))
        {
          string[] strArray = element.Value.Split('|');
          if (this.HasSpell(strArray[0], false))
          {
            Spell spell = this.GetSpell(strArray[0]);
            if (spell.CurrentLevel != spell.MaximumLevel)
            {
              ListViewItem listViewItem = this.Tab.MacroOptions.macrospellslistview.Items.Add(strArray[0], strArray[0], -1);
              listViewItem.SubItems.Add(spell.CurrentLevel.ToString());
              listViewItem.SubItems.Add(strArray[2]);
              listViewItem.SubItems.Add(strArray[3]);
            }
          }
        }
      }
    }

    public void SaveFakeSkills()
    {
      XDocument xdocument = new XDocument();
      xdocument.Add((object) new XElement((XName) "SkillDetails"));
      foreach (Skill skill in this.FakeSkills.Values)
        xdocument.Element((XName) "SkillDetails").Add((object) new XElement((XName) "Skill", (object) (skill.Name + "|" + skill.Icon.ToString() + "|" + skill.SkillSlot.ToString())));
      foreach (string key in this.Combos.Keys)
        xdocument.Element((XName) "SkillDetails").Add((object) new XElement((XName) "Combo", (object) (key + "|" + this.Combos[key])));
      if (Directory.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower()))
      {
        if (xdocument.Nodes().Count<XNode>() <= 0)
          return;
        xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\skills.xml");
      }
      else
      {
        Directory.CreateDirectory(Program.StartupPath + "\\Settings\\" + this.Name.ToLower());
        xdocument.Save(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\skills.xml");
      }
    }

    public bool SlotHasFakeSkill(byte slot)
    {
      foreach (Skill skill in this.FakeSkills.Values)
      {
        if (skill != null && skill.SkillSlot == (int) slot)
          return true;
      }
      return false;
    }

    public void LoadFakeSkills()
    {
      if (!Directory.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower()) || !System.IO.File.Exists(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\skills.xml"))
        return;
      XDocument xdocument = XDocument.Load(Program.StartupPath + "\\Settings\\" + this.Name.ToLower() + "\\skills.xml");
      foreach (XElement element in xdocument.Element((XName) "SkillDetails").Elements((XName) "Skill"))
      {
        string[] strArray = element.Value.Split('|');
        byte slot = byte.Parse(strArray[2]);
        if (this.SkillBook[(int) slot - 1] != null || this.SlotHasFakeSkill(slot))
        {
          if (slot < (byte) 36)
          {
            for (int index = 1; index < 36; ++index)
            {
              if (this.SkillBook[index - 1] == null && !this.SlotHasFakeSkill((byte) index))
              {
                slot = (byte) index;
                break;
              }
            }
          }
          else if (slot > (byte) 36 && slot < (byte) 72)
          {
            for (int index = 37; index < 72; ++index)
            {
              if (this.SkillBook[index - 1] == null && !this.SlotHasFakeSkill((byte) index))
              {
                slot = (byte) index;
                break;
              }
            }
          }
          else if (slot > (byte) 72)
          {
            for (int index = 73; index < 90; ++index)
            {
              if (this.SkillBook[index - 1] == null && !this.SlotHasFakeSkill((byte) index))
              {
                slot = (byte) index;
                break;
              }
            }
          }
        }
        this.CreateSkill(slot, int.Parse(strArray[1]), strArray[0]);
      }
      foreach (XElement element in xdocument.Element((XName) "SkillDetails").Elements((XName) "Combo"))
      {
        string[] strArray = element.Value.Split('|');
        string str = element.Value.Remove(0, element.Value.IndexOf('|') + 1);
        if (!this.Combos.ContainsKey(strArray[0]))
          this.Combos.Add(strArray[0], str);
      }
      foreach (string key in this.Combos.Keys)
        ;
    }

    public Location ClosestHerbNode()
    {
      if (this.Tab.improveskill.Text.Equals("Herbalist"))
      {
        foreach (KeyValuePair<string, HerbNode> keyValuePair in (IEnumerable<KeyValuePair<string, HerbNode>>) Server.HerbNodes.OrderBy<KeyValuePair<string, HerbNode>, int>((Func<KeyValuePair<string, HerbNode>, int>) (n => n.Value.Location.DistanceFrom(this.ServerLocation))))
        {
          if (keyValuePair.Key != null && keyValuePair.Value.Active && keyValuePair.Value.Map == this.MapInfo.Number)
            return keyValuePair.Value.Location;
        }
      }
      else if (this.Tab.improveskill.Text.Equals("Herbalist (hydele)"))
      {
        foreach (KeyValuePair<string, HerbNode> keyValuePair in (IEnumerable<KeyValuePair<string, HerbNode>>) Server.HydeleNodes.OrderBy<KeyValuePair<string, HerbNode>, int>((Func<KeyValuePair<string, HerbNode>, int>) (n => n.Value.Location.DistanceFrom(this.ServerLocation))))
        {
          if (keyValuePair.Key != null && keyValuePair.Value.Active && keyValuePair.Value.Map == this.MapInfo.Number)
            return keyValuePair.Value.Location;
        }
      }
      else if (this.Tab.improveskill.Text.Equals("Herbalist (betony)"))
      {
        foreach (KeyValuePair<string, HerbNode> keyValuePair in (IEnumerable<KeyValuePair<string, HerbNode>>) Server.BetonyNodes.OrderBy<KeyValuePair<string, HerbNode>, int>((Func<KeyValuePair<string, HerbNode>, int>) (n => n.Value.Location.DistanceFrom(this.ServerLocation))))
        {
          if (keyValuePair.Key != null && keyValuePair.Value.Active && keyValuePair.Value.Map == this.MapInfo.Number)
            return keyValuePair.Value.Location;
        }
      }
      else if (this.Tab.improveskill.Text.Equals("Herbalist (personaca)"))
      {
        foreach (KeyValuePair<string, HerbNode> keyValuePair in (IEnumerable<KeyValuePair<string, HerbNode>>) Server.PersonacaNodes.OrderBy<KeyValuePair<string, HerbNode>, int>((Func<KeyValuePair<string, HerbNode>, int>) (n => n.Value.Location.DistanceFrom(this.ServerLocation))))
        {
          if (keyValuePair.Key != null && keyValuePair.Value.Active && keyValuePair.Value.Map == this.MapInfo.Number)
            return keyValuePair.Value.Location;
        }
      }
      return (Location) null;
    }

    public void SaveHerbNodes()
    {
      string str = Program.StartupPath + "\\Settings\\HerbNodes.xml";
      XmlDocument xmlDocument = new XmlDocument();
      if (System.IO.File.Exists(str))
      {
        xmlDocument.Load(str);
        XmlNode documentElement = (XmlNode) xmlDocument.DocumentElement;
        foreach (KeyValuePair<string, HerbNode> herbNode in Server.HerbNodes)
        {
          bool flag = false;
          foreach (XmlNode childNode in documentElement.ChildNodes)
          {
            if (childNode.InnerText != string.Empty && childNode.InnerText == herbNode.Key)
            {
              flag = true;
              break;
            }
          }
          if (!flag)
          {
            XmlNode element = (XmlNode) xmlDocument.CreateElement(herbNode.Value.Type);
            element.InnerText = herbNode.Key;
            documentElement.AppendChild(element);
          }
        }
        foreach (string key in Server.HydeleNodes.Keys)
        {
          bool flag = false;
          foreach (XmlNode childNode in documentElement.ChildNodes)
          {
            if (childNode.InnerText != string.Empty && childNode.InnerText == key)
            {
              flag = true;
              break;
            }
          }
          if (!flag)
          {
            XmlNode element = (XmlNode) xmlDocument.CreateElement("Hydele");
            element.InnerText = key;
            documentElement.AppendChild(element);
          }
        }
        foreach (string key in Server.BetonyNodes.Keys)
        {
          bool flag = false;
          foreach (XmlNode childNode in documentElement.ChildNodes)
          {
            if (childNode.InnerText != string.Empty && childNode.InnerText == key)
            {
              flag = true;
              break;
            }
          }
          if (!flag)
          {
            XmlNode element = (XmlNode) xmlDocument.CreateElement("Betony");
            element.InnerText = key;
            documentElement.AppendChild(element);
          }
        }
        foreach (string key in Server.PersonacaNodes.Keys)
        {
          bool flag = false;
          foreach (XmlNode childNode in documentElement.ChildNodes)
          {
            if (childNode.InnerText != string.Empty && childNode.InnerText == key)
            {
              flag = true;
              break;
            }
          }
          if (!flag)
          {
            XmlNode element = (XmlNode) xmlDocument.CreateElement("Personaca");
            element.InnerText = key;
            documentElement.AppendChild(element);
          }
        }
      }
      else
      {
        XmlNode element1 = (XmlNode) xmlDocument.CreateElement("HerbNodes");
        xmlDocument.AppendChild(element1);
        foreach (KeyValuePair<string, HerbNode> herbNode in Server.HerbNodes)
        {
          XmlNode element2 = (XmlNode) xmlDocument.CreateElement(herbNode.Value.Type);
          element2.InnerText = herbNode.Key;
          element1.AppendChild(element2);
        }
        foreach (string key in Server.HydeleNodes.Keys)
        {
          XmlNode element2 = (XmlNode) xmlDocument.CreateElement("Hydele");
          element2.InnerText = key;
          element1.AppendChild(element2);
        }
        foreach (string key in Server.BetonyNodes.Keys)
        {
          XmlNode element2 = (XmlNode) xmlDocument.CreateElement("Betony");
          element2.InnerText = key;
          element1.AppendChild(element2);
        }
        foreach (string key in Server.PersonacaNodes.Keys)
        {
          XmlNode element2 = (XmlNode) xmlDocument.CreateElement("Personaca");
          element2.InnerText = key;
          element1.AppendChild(element2);
        }
      }
      if (xmlDocument.ChildNodes.Count <= 0 || !xmlDocument.DocumentElement.HasChildNodes)
        return;
      xmlDocument.Save(str);
    }

    public void PlayBardNote(byte note)
    {
      if (this.bardsnotesID == 0U)
        return;
      this.UseItem("Bard's Notes");
      this.PopupRespond(new uint?(this.bardsnotesID), (ushort) 0, (byte) 0, (byte) 2, (byte) 1, note, (byte) 2);
    }

    public void YTQuestStep(string dest)
    {
      this.Tab.walklocaleslist.SelectedItem = (object) dest;
      this.Tab.autowalker_button.Text = "Stop";
      this.autowalkon = true;
    }

    public void openallmails()
    {
      if (this.MailList.Count<Mail>() == 0)
        this.SendMessage("open your mail list and wait a moment, then close it and try again", (byte) 0, false);
      foreach (Mail mail in this.MailList.ToArray())
        this.CheckMail(new ushort?(mail.Number));
    }
  }
}
